/* eslint-disable */

export const AllTypesProps: Record<string, any> = {
  AccessLevelEnum: 'enum',
  Achievement: {
    userAchievements: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  AchievementsAchievementID: 'String',
  AchievementsAwardInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    achievementId: {
      type: 'AchievementsAchievementID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    userId: {
      type: 'UserID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AchievementsCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    namespaceId: {
      type: 'NamespaceID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    avatar: {
      type: 'Upload',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AchievementsDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    achievementId: {
      type: 'AchievementsAchievementID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AchievementsRevokeInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    userAchievementId: {
      type: 'AchievementsUserAchievementID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AchievementsUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    achievementId: {
      type: 'AchievementsAchievementID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    avatar: {
      type: 'Upload',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AchievementsUserAchievementID: 'String',
  AddProjectToSecurityDashboardInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AdminSidekiqQueuesDeleteJobsInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    user: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    userId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    project: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    rootNamespace: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    callerId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    remoteIp: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    jobId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    pipelineId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    relatedClass: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    featureCategory: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    artifactSize: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    artifactUsedCdn: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    artifactsDependenciesSize: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    artifactsDependenciesCount: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    rootCallerId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    mergeActionStatus: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    subscriptionPlan: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    workerClass: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    queueName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AgentTokenStatus: 'enum',
  AiActionInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    analyzeCiJobFailure: {
      type: 'AnalyzeCiJobFailureInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    explainVulnerability: {
      type: 'AiExplainVulnerabilityInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    summarizeComments: {
      type: 'AiSummarizeCommentsInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    summarizeReview: {
      type: 'AiSummarizeReviewInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    explainCode: {
      type: 'AiExplainCodeInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tanukiBot: {
      type: 'AiTanukiBotInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    generateTestFile: {
      type: 'GenerateTestFileInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    generateDescription: {
      type: 'AiGenerateDescriptionInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    generateCommitMessage: {
      type: 'AiGenerateCommitMessageInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    chat: {
      type: 'AiChatInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fillInMergeRequestTemplate: {
      type: 'AiFillInMergeRequestTemplateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    markupFormat: {
      type: 'MarkupFormat',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AiCachedMessageRole: 'enum',
  AiChatInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    content: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AiExplainCodeInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    messages: {
      type: 'AiExplainCodeMessageInput',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  AiExplainCodeMessageInput: {
    role: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    content: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AiExplainVulnerabilityInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AiFillInMergeRequestTemplateInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    sourceProjectId: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    sourceBranch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetBranch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    content: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AiGenerateCommitMessageInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AiGenerateDescriptionInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    content: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    descriptionTemplateName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AiModelID: 'String',
  AiSummarizeCommentsInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AiSummarizeReviewInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AiTanukiBotInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    question: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AlertManagementAlert: {
    assignees: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    todos: {
      action: {
        type: 'TodoActionEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      groupId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'TodoStateEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'TodoTargetEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  AlertManagementAlertID: 'String',
  AlertManagementAlertSort: 'enum',
  AlertManagementDomainFilter: 'enum',
  AlertManagementHttpIntegrationID: 'String',
  AlertManagementIntegrationType: 'enum',
  AlertManagementPayloadAlertFieldInput: {
    fieldName: {
      type: 'AlertManagementPayloadAlertFieldName',
      array: false,
      arrayRequired: false,
      required: true,
    },
    path: {
      type: 'PayloadAlertFieldPathSegment',
      array: true,
      arrayRequired: true,
      required: true,
    },
    label: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    type: {
      type: 'AlertManagementPayloadAlertFieldType',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AlertManagementPayloadAlertFieldName: 'enum',
  AlertManagementPayloadAlertFieldType: 'enum',
  AlertManagementSeverity: 'enum',
  AlertManagementStatus: 'enum',
  AlertSetAssigneesInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeUsernames: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
    operationMode: {
      type: 'MutationOperationMode',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AlertTodoCreateInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AnalyticsDevopsAdoptionEnabledNamespaceID: 'String',
  AnalyzeCiJobFailureInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ApiFuzzingScanMode: 'enum',
  AppSecFuzzingCoverageCorpusID: 'String',
  ApprovalProjectRule: {
    eligibleApprovers: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ApprovalRule: {
    approvedBy: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commentedBy: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groups: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    users: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ApprovalRuleType: 'enum',
  ApproveDeploymentInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DeploymentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    status: {
      type: 'DeploymentsApprovalStatus',
      array: false,
      arrayRequired: false,
      required: true,
    },
    comment: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    representedAs: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ArtifactDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'CiJobArtifactID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AssigneeWildcardId: 'enum',
  AuditEventsExternalAuditEventDestinationID: 'String',
  AuditEventsGoogleCloudLoggingConfigurationID: 'String',
  AuditEventsInstanceExternalAuditEventDestinationID: 'String',
  AuditEventsStreamingDestinationEventsAddInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    destinationId: {
      type: 'AuditEventsExternalAuditEventDestinationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    eventTypeFilters: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  AuditEventsStreamingDestinationEventsRemoveInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    destinationId: {
      type: 'AuditEventsExternalAuditEventDestinationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    eventTypeFilters: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  AuditEventsStreamingHeaderID: 'String',
  AuditEventsStreamingHeadersCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    key: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    value: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    destinationId: {
      type: 'AuditEventsExternalAuditEventDestinationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AuditEventsStreamingHeadersDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    headerId: {
      type: 'AuditEventsStreamingHeaderID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AuditEventsStreamingHeadersUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    headerId: {
      type: 'AuditEventsStreamingHeaderID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    key: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    value: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AuditEventsStreamingInstanceHeaderID: 'String',
  AuditEventsStreamingInstanceHeadersCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    key: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    value: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    destinationId: {
      type: 'AuditEventsInstanceExternalAuditEventDestinationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AuditEventsStreamingInstanceHeadersUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    headerId: {
      type: 'AuditEventsStreamingInstanceHeaderID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    key: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    value: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  AvailabilityEnum: 'enum',
  AvailableExportFields: 'enum',
  AwardEmojiAddInput: {
    awardableId: {
      type: 'AwardableID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AwardEmojiRemoveInput: {
    awardableId: {
      type: 'AwardableID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AwardEmojiToggleInput: {
    awardableId: {
      type: 'AwardableID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  AwardableID: 'String',
  BigInt: 'String',
  BlobViewersType: 'enum',
  Board: {
    epics: {
      issueFilters: {
        type: 'BoardIssueInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    labels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    lists: {
      id: {
        type: 'ListID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      issueFilters: {
        type: 'BoardIssueInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  BoardEpic: {
    ancestors: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'EpicState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'EpicSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iidStartsWith: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeDescendantGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedEpicFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      topLevelHierarchyOnly: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    awardEmoji: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    blockedByEpics: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    children: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'EpicState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'EpicSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iidStartsWith: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeDescendantGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedEpicFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      topLevelHierarchyOnly: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    currentUserTodos: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'TodoStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    events: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issues: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    labels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    participants: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reference: {
      full: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  BoardEpicCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    boardId: {
      type: 'BoardsEpicBoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    listId: {
      type: 'BoardsEpicListID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  BoardID: 'String',
  BoardIssueInput: {
    labelName: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: false,
    },
    authorUsername: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    myReactionEmoji: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iids: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    milestoneTitle: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeUsername: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: false,
    },
    releaseTag: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    types: {
      type: 'IssueType',
      array: true,
      arrayRequired: false,
      required: true,
    },
    milestoneWildcardId: {
      type: 'MilestoneWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationTitle: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weight: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'IterationID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    not: {
      type: 'NegatedBoardIssueInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    or: {
      type: 'UnionedIssueFilterInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    search: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeWildcardId: {
      type: 'AssigneeWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    epicWildcardId: {
      type: 'EpicWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationWildcardId: {
      type: 'IterationWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationCadenceId: {
      type: 'IterationsCadenceID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    weightWildcardId: {
      type: 'WeightWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    healthStatusFilter: {
      type: 'HealthStatusFilter',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  BoardList: {
    issues: {
      filters: {
        type: 'BoardIssueInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  BoardListCreateInput: {
    backlog: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labelId: {
      type: 'LabelID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    boardId: {
      type: 'BoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    milestoneId: {
      type: 'MilestoneID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'IterationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeId: {
      type: 'UserID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  BoardListUpdateLimitMetricsInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    listId: {
      type: 'ListID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    limitMetric: {
      type: 'ListLimitMetric',
      array: false,
      arrayRequired: false,
      required: false,
    },
    maxIssueCount: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    maxIssueWeight: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  BoardsEpicBoardID: 'String',
  BoardsEpicListID: 'String',
  BranchProtection: {
    mergeAccessLevels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pushAccessLevels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    unprotectAccessLevels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  BranchRule: {
    approvalRules: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    externalStatusChecks: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  BuildForecastInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    type: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    horizon: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    contextId: {
      type: 'GlobalID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  BulkDestroyJobArtifactsInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    ids: {
      type: 'CiJobArtifactID',
      array: true,
      arrayRequired: true,
      required: true,
    },
    projectId: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  BulkEnableDevopsAdoptionNamespacesInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    namespaceIds: {
      type: 'NamespaceID',
      array: true,
      arrayRequired: true,
      required: true,
    },
    displayNamespaceId: {
      type: 'NamespaceID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  BulkRunnerDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    ids: {
      type: 'CiRunnerID',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  CatalogResourcesCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CiAiGenerateConfigInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    userContent: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CiBuildID: 'String',
  CiCatalogResource: {
    versions: {
      sort: {
        type: 'ReleaseSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiCatalogResourceID: 'String',
  CiCatalogResourceSort: 'enum',
  CiConfig: {
    stages: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiConfigGroup: {
    jobs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiConfigIncludeType: 'enum',
  CiConfigJob: {
    needs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiConfigStage: {
    groups: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiConfigStatus: 'enum',
  CiFreezePeriodStatus: 'enum',
  CiGroup: {
    jobs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiJob: {
    artifacts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    manualVariables: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    needs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    previousStageJobsOrNeeds: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiJobArtifactID: 'String',
  CiJobConnection: {
    count: {
      limit: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiJobKind: 'enum',
  CiJobStatus: 'enum',
  CiJobTokenScopeAddProjectInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetProjectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CiJobTokenScopeDirection: 'enum',
  CiJobTokenScopeRemoveProjectInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetProjectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    direction: {
      type: 'CiJobTokenScopeDirection',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CiJobTokenScopeType: {
    inboundAllowlist: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    outboundAllowlist: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projects: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiMinutesNamespaceMonthlyUsage: {
    projects: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiPipelineID: 'String',
  CiPipelineScheduleID: 'String',
  CiRunner: {
    groups: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    jobs: {
      statuses: {
        type: 'CiJobStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    managers: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projects: {
      membership: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      searchNamespaces: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      topics: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiRunnerAccessLevel: 'enum',
  CiRunnerID: 'String',
  CiRunnerJobExecutionStatus: 'enum',
  CiRunnerManagerID: 'String',
  CiRunnerMembershipFilter: 'enum',
  CiRunnerSort: 'enum',
  CiRunnerStatus: 'enum',
  CiRunnerType: 'enum',
  CiRunnerUpgradeStatus: 'enum',
  CiStage: {
    groups: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    jobs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CiStageID: 'String',
  CiVariableInput: {
    key: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    value: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CiVariableSort: 'enum',
  CiVariableType: 'enum',
  ClusterAgent: {
    activityEvents: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    connections: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    tokens: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilityImages: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ClusterAgentDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ClustersAgentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ClusterAgentTokenCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clusterAgentId: {
      type: 'ClustersAgentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ClusterAgentTokenRevokeInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ClustersAgentTokenID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ClustersAgentID: 'String',
  ClustersAgentTokenID: 'String',
  ClustersClusterID: 'String',
  CodeQualityDegradationSeverity: 'enum',
  Color: 'String',
  Commit: {
    pipelines: {
      status: {
        type: 'PipelineStatusEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      scope: {
        type: 'PipelineScopeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      source: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CommitAction: {
    action: {
      type: 'CommitActionMode',
      array: false,
      arrayRequired: false,
      required: true,
    },
    content: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    encoding: {
      type: 'CommitEncoding',
      array: false,
      arrayRequired: false,
      required: false,
    },
    executeFilemode: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    filePath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    lastCommitId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    previousPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CommitActionMode: 'enum',
  CommitCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    branch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    startBranch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    message: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    actions: {
      type: 'CommitAction',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  CommitEncoding: 'enum',
  CommitReferences: {
    containingBranches: {
      excludeTipped: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: true,
      },
      limit: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    containingTags: {
      excludeTipped: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: true,
      },
      limit: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    tippingBranches: {
      limit: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    tippingTags: {
      limit: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
  },
  ComparableSecurityReportType: 'enum',
  ComplianceFrameworkFilters: {
    id: {
      type: 'ComplianceManagementFrameworkID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    not: {
      type: 'NegatedComplianceFrameworkFilters',
      array: false,
      arrayRequired: false,
      required: false,
    },
    presenceFilter: {
      type: 'ComplianceFrameworkPresenceFilter',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ComplianceFrameworkInput: {
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    color: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    default: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    pipelineConfigurationFullPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ComplianceFrameworkPresenceFilter: 'enum',
  ComplianceManagementFrameworkID: 'String',
  ComplianceViolationInput: {
    projectIds: {
      type: 'ProjectID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    mergedBefore: {
      type: 'Date',
      array: false,
      arrayRequired: false,
      required: false,
    },
    mergedAfter: {
      type: 'Date',
      array: false,
      arrayRequired: false,
      required: false,
    },
    targetBranch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ComplianceViolationReason: 'enum',
  ComplianceViolationSeverity: 'enum',
  ComplianceViolationSort: 'enum',
  ConanMetadatumFileTypeEnum: 'enum',
  ConfigureContainerScanningInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ConfigureDependencyScanningInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ConfigureSastIacInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ConfigureSastInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    configuration: {
      type: 'SastCiConfigurationInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ConfigureSecretDetectionInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ContactSort: 'enum',
  ContainerExpirationPolicyCadenceEnum: 'enum',
  ContainerExpirationPolicyKeepEnum: 'enum',
  ContainerExpirationPolicyOlderThanEnum: 'enum',
  ContainerRepositoryCleanupStatus: 'enum',
  ContainerRepositoryDetails: {
    tags: {
      sort: {
        type: 'ContainerRepositoryTagSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ContainerRepositoryID: 'String',
  ContainerRepositorySort: 'enum',
  ContainerRepositoryStatus: 'enum',
  ContainerRepositoryTagSort: 'enum',
  CorpusCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    packageId: {
      type: 'PackagesPackageID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CreateAlertIssueInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CreateAnnotationInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    environmentId: {
      type: 'EnvironmentID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clusterId: {
      type: 'ClustersClusterID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startingAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: true,
    },
    endingAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dashboardPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CreateBoardInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hideBacklogList: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hideClosedList: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeId: {
      type: 'UserID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestoneId: {
      type: 'MilestoneID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'IterationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationCadenceId: {
      type: 'IterationsCadenceID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weight: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    labelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  CreateBranchInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    ref: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CreateClusterAgentInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CreateComplianceFrameworkInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    namespacePath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    params: {
      type: 'ComplianceFrameworkInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CreateCustomEmojiInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    url: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CreateDiffNoteInput: {
    noteableId: {
      type: 'NoteableID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    body: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    internal: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    position: {
      type: 'DiffPositionInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CreateEpicInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDateFixed: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDateFixed: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDateIsFixed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDateIsFixed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    addLabelIds: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    removeLabelIds: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    addLabels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    color: {
      type: 'Color',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CreateImageDiffNoteInput: {
    noteableId: {
      type: 'NoteableID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    body: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    internal: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    position: {
      type: 'DiffImagePositionInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CreateIssueInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDate: {
      type: 'ISO8601Date',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    locked: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    type: {
      type: 'IssueType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    milestoneId: {
      type: 'MilestoneID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    labelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    createdAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    mergeRequestToResolveDiscussionsOf: {
      type: 'MergeRequestID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    discussionToResolve: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeIds: {
      type: 'UserID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    moveBeforeId: {
      type: 'IssueID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    moveAfterId: {
      type: 'IssueID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    healthStatus: {
      type: 'HealthStatus',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weight: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'IterationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationWildcardId: {
      type: 'IssueCreationIterationWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationCadenceId: {
      type: 'IterationsCadenceID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CreateIterationInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationsCadenceId: {
      type: 'IterationsCadenceID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDate: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDate: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CreateNoteInput: {
    noteableId: {
      type: 'NoteableID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    body: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    internal: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    discussionId: {
      type: 'DiscussionID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    mergeRequestDiffHeadSha: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CreateRequirementInput: {
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CreateSnippetInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    visibilityLevel: {
      type: 'VisibilityLevelsEnum',
      array: false,
      arrayRequired: false,
      required: true,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    uploadedFiles: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    blobActions: {
      type: 'SnippetBlobActionInputType',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  CreateTestCaseInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labelIds: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  CurrentUserTodos: {
    currentUserTodos: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'TodoStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  CustomEmojiID: 'String',
  CustomerRelationsContactCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupId: {
      type: 'GroupID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    organizationId: {
      type: 'CustomerRelationsOrganizationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    firstName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    lastName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    phone: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    email: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CustomerRelationsContactID: 'String',
  CustomerRelationsContactState: 'enum',
  CustomerRelationsContactUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'CustomerRelationsContactID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    organizationId: {
      type: 'CustomerRelationsOrganizationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    firstName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    lastName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    phone: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    email: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CustomerRelationsOrganizationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupId: {
      type: 'GroupID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    defaultRate: {
      type: 'Float',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  CustomerRelationsOrganizationID: 'String',
  CustomerRelationsOrganizationState: 'enum',
  CustomerRelationsOrganizationUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'CustomerRelationsOrganizationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    defaultRate: {
      type: 'Float',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastOnDemandScanCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    dastSiteProfileId: {
      type: 'DastSiteProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    dastScannerProfileId: {
      type: 'DastScannerProfileID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastPreScanVerificationCheckType: 'enum',
  DastPreScanVerificationStatus: 'enum',
  DastProfileCadenceInput: {
    unit: {
      type: 'DastProfileCadenceUnit',
      array: false,
      arrayRequired: false,
      required: false,
    },
    duration: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastProfileCadenceUnit: 'enum',
  DastProfileCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    dastProfileSchedule: {
      type: 'DastProfileScheduleInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    branchName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dastSiteProfileId: {
      type: 'DastSiteProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    dastScannerProfileId: {
      type: 'DastScannerProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    runAfterCreate: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tagList: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  DastProfileDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DastProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DastProfileID: 'String',
  DastProfileRunInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DastProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DastProfileScheduleID: 'String',
  DastProfileScheduleInput: {
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startsAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    timezone: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    cadence: {
      type: 'DastProfileCadenceInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastProfileUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DastProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    dastProfileSchedule: {
      type: 'DastProfileScheduleInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    branchName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dastSiteProfileId: {
      type: 'DastSiteProfileID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dastScannerProfileId: {
      type: 'DastScannerProfileID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    runAfterUpdate: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tagList: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  DastScanMethodType: 'enum',
  DastScanTypeEnum: 'enum',
  DastScannerProfileCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    profileName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    spiderTimeout: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    targetTimeout: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    scanType: {
      type: 'DastScanTypeEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    useAjaxSpider: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    showDebugMessages: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastScannerProfileDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DastScannerProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DastScannerProfileID: 'String',
  DastScannerProfileUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DastScannerProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    profileName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    spiderTimeout: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetTimeout: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    scanType: {
      type: 'DastScanTypeEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    useAjaxSpider: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    showDebugMessages: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastSiteProfileAuthInput: {
    enabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    url: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    usernameField: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    passwordField: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    username: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    password: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    submitField: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastSiteProfileCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    profileName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    targetType: {
      type: 'DastTargetTypeEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    scanMethod: {
      type: 'DastScanMethodType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    scanFilePath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    requestHeaders: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    auth: {
      type: 'DastSiteProfileAuthInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    excludedUrls: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  DastSiteProfileDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DastSiteProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DastSiteProfileID: 'String',
  DastSiteProfileUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    profileName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    targetType: {
      type: 'DastTargetTypeEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    scanMethod: {
      type: 'DastScanMethodType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    scanFilePath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    requestHeaders: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    auth: {
      type: 'DastSiteProfileAuthInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DastSiteProfileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    excludedUrls: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  DastSiteProfileValidationStatusEnum: 'enum',
  DastSiteTokenCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastSiteTokenID: 'String',
  DastSiteValidationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    dastSiteTokenId: {
      type: 'DastSiteTokenID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    validationPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    strategy: {
      type: 'DastSiteValidationStrategyEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DastSiteValidationID: 'String',
  DastSiteValidationRevokeInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    normalizedTargetUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DastSiteValidationStatusEnum: 'enum',
  DastSiteValidationStrategyEnum: 'enum',
  DastTargetTypeEnum: 'enum',
  DataVisualizationColorEnum: 'enum',
  DataVisualizationWeightEnum: 'enum',
  Date: 'String',
  DeleteAnnotationInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'MetricsDashboardAnnotationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DependencyProxyManifestID: 'String',
  DependencyProxyManifestStatus: 'enum',
  DependencySort: 'enum',
  DeploymentApprovalSummaryStatus: 'enum',
  DeploymentID: 'String',
  DeploymentStatus: 'enum',
  DeploymentTier: 'enum',
  DeploymentsApprovalStatus: 'enum',
  DeploymentsOrderByInput: {
    createdAt: {
      type: 'SortDirectionEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    finishedAt: {
      type: 'SortDirectionEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DescriptionVersion: {
    diff: {
      versionId: {
        type: 'DescriptionVersionID',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  DescriptionVersionID: 'String',
  Design: {
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    currentUserTodos: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'TodoStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    versions: {
      earlierOrEqualToSha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      earlierOrEqualToId: {
        type: 'DesignManagementVersionID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  DesignCollection: {
    design: {
      id: {
        type: 'DesignManagementDesignID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      filename: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    designAtVersion: {
      id: {
        type: 'DesignManagementDesignAtVersionID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    designs: {
      atVersion: {
        type: 'DesignManagementVersionID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      filenames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      ids: {
        type: 'DesignManagementDesignID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    version: {
      id: {
        type: 'DesignManagementVersionID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    versions: {
      earlierOrEqualToSha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      earlierOrEqualToId: {
        type: 'DesignManagementVersionID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  DesignCollectionCopyState: 'enum',
  DesignManagement: {
    designAtVersion: {
      id: {
        type: 'DesignManagementDesignAtVersionID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    version: {
      id: {
        type: 'DesignManagementVersionID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
  },
  DesignManagementDeleteInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    filenames: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  DesignManagementDesignAtVersionID: 'String',
  DesignManagementDesignID: 'String',
  DesignManagementMoveInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DesignManagementDesignID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    previous: {
      type: 'DesignManagementDesignID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    next: {
      type: 'DesignManagementDesignID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DesignManagementUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DesignManagementDesignID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DesignManagementUploadInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    files: {
      type: 'Upload',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  DesignManagementVersionID: 'String',
  DesignVersion: {
    designAtVersion: {
      designId: {
        type: 'DesignManagementDesignID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      filename: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      id: {
        type: 'DesignManagementDesignAtVersionID',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    designs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    designsAtVersion: {
      filenames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      ids: {
        type: 'DesignManagementDesignID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  DesignVersionEvent: 'enum',
  DestroyBoardInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'BoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyBoardListInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    listId: {
      type: 'ListID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyComplianceFrameworkInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ComplianceManagementFrameworkID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyContainerRepositoryInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ContainerRepositoryID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyContainerRepositoryTagsInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ContainerRepositoryID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    tagNames: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  DestroyCustomEmojiInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'CustomEmojiID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyEpicBoardInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'BoardsEpicBoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyNoteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'NoteID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyPackageFileInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'PackagesPackageFileID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyPackageFilesInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    ids: {
      type: 'PackagesPackageFileID',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  DestroyPackageInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'PackagesPackageID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DestroyPackagesInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    ids: {
      type: 'PackagesPackageID',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  DestroySnippetInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'SnippetID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DetailedMergeStatus: 'enum',
  DevopsAdoptionEnabledNamespace: {
    snapshots: {
      endTimeBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTimeAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  DiffImagePositionInput: {
    baseSha: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    headSha: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    startSha: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    paths: {
      type: 'DiffPathsInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
    height: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    width: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    x: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    y: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  DiffNoteID: 'String',
  DiffPathsInput: {
    newPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    oldPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DiffPositionInput: {
    baseSha: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    headSha: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    startSha: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    paths: {
      type: 'DiffPathsInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
    newLine: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    oldLine: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  DiffPositionType: 'enum',
  DisableDevopsAdoptionNamespaceInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AnalyticsDevopsAdoptionEnabledNamespaceID',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  Discussion: {
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  DiscussionID: 'String',
  DiscussionToggleResolveInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DiscussionID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    resolve: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  Dora: {
    metrics: {
      startDate: {
        type: 'Date',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Date',
        array: false,
        arrayRequired: false,
        required: false,
      },
      interval: {
        type: 'DoraMetricBucketingInterval',
        array: false,
        arrayRequired: false,
        required: false,
      },
      environmentTiers: {
        type: 'DeploymentTier',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
  },
  DoraMetricBucketingInterval: 'enum',
  DoraMetricType: 'enum',
  Duration: 'String',
  EchoCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    errors: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    messages: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  EnableDevopsAdoptionNamespaceInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    namespaceId: {
      type: 'NamespaceID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    displayNamespaceId: {
      type: 'NamespaceID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  EntryType: 'enum',
  Environment: {
    deployments: {
      statuses: {
        type: 'DeploymentStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      orderBy: {
        type: 'DeploymentsOrderByInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    lastDeployment: {
      status: {
        type: 'DeploymentStatus',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    metricsDashboard: {
      path: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    protectedEnvironments: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  EnvironmentCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    externalUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tier: {
      type: 'DeploymentTier',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clusterAgentId: {
      type: 'ClustersAgentID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  EnvironmentDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'EnvironmentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EnvironmentID: 'String',
  EnvironmentStopInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'EnvironmentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    force: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  EnvironmentUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'EnvironmentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    externalUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tier: {
      type: 'DeploymentTier',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clusterAgentId: {
      type: 'ClustersAgentID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  EnvironmentsCanaryIngressUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'EnvironmentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    weight: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  Epic: {
    ancestors: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'EpicState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'EpicSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iidStartsWith: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeDescendantGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedEpicFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      topLevelHierarchyOnly: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    awardEmoji: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    blockedByEpics: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    children: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'EpicState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'EpicSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iidStartsWith: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeDescendantGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedEpicFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      topLevelHierarchyOnly: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    currentUserTodos: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'TodoStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    events: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issues: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    labels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    participants: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reference: {
      full: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  EpicAddIssueInput: {
    iid: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    issueIid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EpicBoard: {
    labels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    lists: {
      id: {
        type: 'BoardsEpicListID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      epicFilters: {
        type: 'EpicFilters',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  EpicBoardCreateInput: {
    displayColors: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hideBacklogList: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hideClosedList: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    labelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  EpicBoardListCreateInput: {
    backlog: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labelId: {
      type: 'LabelID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    boardId: {
      type: 'BoardsEpicBoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EpicBoardListDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    listId: {
      type: 'BoardsEpicListID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EpicBoardUpdateInput: {
    displayColors: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hideBacklogList: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hideClosedList: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    labelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    id: {
      type: 'BoardsEpicBoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EpicFilters: {
    labelName: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: false,
    },
    authorUsername: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    myReactionEmoji: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    not: {
      type: 'NegatedEpicBoardIssueInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    or: {
      type: 'UnionedEpicFilterInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    search: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  EpicID: 'String',
  EpicIssue: {
    alertManagementAlerts: {
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      statuses: {
        type: 'AlertManagementStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'AlertManagementAlertSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      domain: {
        type: 'AlertManagementDomainFilter',
        array: false,
        arrayRequired: false,
        required: true,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    assignees: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    blockedByIssues: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    currentUserTodos: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'TodoStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    customerRelationsContacts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issuableResourceLinks: {
      incidentId: {
        type: 'IssueID',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    labels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    participants: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reference: {
      full: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    relatedMergeRequests: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    relatedVulnerabilities: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  EpicList: {
    epics: {
      filters: {
        type: 'EpicFilters',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  EpicMoveListInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    boardId: {
      type: 'BoardsEpicBoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    fromListId: {
      type: 'BoardsEpicListID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    toListId: {
      type: 'BoardsEpicListID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    moveBeforeId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    moveAfterId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    positionInList: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  EpicSetSubscriptionInput: {
    iid: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    subscribedState: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EpicSort: 'enum',
  EpicState: 'enum',
  EpicStateEvent: 'enum',
  EpicTreeNodeFieldsInputType: {
    id: {
      type: 'EpicTreeSortingID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    adjacentReferenceId: {
      type: 'EpicTreeSortingID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    relativePosition: {
      type: 'MoveType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    newParentId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  EpicTreeReorderInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    baseEpicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    moved: {
      type: 'EpicTreeNodeFieldsInputType',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EpicTreeSortingID: 'String',
  EpicWildcardId: 'enum',
  EscalationPolicyCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    rules: {
      type: 'EscalationRuleInput',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  EscalationPolicyDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IncidentManagementEscalationPolicyID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EscalationPolicyUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IncidentManagementEscalationPolicyID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    rules: {
      type: 'EscalationRuleInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  EscalationRuleInput: {
    oncallScheduleIid: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    username: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    elapsedTimeSeconds: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    status: {
      type: 'EscalationRuleStatus',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  EscalationRuleStatus: 'enum',
  EventAction: 'enum',
  Eventable: {
    events: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ExportRequirementsInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    sort: {
      type: 'Sort',
      array: false,
      arrayRequired: false,
      required: false,
    },
    state: {
      type: 'RequirementState',
      array: false,
      arrayRequired: false,
      required: false,
    },
    search: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    authorUsername: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    selectedFields: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  ExternalAuditEventDestination: {
    headers: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ExternalAuditEventDestinationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    destinationUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    verificationToken: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ExternalAuditEventDestinationDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AuditEventsExternalAuditEventDestinationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ExternalAuditEventDestinationUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AuditEventsExternalAuditEventDestinationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    destinationUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  FindingReportsComparerStatus: 'enum',
  Forecast: {
    values: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ForecastStatus: 'enum',
  GenerateTestFileInput: {
    resourceId: {
      type: 'AiModelID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    filePath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  GeoBaseRegistryID: 'String',
  GeoNode: {
    ciSecureFileRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    containerRepositoryRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dependencyProxyBlobRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dependencyProxyManifestRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    designManagementRepositoryRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groupWikiRepositoryRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    jobArtifactRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    lfsObjectRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    mergeRequestDiffRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    packageFileRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pagesDeploymentRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pipelineArtifactRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projectWikiRepositoryRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    selectiveSyncNamespaces: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    snippetRepositoryRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    terraformStateVersionRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    uploadRegistries: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      replicationState: {
        type: 'ReplicationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      verificationState: {
        type: 'VerificationStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      keyword: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  GeoRegistriesUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    registryClass: {
      type: 'GeoRegistryClass',
      array: false,
      arrayRequired: false,
      required: true,
    },
    registryId: {
      type: 'GeoBaseRegistryID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    action: {
      type: 'GeoRegistryAction',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  GeoRegistryAction: 'enum',
  GeoRegistryClass: 'enum',
  GitlabErrorTrackingDetailedErrorID: 'String',
  GitlabSubscriptionActivateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    activationCode: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  GitlabSubscriptionsUserRole: 'enum',
  GlobalID: 'String',
  GoogleCloudLoggingConfigurationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    googleProjectIdName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientEmail: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    logIdName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    privateKey: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  GoogleCloudLoggingConfigurationDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AuditEventsGoogleCloudLoggingConfigurationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  GoogleCloudLoggingConfigurationUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AuditEventsGoogleCloudLoggingConfigurationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    googleProjectIdName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientEmail: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    logIdName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    privateKey: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  Group: {
    achievements: {
      ids: {
        type: 'AchievementsAchievementID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    billableMembersCount: {
      requestedHostedPlan: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    board: {
      id: {
        type: 'BoardID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    boards: {
      id: {
        type: 'BoardID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    ciVariables: {
      sort: {
        type: 'CiVariableSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    clusterAgents: {
      hasVulnerabilities: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasRemoteDevelopmentAgentConfig: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    codeCoverageActivities: {
      startDate: {
        type: 'Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    complianceFrameworks: {
      id: {
        type: 'ComplianceManagementFrameworkID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    contactStateCounts: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'CustomerRelationsContactState',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    contacts: {
      sort: {
        type: 'ContactSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'CustomerRelationsContactState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ids: {
        type: 'CustomerRelationsContactID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    containerRepositories: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'ContainerRepositorySort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    contributions: {
      from: {
        type: 'ISO8601Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'ISO8601Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    customEmoji: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dataTransfer: {
      from: {
        type: 'Date',
        array: false,
        arrayRequired: false,
        required: false,
      },
      to: {
        type: 'Date',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dependencyProxyBlobs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dependencyProxyManifests: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    descendantGroups: {
      includeParentDescendants: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      owned: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    doraPerformanceScoreCounts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    epic: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'EpicState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'EpicSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iidStartsWith: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeDescendantGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedEpicFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      topLevelHierarchyOnly: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    epicBoard: {
      id: {
        type: 'BoardsEpicBoardID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicBoards: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    epics: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'EpicState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'EpicSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iidStartsWith: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeDescendantGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedEpicFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      topLevelHierarchyOnly: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    externalAuditEventDestinations: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    gitlabSubscriptionsPreviewBillableUserChange: {
      addGroupId: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      addUserEmails: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      addUserIds: {
        type: 'Int',
        array: true,
        arrayRequired: false,
        required: true,
      },
      role: {
        type: 'GitlabSubscriptionsUserRole',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    googleCloudLoggingConfigurations: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groupMembers: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MemberSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      relations: {
        type: 'GroupMemberRelation',
        array: true,
        arrayRequired: false,
        required: true,
      },
      accessLevels: {
        type: 'AccessLevelEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issues: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      assigneeId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmContactId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmOrganizationId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneWildcardId: {
        type: 'MilestoneWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      or: {
        type: 'UnionedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      types: {
        type: 'IssueType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iterationId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: false,
      },
      iterationWildcardId: {
        type: 'IterationWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      epicId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeSubepics: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      weight: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      healthStatusFilter: {
        type: 'HealthStatusFilter',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'IssueSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'IssuableState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeSubgroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeArchived: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    iterationCadences: {
      id: {
        type: 'IterationsCadenceID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      title: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      durationInWeeks: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      automatic: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      active: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    iterations: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'IterationState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IterationSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      id: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestors: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iterationCadenceIds: {
        type: 'IterationsCadenceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'IterationSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    label: {
      title: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    labels: {
      searchTerm: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeDescendantGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      onlyGroupLabels: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    mergeRequestViolations: {
      filters: {
        type: 'ComplianceViolationInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'ComplianceViolationSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    mergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeSubgroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeArchived: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    milestones: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MilestoneStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      title: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      searchTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      containingDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MilestoneSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestors: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeDescendants: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    organizationStateCounts: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'CustomerRelationsOrganizationState',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    organizations: {
      sort: {
        type: 'OrganizationSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'CustomerRelationsOrganizationState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ids: {
        type: 'CustomerRelationsOrganizationID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    packages: {
      sort: {
        type: 'PackageGroupSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      packageName: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      packageType: {
        type: 'PackageTypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      status: {
        type: 'PackageStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeVersionless: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projects: {
      includeSubgroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'NamespaceProjectSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      withIssuesEnabled: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      withMergeRequestsEnabled: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      complianceFrameworkFilters: {
        type: 'ComplianceFrameworkFilters',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasCodeCoverage: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasVulnerabilities: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    recentIssueBoards: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    releases: {
      sort: {
        type: 'GroupReleaseSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    runners: {
      paused: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      status: {
        type: 'CiRunnerStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'CiRunnerType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      tagList: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'CiRunnerSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      upgradeStatus: {
        type: 'CiRunnerUpgradeStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      membership: {
        type: 'CiRunnerMembershipFilter',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    scanExecutionPolicies: {
      actionScanTypes: {
        type: 'SecurityReportTypeEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      relationship: {
        type: 'SecurityPolicyRelationType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    scanResultPolicies: {
      relationship: {
        type: 'SecurityPolicyRelationType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogCategories: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilities: {
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      reportType: {
        type: 'VulnerabilityReportType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      severity: {
        type: 'VulnerabilitySeverity',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'VulnerabilityState',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scanner: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scannerId: {
        type: 'VulnerabilitiesScannerID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'VulnerabilitySort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasResolution: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasIssues: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      image: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterId: {
        type: 'ClustersClusterID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterAgentId: {
        type: 'ClustersAgentID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilitiesCountByDay: {
      startDate: {
        type: 'ISO8601Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      endDate: {
        type: 'ISO8601Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilityGrades: {
      includeSubgroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      letterGrade: {
        type: 'VulnerabilityGrade',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilityScanners: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilitySeveritiesCount: {
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      reportType: {
        type: 'VulnerabilityReportType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      severity: {
        type: 'VulnerabilitySeverity',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'VulnerabilityState',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scanner: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scannerId: {
        type: 'VulnerabilitiesScannerID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      hasIssues: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasResolution: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      image: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterAgentId: {
        type: 'ClustersAgentID',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    workItemTypes: {
      taskable: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  GroupDataTransfer: {
    egressNodes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  GroupID: 'String',
  GroupMember: {
    mergeRequestInteraction: {
      id: {
        type: 'MergeRequestID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
  },
  GroupMemberBulkUpdateInput: {
    userIds: {
      type: 'UserID',
      array: true,
      arrayRequired: true,
      required: true,
    },
    accessLevel: {
      type: 'MemberAccessLevel',
      array: false,
      arrayRequired: false,
      required: true,
    },
    expiresAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupId: {
      type: 'GroupID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  GroupMemberRelation: 'enum',
  GroupPermission: 'enum',
  GroupReleaseSort: 'enum',
  GroupUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    sharedRunnersSetting: {
      type: 'SharedRunnersSetting',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  GroupValueStreamAnalyticsFlowMetrics: {
    cycleTime: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectIds: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    deploymentCount: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      projectIds: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    issueCount: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectIds: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    issuesCompletedCount: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectIds: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    leadTime: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectIds: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
  },
  HealthStatus: 'enum',
  HealthStatusFilter: 'enum',
  HttpIntegrationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
    payloadExample: {
      type: 'JsonString',
      array: false,
      arrayRequired: false,
      required: false,
    },
    payloadAttributeMappings: {
      type: 'AlertManagementPayloadAlertFieldInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  HttpIntegrationDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AlertManagementHttpIntegrationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  HttpIntegrationResetTokenInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AlertManagementHttpIntegrationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  HttpIntegrationUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AlertManagementHttpIntegrationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    payloadExample: {
      type: 'JsonString',
      array: false,
      arrayRequired: false,
      required: false,
    },
    payloadAttributeMappings: {
      type: 'AlertManagementPayloadAlertFieldInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  ISO8601Date: 'String',
  IncidentManagementEscalationPolicyID: 'String',
  IncidentManagementEscalationRuleID: 'String',
  IncidentManagementIssuableResourceLinkID: 'String',
  IncidentManagementOncallParticipantID: 'String',
  IncidentManagementOncallRotation: {
    participants: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    shifts: {
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  IncidentManagementOncallRotationID: 'String',
  IncidentManagementOncallSchedule: {
    rotation: {
      id: {
        type: 'IncidentManagementOncallRotationID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    rotations: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  IncidentManagementTimelineEventID: 'String',
  IncidentManagementTimelineEventTagID: 'String',
  InstanceExternalAuditEventDestinationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    destinationUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  InstanceExternalAuditEventDestinationDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AuditEventsInstanceExternalAuditEventDestinationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  InstanceExternalAuditEventDestinationUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'AuditEventsInstanceExternalAuditEventDestinationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    destinationUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  InstanceSecurityDashboard: {
    clusterAgents: {
      hasVulnerabilities: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasRemoteDevelopmentAgentConfig: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projects: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilityGrades: {
      letterGrade: {
        type: 'VulnerabilityGrade',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilityScanners: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilitySeveritiesCount: {
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      reportType: {
        type: 'VulnerabilityReportType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      severity: {
        type: 'VulnerabilitySeverity',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'VulnerabilityState',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scanner: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scannerId: {
        type: 'VulnerabilitiesScannerID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      hasIssues: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasResolution: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      image: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterAgentId: {
        type: 'ClustersAgentID',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
  },
  IntegrationsPrometheusID: 'String',
  IssuableID: 'String',
  IssuableResourceLinkCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IssueID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    link: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    linkText: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    linkType: {
      type: 'IssuableResourceLinkType',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssuableResourceLinkDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IncidentManagementIssuableResourceLinkID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IssuableResourceLinkType: 'enum',
  IssuableSearchableField: 'enum',
  IssuableSeverity: 'enum',
  IssuableState: 'enum',
  IssuableSubscriptionEvent: 'enum',
  Issue: {
    alertManagementAlerts: {
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      statuses: {
        type: 'AlertManagementStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'AlertManagementAlertSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      domain: {
        type: 'AlertManagementDomainFilter',
        array: false,
        arrayRequired: false,
        required: true,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    assignees: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    blockedByIssues: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    currentUserTodos: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'TodoStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    customerRelationsContacts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issuableResourceLinks: {
      incidentId: {
        type: 'IssueID',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    labels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    participants: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reference: {
      full: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    relatedMergeRequests: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    relatedVulnerabilities: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  IssueCreationIterationWildcardId: 'enum',
  IssueEscalationStatus: 'enum',
  IssueID: 'String',
  IssueLinkAlertsInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    alertReferences: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  IssueMoveInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    targetProjectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IssueMoveListInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    boardId: {
      type: 'BoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    fromListId: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    toListId: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    moveBeforeId: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    moveAfterId: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    positionInList: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssueParentID: 'String',
  IssueSetAssigneesInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeUsernames: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
    operationMode: {
      type: 'MutationOperationMode',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssueSetConfidentialInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IssueSetCrmContactsInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    contactIds: {
      type: 'CustomerRelationsContactID',
      array: true,
      arrayRequired: true,
      required: true,
    },
    operationMode: {
      type: 'MutationOperationMode',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssueSetDueDateInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDate: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssueSetEpicInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssueSetEscalationPolicyInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    escalationPolicyId: {
      type: 'IncidentManagementEscalationPolicyID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssueSetEscalationStatusInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    status: {
      type: 'IssueEscalationStatus',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IssueSetIterationInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'IterationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssueSetLockedInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    locked: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IssueSetSeverityInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    severity: {
      type: 'IssuableSeverity',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IssueSetSubscriptionInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    subscribedState: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IssueSetWeightInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weight: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IssueSort: 'enum',
  IssueState: 'enum',
  IssueStateEvent: 'enum',
  IssueType: 'enum',
  IssueUnlinkAlertInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    alertId: {
      type: 'AlertManagementAlertID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IssuesBulkUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    parentId: {
      type: 'IssueParentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    ids: {
      type: 'IssueID',
      array: true,
      arrayRequired: true,
      required: true,
    },
    assigneeIds: {
      type: 'UserID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    milestoneId: {
      type: 'MilestoneID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    stateEvent: {
      type: 'IssueStateEvent',
      array: false,
      arrayRequired: false,
      required: false,
    },
    addLabelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    removeLabelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    subscriptionEvent: {
      type: 'IssuableSubscriptionEvent',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'IterationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    healthStatus: {
      type: 'HealthStatus',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  Iteration: {
    report: {
      fullPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  IterationCadenceCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    durationInWeeks: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationsInAdvance: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDate: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    automatic: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
    rollOver: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IterationCadenceDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IterationsCadenceID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IterationCadenceUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IterationsCadenceID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    durationInWeeks: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationsInAdvance: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDate: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    automatic: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    rollOver: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  IterationDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IterationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  IterationID: 'String',
  IterationSearchableField: 'enum',
  IterationSort: 'enum',
  IterationState: 'enum',
  IterationWildcardId: 'enum',
  IterationsCadenceID: 'String',
  JSON: 'String',
  JiraImportStartInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    jiraProjectKey: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    jiraProjectName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    usersMapping: {
      type: 'JiraUsersMappingInputType',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  JiraImportUsersInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    startAt: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  JiraService: {
    projects: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  JiraUsersMappingInputType: {
    gitlabId: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    jiraAccountId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  JobArtifactFileType: 'enum',
  JobArtifactsDestroyInput: {
    id: {
      type: 'CiBuildID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  JobCancelInput: {
    id: {
      type: 'CiBuildID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  JobID: 'String',
  JobPlayInput: {
    id: {
      type: 'CiBuildID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    variables: {
      type: 'CiVariableInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  JobRetryInput: {
    id: {
      type: 'CiBuildID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    variables: {
      type: 'CiVariableInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  JobUnscheduleInput: {
    id: {
      type: 'CiBuildID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  JsonString: 'String',
  LabelCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    color: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  LabelID: 'String',
  ListID: 'String',
  ListLimitMetric: 'enum',
  MarkAsSpamSnippetInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'SnippetID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  MarkupFormat: 'enum',
  MeasurementIdentifier: 'enum',
  MemberAccessLevel: 'enum',
  MemberAccessLevelName: 'enum',
  MemberInterface: {
    mergeRequestInteraction: {
      id: {
        type: 'MergeRequestID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
  },
  MemberSort: 'enum',
  MergeRequest: {
    approvedBy: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    assignees: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    awardEmoji: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commits: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commitsWithoutMergeCommits: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    committers: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    currentUserTodos: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'TodoStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    diffLlmSummaries: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    diffStats: {
      path: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    findingReportsComparer: {
      reportType: {
        type: 'ComparableSecurityReportType',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    labels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    participants: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pipelines: {
      status: {
        type: 'PipelineStatusEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      scope: {
        type: 'PipelineScopeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      source: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reference: {
      full: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reviewers: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  MergeRequestAcceptInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    strategy: {
      type: 'MergeStrategyEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    commitMessage: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    sha: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    squashCommitMessage: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    shouldRemoveSourceBranch: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    squash: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  MergeRequestApprovalState: {
    suggestedApprovers: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  MergeRequestAssignee: {
    assignedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    authoredMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    callouts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    emails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groupMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groups: {
      permissionScope: {
        type: 'GroupPermission',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    namespaceCommitEmails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projectMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reviewRequestedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReplies: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReply: {
      id: {
        type: 'UsersSavedReplyID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    snippets: {
      ids: {
        type: 'SnippetID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      visibility: {
        type: 'VisibilityScopesEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'TypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    starredProjects: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    todos: {
      action: {
        type: 'TodoActionEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      groupId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'TodoStateEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'TodoTargetEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    userAchievements: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workspaces: {
      ids: {
        type: 'RemoteDevelopmentWorkspaceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  MergeRequestAuthor: {
    assignedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    authoredMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    callouts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    emails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groupMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groups: {
      permissionScope: {
        type: 'GroupPermission',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    namespaceCommitEmails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projectMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reviewRequestedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReplies: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReply: {
      id: {
        type: 'UsersSavedReplyID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    snippets: {
      ids: {
        type: 'SnippetID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      visibility: {
        type: 'VisibilityScopesEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'TypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    starredProjects: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    todos: {
      action: {
        type: 'TodoActionEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      groupId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'TodoStateEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'TodoTargetEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    userAchievements: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workspaces: {
      ids: {
        type: 'RemoteDevelopmentWorkspaceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  MergeRequestCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    sourceBranch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetBranch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  MergeRequestID: 'String',
  MergeRequestNewState: 'enum',
  MergeRequestParticipant: {
    assignedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    authoredMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    callouts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    emails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groupMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groups: {
      permissionScope: {
        type: 'GroupPermission',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    namespaceCommitEmails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projectMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reviewRequestedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReplies: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReply: {
      id: {
        type: 'UsersSavedReplyID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    snippets: {
      ids: {
        type: 'SnippetID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      visibility: {
        type: 'VisibilityScopesEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'TypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    starredProjects: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    todos: {
      action: {
        type: 'TodoActionEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      groupId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'TodoStateEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'TodoTargetEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    userAchievements: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workspaces: {
      ids: {
        type: 'RemoteDevelopmentWorkspaceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  MergeRequestReviewState: 'enum',
  MergeRequestReviewer: {
    assignedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    authoredMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    callouts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    emails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groupMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groups: {
      permissionScope: {
        type: 'GroupPermission',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    namespaceCommitEmails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projectMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reviewRequestedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReplies: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReply: {
      id: {
        type: 'UsersSavedReplyID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    snippets: {
      ids: {
        type: 'SnippetID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      visibility: {
        type: 'VisibilityScopesEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'TypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    starredProjects: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    todos: {
      action: {
        type: 'TodoActionEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      groupId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'TodoStateEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'TodoTargetEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    userAchievements: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workspaces: {
      ids: {
        type: 'RemoteDevelopmentWorkspaceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  MergeRequestReviewerRereviewInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    userId: {
      type: 'UserID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  MergeRequestSetAssigneesInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeUsernames: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
    operationMode: {
      type: 'MutationOperationMode',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  MergeRequestSetDraftInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    draft: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  MergeRequestSetLabelsInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: true,
      required: true,
    },
    operationMode: {
      type: 'MutationOperationMode',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  MergeRequestSetLockedInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    locked: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  MergeRequestSetMilestoneInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestoneId: {
      type: 'MilestoneID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  MergeRequestSetReviewersInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    reviewerUsernames: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
    operationMode: {
      type: 'MutationOperationMode',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  MergeRequestSetSubscriptionInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    subscribedState: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  MergeRequestSort: 'enum',
  MergeRequestState: 'enum',
  MergeRequestUpdateApprovalRuleInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    approvalsRequired: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    approvalRuleId: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    groupIds: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    userIds: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    removeHiddenGroups: {
      type: 'Boolean',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  MergeRequestUpdateInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    targetBranch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    state: {
      type: 'MergeRequestNewState',
      array: false,
      arrayRequired: false,
      required: false,
    },
    timeEstimate: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  MergeRequestsResolverNegatedParams: {
    labels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    milestoneTitle: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  MergeStatus: 'enum',
  MergeStrategyEnum: 'enum',
  MetricsDashboard: {
    annotations: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  MetricsDashboardAnnotationID: 'String',
  Milestone: {
    releases: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    report: {
      fullPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  MilestoneID: 'String',
  MilestoneSort: 'enum',
  MilestoneStateEnum: 'enum',
  MilestoneWildcardId: 'enum',
  MoveType: 'enum',
  Mutation: {
    achievementsAward: {
      input: {
        type: 'AchievementsAwardInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    achievementsCreate: {
      input: {
        type: 'AchievementsCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    achievementsDelete: {
      input: {
        type: 'AchievementsDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    achievementsRevoke: {
      input: {
        type: 'AchievementsRevokeInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    achievementsUpdate: {
      input: {
        type: 'AchievementsUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    addProjectToSecurityDashboard: {
      input: {
        type: 'AddProjectToSecurityDashboardInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    adminSidekiqQueuesDeleteJobs: {
      input: {
        type: 'AdminSidekiqQueuesDeleteJobsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    aiAction: {
      input: {
        type: 'AiActionInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    alertSetAssignees: {
      input: {
        type: 'AlertSetAssigneesInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    alertTodoCreate: {
      input: {
        type: 'AlertTodoCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    approveDeployment: {
      input: {
        type: 'ApproveDeploymentInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    artifactDestroy: {
      input: {
        type: 'ArtifactDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    auditEventsStreamingDestinationEventsAdd: {
      input: {
        type: 'AuditEventsStreamingDestinationEventsAddInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    auditEventsStreamingDestinationEventsRemove: {
      input: {
        type: 'AuditEventsStreamingDestinationEventsRemoveInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    auditEventsStreamingHeadersCreate: {
      input: {
        type: 'AuditEventsStreamingHeadersCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    auditEventsStreamingHeadersDestroy: {
      input: {
        type: 'AuditEventsStreamingHeadersDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    auditEventsStreamingHeadersUpdate: {
      input: {
        type: 'AuditEventsStreamingHeadersUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    auditEventsStreamingInstanceHeadersCreate: {
      input: {
        type: 'AuditEventsStreamingInstanceHeadersCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    auditEventsStreamingInstanceHeadersUpdate: {
      input: {
        type: 'AuditEventsStreamingInstanceHeadersUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    awardEmojiAdd: {
      input: {
        type: 'AwardEmojiAddInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    awardEmojiRemove: {
      input: {
        type: 'AwardEmojiRemoveInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    awardEmojiToggle: {
      input: {
        type: 'AwardEmojiToggleInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    boardEpicCreate: {
      input: {
        type: 'BoardEpicCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    boardListCreate: {
      input: {
        type: 'BoardListCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    boardListUpdateLimitMetrics: {
      input: {
        type: 'BoardListUpdateLimitMetricsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    buildForecast: {
      input: {
        type: 'BuildForecastInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    bulkDestroyJobArtifacts: {
      input: {
        type: 'BulkDestroyJobArtifactsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    bulkEnableDevopsAdoptionNamespaces: {
      input: {
        type: 'BulkEnableDevopsAdoptionNamespacesInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    bulkRunnerDelete: {
      input: {
        type: 'BulkRunnerDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    catalogResourcesCreate: {
      input: {
        type: 'CatalogResourcesCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    ciAiGenerateConfig: {
      input: {
        type: 'CiAiGenerateConfigInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    ciJobTokenScopeAddProject: {
      input: {
        type: 'CiJobTokenScopeAddProjectInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    ciJobTokenScopeRemoveProject: {
      input: {
        type: 'CiJobTokenScopeRemoveProjectInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    clusterAgentDelete: {
      input: {
        type: 'ClusterAgentDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    clusterAgentTokenCreate: {
      input: {
        type: 'ClusterAgentTokenCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    clusterAgentTokenRevoke: {
      input: {
        type: 'ClusterAgentTokenRevokeInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    commitCreate: {
      input: {
        type: 'CommitCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    configureContainerScanning: {
      input: {
        type: 'ConfigureContainerScanningInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    configureDependencyScanning: {
      input: {
        type: 'ConfigureDependencyScanningInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    configureSast: {
      input: {
        type: 'ConfigureSastInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    configureSastIac: {
      input: {
        type: 'ConfigureSastIacInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    configureSecretDetection: {
      input: {
        type: 'ConfigureSecretDetectionInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    corpusCreate: {
      input: {
        type: 'CorpusCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createAlertIssue: {
      input: {
        type: 'CreateAlertIssueInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createAnnotation: {
      input: {
        type: 'CreateAnnotationInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createBoard: {
      input: {
        type: 'CreateBoardInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createBranch: {
      input: {
        type: 'CreateBranchInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createClusterAgent: {
      input: {
        type: 'CreateClusterAgentInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createComplianceFramework: {
      input: {
        type: 'CreateComplianceFrameworkInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createCustomEmoji: {
      input: {
        type: 'CreateCustomEmojiInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createDiffNote: {
      input: {
        type: 'CreateDiffNoteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createEpic: {
      input: {
        type: 'CreateEpicInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createImageDiffNote: {
      input: {
        type: 'CreateImageDiffNoteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createIssue: {
      input: {
        type: 'CreateIssueInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createIteration: {
      input: {
        type: 'CreateIterationInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createNote: {
      input: {
        type: 'CreateNoteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createRequirement: {
      input: {
        type: 'CreateRequirementInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createSnippet: {
      input: {
        type: 'CreateSnippetInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    createTestCase: {
      input: {
        type: 'CreateTestCaseInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    customerRelationsContactCreate: {
      input: {
        type: 'CustomerRelationsContactCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    customerRelationsContactUpdate: {
      input: {
        type: 'CustomerRelationsContactUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    customerRelationsOrganizationCreate: {
      input: {
        type: 'CustomerRelationsOrganizationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    customerRelationsOrganizationUpdate: {
      input: {
        type: 'CustomerRelationsOrganizationUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastOnDemandScanCreate: {
      input: {
        type: 'DastOnDemandScanCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastProfileCreate: {
      input: {
        type: 'DastProfileCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastProfileDelete: {
      input: {
        type: 'DastProfileDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastProfileRun: {
      input: {
        type: 'DastProfileRunInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastProfileUpdate: {
      input: {
        type: 'DastProfileUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastScannerProfileCreate: {
      input: {
        type: 'DastScannerProfileCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastScannerProfileDelete: {
      input: {
        type: 'DastScannerProfileDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastScannerProfileUpdate: {
      input: {
        type: 'DastScannerProfileUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastSiteProfileCreate: {
      input: {
        type: 'DastSiteProfileCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastSiteProfileDelete: {
      input: {
        type: 'DastSiteProfileDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastSiteProfileUpdate: {
      input: {
        type: 'DastSiteProfileUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastSiteTokenCreate: {
      input: {
        type: 'DastSiteTokenCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastSiteValidationCreate: {
      input: {
        type: 'DastSiteValidationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastSiteValidationRevoke: {
      input: {
        type: 'DastSiteValidationRevokeInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    deleteAnnotation: {
      input: {
        type: 'DeleteAnnotationInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    designManagementDelete: {
      input: {
        type: 'DesignManagementDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    designManagementMove: {
      input: {
        type: 'DesignManagementMoveInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    designManagementUpdate: {
      input: {
        type: 'DesignManagementUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    designManagementUpload: {
      input: {
        type: 'DesignManagementUploadInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyBoard: {
      input: {
        type: 'DestroyBoardInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyBoardList: {
      input: {
        type: 'DestroyBoardListInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyComplianceFramework: {
      input: {
        type: 'DestroyComplianceFrameworkInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyContainerRepository: {
      input: {
        type: 'DestroyContainerRepositoryInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyContainerRepositoryTags: {
      input: {
        type: 'DestroyContainerRepositoryTagsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyCustomEmoji: {
      input: {
        type: 'DestroyCustomEmojiInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyEpicBoard: {
      input: {
        type: 'DestroyEpicBoardInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyNote: {
      input: {
        type: 'DestroyNoteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyPackage: {
      input: {
        type: 'DestroyPackageInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyPackageFile: {
      input: {
        type: 'DestroyPackageFileInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyPackageFiles: {
      input: {
        type: 'DestroyPackageFilesInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroyPackages: {
      input: {
        type: 'DestroyPackagesInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    destroySnippet: {
      input: {
        type: 'DestroySnippetInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    disableDevopsAdoptionNamespace: {
      input: {
        type: 'DisableDevopsAdoptionNamespaceInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    discussionToggleResolve: {
      input: {
        type: 'DiscussionToggleResolveInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    echoCreate: {
      input: {
        type: 'EchoCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    enableDevopsAdoptionNamespace: {
      input: {
        type: 'EnableDevopsAdoptionNamespaceInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    environmentCreate: {
      input: {
        type: 'EnvironmentCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    environmentDelete: {
      input: {
        type: 'EnvironmentDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    environmentStop: {
      input: {
        type: 'EnvironmentStopInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    environmentUpdate: {
      input: {
        type: 'EnvironmentUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    environmentsCanaryIngressUpdate: {
      input: {
        type: 'EnvironmentsCanaryIngressUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicAddIssue: {
      input: {
        type: 'EpicAddIssueInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicBoardCreate: {
      input: {
        type: 'EpicBoardCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicBoardListCreate: {
      input: {
        type: 'EpicBoardListCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicBoardListDestroy: {
      input: {
        type: 'EpicBoardListDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicBoardUpdate: {
      input: {
        type: 'EpicBoardUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicMoveList: {
      input: {
        type: 'EpicMoveListInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicSetSubscription: {
      input: {
        type: 'EpicSetSubscriptionInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicTreeReorder: {
      input: {
        type: 'EpicTreeReorderInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    escalationPolicyCreate: {
      input: {
        type: 'EscalationPolicyCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    escalationPolicyDestroy: {
      input: {
        type: 'EscalationPolicyDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    escalationPolicyUpdate: {
      input: {
        type: 'EscalationPolicyUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    exportRequirements: {
      input: {
        type: 'ExportRequirementsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    externalAuditEventDestinationCreate: {
      input: {
        type: 'ExternalAuditEventDestinationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    externalAuditEventDestinationDestroy: {
      input: {
        type: 'ExternalAuditEventDestinationDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    externalAuditEventDestinationUpdate: {
      input: {
        type: 'ExternalAuditEventDestinationUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    geoRegistriesUpdate: {
      input: {
        type: 'GeoRegistriesUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    gitlabSubscriptionActivate: {
      input: {
        type: 'GitlabSubscriptionActivateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    googleCloudLoggingConfigurationCreate: {
      input: {
        type: 'GoogleCloudLoggingConfigurationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    googleCloudLoggingConfigurationDestroy: {
      input: {
        type: 'GoogleCloudLoggingConfigurationDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    googleCloudLoggingConfigurationUpdate: {
      input: {
        type: 'GoogleCloudLoggingConfigurationUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    groupMemberBulkUpdate: {
      input: {
        type: 'GroupMemberBulkUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    groupUpdate: {
      input: {
        type: 'GroupUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    httpIntegrationCreate: {
      input: {
        type: 'HttpIntegrationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    httpIntegrationDestroy: {
      input: {
        type: 'HttpIntegrationDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    httpIntegrationResetToken: {
      input: {
        type: 'HttpIntegrationResetTokenInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    httpIntegrationUpdate: {
      input: {
        type: 'HttpIntegrationUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    instanceExternalAuditEventDestinationCreate: {
      input: {
        type: 'InstanceExternalAuditEventDestinationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    instanceExternalAuditEventDestinationDestroy: {
      input: {
        type: 'InstanceExternalAuditEventDestinationDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    instanceExternalAuditEventDestinationUpdate: {
      input: {
        type: 'InstanceExternalAuditEventDestinationUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableResourceLinkCreate: {
      input: {
        type: 'IssuableResourceLinkCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableResourceLinkDestroy: {
      input: {
        type: 'IssuableResourceLinkDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueLinkAlerts: {
      input: {
        type: 'IssueLinkAlertsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueMove: {
      input: {
        type: 'IssueMoveInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueMoveList: {
      input: {
        type: 'IssueMoveListInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetAssignees: {
      input: {
        type: 'IssueSetAssigneesInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetConfidential: {
      input: {
        type: 'IssueSetConfidentialInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetCrmContacts: {
      input: {
        type: 'IssueSetCrmContactsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetDueDate: {
      input: {
        type: 'IssueSetDueDateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetEpic: {
      input: {
        type: 'IssueSetEpicInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetEscalationPolicy: {
      input: {
        type: 'IssueSetEscalationPolicyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetEscalationStatus: {
      input: {
        type: 'IssueSetEscalationStatusInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetIteration: {
      input: {
        type: 'IssueSetIterationInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetLocked: {
      input: {
        type: 'IssueSetLockedInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetSeverity: {
      input: {
        type: 'IssueSetSeverityInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetSubscription: {
      input: {
        type: 'IssueSetSubscriptionInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueSetWeight: {
      input: {
        type: 'IssueSetWeightInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueUnlinkAlert: {
      input: {
        type: 'IssueUnlinkAlertInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuesBulkUpdate: {
      input: {
        type: 'IssuesBulkUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    iterationCadenceCreate: {
      input: {
        type: 'IterationCadenceCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    iterationCadenceDestroy: {
      input: {
        type: 'IterationCadenceDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    iterationCadenceUpdate: {
      input: {
        type: 'IterationCadenceUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    iterationCreate: {
      input: {
        type: 'iterationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    iterationDelete: {
      input: {
        type: 'IterationDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jiraImportStart: {
      input: {
        type: 'JiraImportStartInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jiraImportUsers: {
      input: {
        type: 'JiraImportUsersInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jobArtifactsDestroy: {
      input: {
        type: 'JobArtifactsDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jobCancel: {
      input: {
        type: 'JobCancelInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jobPlay: {
      input: {
        type: 'JobPlayInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jobRetry: {
      input: {
        type: 'JobRetryInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jobUnschedule: {
      input: {
        type: 'JobUnscheduleInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    labelCreate: {
      input: {
        type: 'LabelCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    markAsSpamSnippet: {
      input: {
        type: 'MarkAsSpamSnippetInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestAccept: {
      input: {
        type: 'MergeRequestAcceptInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestCreate: {
      input: {
        type: 'MergeRequestCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestReviewerRereview: {
      input: {
        type: 'MergeRequestReviewerRereviewInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestSetAssignees: {
      input: {
        type: 'MergeRequestSetAssigneesInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestSetDraft: {
      input: {
        type: 'MergeRequestSetDraftInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestSetLabels: {
      input: {
        type: 'MergeRequestSetLabelsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestSetLocked: {
      input: {
        type: 'MergeRequestSetLockedInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestSetMilestone: {
      input: {
        type: 'MergeRequestSetMilestoneInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestSetReviewers: {
      input: {
        type: 'MergeRequestSetReviewersInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestSetSubscription: {
      input: {
        type: 'MergeRequestSetSubscriptionInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestUpdate: {
      input: {
        type: 'MergeRequestUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestUpdateApprovalRule: {
      input: {
        type: 'MergeRequestUpdateApprovalRuleInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    namespaceBanDestroy: {
      input: {
        type: 'NamespaceBanDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    namespaceCiCdSettingsUpdate: {
      input: {
        type: 'NamespaceCiCdSettingsUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    namespaceIncreaseStorageTemporarily: {
      input: {
        type: 'NamespaceIncreaseStorageTemporarilyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    oncallRotationCreate: {
      input: {
        type: 'OncallRotationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    oncallRotationDestroy: {
      input: {
        type: 'OncallRotationDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    oncallRotationUpdate: {
      input: {
        type: 'OncallRotationUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    oncallScheduleCreate: {
      input: {
        type: 'OncallScheduleCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    oncallScheduleDestroy: {
      input: {
        type: 'OncallScheduleDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    oncallScheduleUpdate: {
      input: {
        type: 'OncallScheduleUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pagesMarkOnboardingComplete: {
      input: {
        type: 'PagesMarkOnboardingCompleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pipelineCancel: {
      input: {
        type: 'PipelineCancelInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pipelineDestroy: {
      input: {
        type: 'PipelineDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pipelineRetry: {
      input: {
        type: 'PipelineRetryInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pipelineScheduleCreate: {
      input: {
        type: 'PipelineScheduleCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pipelineScheduleDelete: {
      input: {
        type: 'PipelineScheduleDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pipelineSchedulePlay: {
      input: {
        type: 'PipelineSchedulePlayInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pipelineScheduleTakeOwnership: {
      input: {
        type: 'PipelineScheduleTakeOwnershipInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    pipelineScheduleUpdate: {
      input: {
        type: 'PipelineScheduleUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    projectCiCdSettingsUpdate: {
      input: {
        type: 'ProjectCiCdSettingsUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    projectInitializeProductAnalytics: {
      input: {
        type: 'ProjectInitializeProductAnalyticsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    projectMemberBulkUpdate: {
      input: {
        type: 'ProjectMemberBulkUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    projectSetComplianceFramework: {
      input: {
        type: 'ProjectSetComplianceFrameworkInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    projectSetLocked: {
      input: {
        type: 'ProjectSetLockedInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    projectSyncFork: {
      input: {
        type: 'ProjectSyncForkInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    prometheusIntegrationCreate: {
      input: {
        type: 'PrometheusIntegrationCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    prometheusIntegrationResetToken: {
      input: {
        type: 'PrometheusIntegrationResetTokenInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    prometheusIntegrationUpdate: {
      input: {
        type: 'PrometheusIntegrationUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    promoteToEpic: {
      input: {
        type: 'PromoteToEpicInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    releaseAssetLinkCreate: {
      input: {
        type: 'ReleaseAssetLinkCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    releaseAssetLinkDelete: {
      input: {
        type: 'ReleaseAssetLinkDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    releaseAssetLinkUpdate: {
      input: {
        type: 'ReleaseAssetLinkUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    releaseCreate: {
      input: {
        type: 'ReleaseCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    releaseDelete: {
      input: {
        type: 'ReleaseDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    releaseUpdate: {
      input: {
        type: 'ReleaseUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    removeProjectFromSecurityDashboard: {
      input: {
        type: 'RemoveProjectFromSecurityDashboardInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    repositionImageDiffNote: {
      input: {
        type: 'RepositionImageDiffNoteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    runnerCreate: {
      input: {
        type: 'RunnerCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    runnerDelete: {
      input: {
        type: 'RunnerDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    runnerUpdate: {
      input: {
        type: 'RunnerUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    runnersRegistrationTokenReset: {
      input: {
        type: 'RunnersRegistrationTokenResetInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    savedReplyCreate: {
      input: {
        type: 'SavedReplyCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    savedReplyDestroy: {
      input: {
        type: 'SavedReplyDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    savedReplyUpdate: {
      input: {
        type: 'SavedReplyUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    scanExecutionPolicyCommit: {
      input: {
        type: 'ScanExecutionPolicyCommitInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityFindingCreateIssue: {
      input: {
        type: 'SecurityFindingCreateIssueInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityFindingCreateMergeRequest: {
      input: {
        type: 'SecurityFindingCreateMergeRequestInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityFindingDismiss: {
      input: {
        type: 'SecurityFindingDismissInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityFindingRevertToDetected: {
      input: {
        type: 'SecurityFindingRevertToDetectedInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityPolicyProjectAssign: {
      input: {
        type: 'SecurityPolicyProjectAssignInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityPolicyProjectCreate: {
      input: {
        type: 'SecurityPolicyProjectCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityPolicyProjectUnassign: {
      input: {
        type: 'SecurityPolicyProjectUnassignInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityTrainingUpdate: {
      input: {
        type: 'SecurityTrainingUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    terraformStateDelete: {
      input: {
        type: 'TerraformStateDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    terraformStateLock: {
      input: {
        type: 'TerraformStateLockInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    terraformStateUnlock: {
      input: {
        type: 'TerraformStateUnlockInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    timelineEventCreate: {
      input: {
        type: 'TimelineEventCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    timelineEventDestroy: {
      input: {
        type: 'TimelineEventDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    timelineEventPromoteFromNote: {
      input: {
        type: 'TimelineEventPromoteFromNoteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    timelineEventTagCreate: {
      input: {
        type: 'TimelineEventTagCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    timelineEventUpdate: {
      input: {
        type: 'TimelineEventUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    timelogCreate: {
      input: {
        type: 'TimelogCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    timelogDelete: {
      input: {
        type: 'TimelogDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    todoCreate: {
      input: {
        type: 'TodoCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    todoMarkDone: {
      input: {
        type: 'TodoMarkDoneInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    todoRestore: {
      input: {
        type: 'TodoRestoreInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    todoRestoreMany: {
      input: {
        type: 'TodoRestoreManyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    todosMarkAllDone: {
      input: {
        type: 'TodosMarkAllDoneInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateAlertStatus: {
      input: {
        type: 'UpdateAlertStatusInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateBoard: {
      input: {
        type: 'UpdateBoardInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateBoardEpicUserPreferences: {
      input: {
        type: 'UpdateBoardEpicUserPreferencesInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateBoardList: {
      input: {
        type: 'UpdateBoardListInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateComplianceFramework: {
      input: {
        type: 'UpdateComplianceFrameworkInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateContainerExpirationPolicy: {
      input: {
        type: 'UpdateContainerExpirationPolicyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateDependencyProxyImageTtlGroupPolicy: {
      input: {
        type: 'UpdateDependencyProxyImageTtlGroupPolicyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateDependencyProxySettings: {
      input: {
        type: 'UpdateDependencyProxySettingsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateEpic: {
      input: {
        type: 'UpdateEpicInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateEpicBoardList: {
      input: {
        type: 'UpdateEpicBoardListInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateImageDiffNote: {
      input: {
        type: 'UpdateImageDiffNoteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateIssue: {
      input: {
        type: 'UpdateIssueInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateIteration: {
      input: {
        type: 'UpdateIterationInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateNamespacePackageSettings: {
      input: {
        type: 'UpdateNamespacePackageSettingsInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateNote: {
      input: {
        type: 'UpdateNoteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updatePackagesCleanupPolicy: {
      input: {
        type: 'UpdatePackagesCleanupPolicyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateRequirement: {
      input: {
        type: 'UpdateRequirementInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    updateSnippet: {
      input: {
        type: 'UpdateSnippetInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    uploadDelete: {
      input: {
        type: 'UploadDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    userCalloutCreate: {
      input: {
        type: 'UserCalloutCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    userPreferencesUpdate: {
      input: {
        type: 'UserPreferencesUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    vulnerabilityConfirm: {
      input: {
        type: 'VulnerabilityConfirmInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    vulnerabilityCreate: {
      input: {
        type: 'VulnerabilityCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    vulnerabilityDismiss: {
      input: {
        type: 'VulnerabilityDismissInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    vulnerabilityExternalIssueLinkCreate: {
      input: {
        type: 'VulnerabilityExternalIssueLinkCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    vulnerabilityExternalIssueLinkDestroy: {
      input: {
        type: 'VulnerabilityExternalIssueLinkDestroyInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    vulnerabilityIssueLinkCreate: {
      input: {
        type: 'VulnerabilityIssueLinkCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    vulnerabilityResolve: {
      input: {
        type: 'VulnerabilityResolveInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    vulnerabilityRevertToDetected: {
      input: {
        type: 'VulnerabilityRevertToDetectedInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemConvert: {
      input: {
        type: 'WorkItemConvertInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemCreate: {
      input: {
        type: 'WorkItemCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemCreateFromTask: {
      input: {
        type: 'WorkItemCreateFromTaskInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemDelete: {
      input: {
        type: 'WorkItemDeleteInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemDeleteTask: {
      input: {
        type: 'WorkItemDeleteTaskInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemExport: {
      input: {
        type: 'WorkItemExportInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemUpdate: {
      input: {
        type: 'WorkItemUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemUpdateTask: {
      input: {
        type: 'WorkItemUpdateTaskInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workspaceCreate: {
      input: {
        type: 'WorkspaceCreateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workspaceUpdate: {
      input: {
        type: 'WorkspaceUpdateInput',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
  },
  MutationOperationMode: 'enum',
  Namespace: {
    achievements: {
      ids: {
        type: 'AchievementsAchievementID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    complianceFrameworks: {
      id: {
        type: 'ComplianceManagementFrameworkID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projects: {
      includeSubgroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'NamespaceProjectSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      withIssuesEnabled: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      withMergeRequestsEnabled: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      complianceFrameworkFilters: {
        type: 'ComplianceFrameworkFilters',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasCodeCoverage: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasVulnerabilities: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    scanExecutionPolicies: {
      actionScanTypes: {
        type: 'SecurityReportTypeEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      relationship: {
        type: 'SecurityPolicyRelationType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    scanResultPolicies: {
      relationship: {
        type: 'SecurityPolicyRelationType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogCategories: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  NamespaceBanDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'NamespacesNamespaceBanID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  NamespaceCiCdSettingsUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    allowStaleRunnerPruning: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  NamespaceID: 'String',
  NamespaceIncreaseStorageTemporarilyInput: {
    id: {
      type: 'NamespaceID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  NamespaceProjectSort: 'enum',
  NamespacesNamespaceBanID: 'String',
  NegatedBoardIssueInput: {
    labelName: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: false,
    },
    authorUsername: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    myReactionEmoji: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iids: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    milestoneTitle: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeUsername: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: false,
    },
    releaseTag: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    types: {
      type: 'IssueType',
      array: true,
      arrayRequired: false,
      required: true,
    },
    milestoneWildcardId: {
      type: 'MilestoneWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationTitle: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weight: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'IterationID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    iterationWildcardId: {
      type: 'NegatedIterationWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    healthStatusFilter: {
      type: 'HealthStatus',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  NegatedComplianceFrameworkFilters: {
    id: {
      type: 'ComplianceManagementFrameworkID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  NegatedEpicBoardIssueInput: {
    labelName: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: false,
    },
    authorUsername: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    myReactionEmoji: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  NegatedEpicFilterInput: {
    labelName: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: false,
    },
    authorUsername: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    myReactionEmoji: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  NegatedIssueFilterInput: {
    assigneeId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneeUsernames: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    authorUsername: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iids: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    labelName: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    milestoneTitle: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    milestoneWildcardId: {
      type: 'NegatedMilestoneWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    myReactionEmoji: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    releaseTag: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    types: {
      type: 'IssueType',
      array: true,
      arrayRequired: false,
      required: true,
    },
    epicId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weight: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    iterationWildcardId: {
      type: 'IterationWildcardId',
      array: false,
      arrayRequired: false,
      required: false,
    },
    healthStatusFilter: {
      type: 'HealthStatus',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  NegatedIterationWildcardId: 'enum',
  NegatedMilestoneWildcardId: 'enum',
  NetworkPolicy: {
    environments: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  NetworkPolicyKind: 'enum',
  Note: {
    awardEmoji: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  NoteID: 'String',
  NoteableID: 'String',
  NoteableInterface: {
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  NotesFilterType: 'enum',
  OncallRotationActivePeriodInputType: {
    startTime: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    endTime: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  OncallRotationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    scheduleIid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    startsAt: {
      type: 'OncallRotationDateInputType',
      array: false,
      arrayRequired: false,
      required: true,
    },
    endsAt: {
      type: 'OncallRotationDateInputType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    rotationLength: {
      type: 'OncallRotationLengthInputType',
      array: false,
      arrayRequired: false,
      required: true,
    },
    activePeriod: {
      type: 'OncallRotationActivePeriodInputType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    participants: {
      type: 'OncallUserInputType',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  OncallRotationDateInputType: {
    date: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    time: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  OncallRotationDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    scheduleIid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    id: {
      type: 'IncidentManagementOncallRotationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  OncallRotationLengthInputType: {
    length: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    unit: {
      type: 'OncallRotationUnitEnum',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  OncallRotationUnitEnum: 'enum',
  OncallRotationUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IncidentManagementOncallRotationID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startsAt: {
      type: 'OncallRotationDateInputType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    endsAt: {
      type: 'OncallRotationDateInputType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    rotationLength: {
      type: 'OncallRotationLengthInputType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    activePeriod: {
      type: 'OncallRotationActivePeriodInputType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    participants: {
      type: 'OncallUserInputType',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  OncallScheduleCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    timezone: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  OncallScheduleDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  OncallScheduleUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    timezone: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  OncallUserInputType: {
    username: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    colorPalette: {
      type: 'DataVisualizationColorEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    colorWeight: {
      type: 'DataVisualizationWeightEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  OrganizationSort: 'enum',
  Package: {
    pipelines: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    tags: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  PackageBase: {
    tags: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  PackageDependencyType: 'enum',
  PackageDetailsType: {
    dependencyLinks: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    packageFiles: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pipelines: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    tags: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    versions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  PackageGroupSort: 'enum',
  PackageManager: 'enum',
  PackageSort: 'enum',
  PackageStatus: 'enum',
  PackageTypeEnum: 'enum',
  PackagesCleanupKeepDuplicatedPackageFilesEnum: 'enum',
  PackagesConanFileMetadatumID: 'String',
  PackagesConanMetadatumID: 'String',
  PackagesDependencyID: 'String',
  PackagesDependencyLinkID: 'String',
  PackagesMavenMetadatumID: 'String',
  PackagesNugetDependencyLinkMetadatumID: 'String',
  PackagesNugetMetadatumID: 'String',
  PackagesPackageFileID: 'String',
  PackagesPackageID: 'String',
  PackagesPypiMetadatumID: 'String',
  PagesMarkOnboardingCompleteInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  PathLockID: 'String',
  PayloadAlertFieldPathSegment: 'String',
  Pipeline: {
    codeQualityReports: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    downstream: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    job: {
      id: {
        type: 'JobID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    jobs: {
      securityReportTypes: {
        type: 'SecurityReportTypeEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      statuses: {
        type: 'CiJobStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      retried: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      whenExecuted: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      jobKind: {
        type: 'CiJobKind',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    securityReportFinding: {
      uuid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    securityReportFindings: {
      reportType: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      severity: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scanner: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'VulnerabilityState',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    sha: {
      format: {
        type: 'ShaFormat',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    stages: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    testSuite: {
      buildIds: {
        type: 'ID',
        array: true,
        arrayRequired: true,
        required: true,
      },
    },
  },
  PipelineCancelInput: {
    id: {
      type: 'CiPipelineID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  PipelineConfigSourceEnum: 'enum',
  PipelineDestroyInput: {
    id: {
      type: 'CiPipelineID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  PipelineMergeRequestEventType: 'enum',
  PipelineRetryInput: {
    id: {
      type: 'CiPipelineID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  PipelineSchedule: {
    variables: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  PipelineScheduleCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    cron: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    cronTimezone: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    ref: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    variables: {
      type: 'PipelineScheduleVariableInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  PipelineScheduleDeleteInput: {
    id: {
      type: 'CiPipelineScheduleID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  PipelineSchedulePlayInput: {
    id: {
      type: 'CiPipelineScheduleID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  PipelineScheduleStatus: 'enum',
  PipelineScheduleTakeOwnershipInput: {
    id: {
      type: 'CiPipelineScheduleID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  PipelineScheduleUpdateInput: {
    id: {
      type: 'CiPipelineScheduleID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    cron: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    cronTimezone: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    ref: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    variables: {
      type: 'PipelineScheduleVariableInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  PipelineScheduleVariableInput: {
    key: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    value: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    variableType: {
      type: 'CiVariableType',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  PipelineScopeEnum: 'enum',
  PipelineSecurityReportFinding: {
    issueLinks: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  PipelineStatusEnum: 'enum',
  ProductAnalyticsDashboard: {
    panels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ProductAnalyticsState: 'enum',
  Project: {
    agentConfigurations: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    alertManagementAlert: {
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      statuses: {
        type: 'AlertManagementStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'AlertManagementAlertSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      domain: {
        type: 'AlertManagementDomainFilter',
        array: false,
        arrayRequired: false,
        required: true,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    alertManagementAlertStatusCounts: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    alertManagementAlerts: {
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      statuses: {
        type: 'AlertManagementStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'AlertManagementAlertSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      domain: {
        type: 'AlertManagementDomainFilter',
        array: false,
        arrayRequired: false,
        required: true,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    alertManagementHttpIntegrations: {
      id: {
        type: 'AlertManagementHttpIntegrationID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    alertManagementIntegrations: {
      id: {
        type: 'GlobalID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    alertManagementPayloadFields: {
      payloadExample: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    board: {
      id: {
        type: 'BoardID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    boards: {
      id: {
        type: 'BoardID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    branchRules: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    ciAccessAuthorizedAgents: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    ciConfigVariables: {
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    ciTemplate: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    ciVariables: {
      sort: {
        type: 'CiVariableSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    clusterAgent: {
      hasVulnerabilities: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasRemoteDevelopmentAgentConfig: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    clusterAgents: {
      hasVulnerabilities: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasRemoteDevelopmentAgentConfig: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commitReferences: {
      commitSha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    complianceFrameworks: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    containerRepositories: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'ContainerRepositorySort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    corpuses: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dastProfile: {
      hasDastProfileSchedule: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      id: {
        type: 'DastProfileID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastProfiles: {
      hasDastProfileSchedule: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dastScannerProfiles: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dastSiteProfile: {
      id: {
        type: 'DastSiteProfileID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    dastSiteProfiles: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dastSiteValidations: {
      normalizedTargetUrls: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      status: {
        type: 'DastSiteValidationStatusEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dataTransfer: {
      from: {
        type: 'Date',
        array: false,
        arrayRequired: false,
        required: false,
      },
      to: {
        type: 'Date',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    dependencies: {
      sort: {
        type: 'DependencySort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      packageManagers: {
        type: 'PackageManager',
        array: true,
        arrayRequired: false,
        required: true,
      },
      componentNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    deployment: {
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    environment: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      states: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    environments: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      states: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    forkDetails: {
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    forkTargets: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    gitlabSubscriptionsPreviewBillableUserChange: {
      addGroupId: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      addUserEmails: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      addUserIds: {
        type: 'Int',
        array: true,
        arrayRequired: false,
        required: true,
      },
      role: {
        type: 'GitlabSubscriptionsUserRole',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    incidentManagementEscalationPolicies: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    incidentManagementEscalationPolicy: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      id: {
        type: 'IncidentManagementEscalationPolicyID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    incidentManagementOncallSchedules: {
      iids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    incidentManagementTimelineEvent: {
      incidentId: {
        type: 'IssueID',
        array: false,
        arrayRequired: false,
        required: true,
      },
      id: {
        type: 'IncidentManagementTimelineEventID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    incidentManagementTimelineEvents: {
      incidentId: {
        type: 'IssueID',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    inheritedCiVariables: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issue: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      assigneeId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmContactId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmOrganizationId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneWildcardId: {
        type: 'MilestoneWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      or: {
        type: 'UnionedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      types: {
        type: 'IssueType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iterationId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: false,
      },
      iterationWildcardId: {
        type: 'IterationWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      epicId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeSubepics: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      weight: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      healthStatusFilter: {
        type: 'HealthStatusFilter',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'IssueSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'IssuableState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      releaseTag: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      releaseTagWildcardId: {
        type: 'ReleaseTagWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issueStatusCounts: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      assigneeId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmContactId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmOrganizationId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneWildcardId: {
        type: 'MilestoneWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      or: {
        type: 'UnionedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      types: {
        type: 'IssueType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iterationId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: false,
      },
      iterationWildcardId: {
        type: 'IterationWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      epicId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeSubepics: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      weight: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      healthStatusFilter: {
        type: 'HealthStatusFilter',
        array: false,
        arrayRequired: false,
        required: false,
      },
      releaseTag: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      releaseTagWildcardId: {
        type: 'ReleaseTagWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issues: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      assigneeId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmContactId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmOrganizationId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneWildcardId: {
        type: 'MilestoneWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      or: {
        type: 'UnionedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      types: {
        type: 'IssueType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iterationId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: false,
      },
      iterationWildcardId: {
        type: 'IterationWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      epicId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeSubepics: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      weight: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      healthStatusFilter: {
        type: 'HealthStatusFilter',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'IssueSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'IssuableState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      releaseTag: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      releaseTagWildcardId: {
        type: 'ReleaseTagWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    iterationCadences: {
      id: {
        type: 'IterationsCadenceID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      title: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      durationInWeeks: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      automatic: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      active: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    iterations: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'IterationState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IterationSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      id: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestors: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iterationCadenceIds: {
        type: 'IterationsCadenceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'IterationSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    jiraImports: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    job: {
      id: {
        type: 'JobID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jobs: {
      statuses: {
        type: 'CiJobStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      withArtifacts: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    label: {
      title: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    labels: {
      searchTerm: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestorGroups: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    mergeRequest: {
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    milestones: {
      timeframe: {
        type: 'Timeframe',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MilestoneStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      title: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      searchTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      containingDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MilestoneSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeAncestors: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    nestedEnvironments: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      states: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    networkPolicies: {
      environmentId: {
        type: 'EnvironmentID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    packages: {
      sort: {
        type: 'PackageSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      packageName: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      packageType: {
        type: 'PackageTypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      status: {
        type: 'PackageStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeVersionless: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pathLocks: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pipeline: {
      iid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pipelineCounts: {
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      source: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pipelineSchedules: {
      status: {
        type: 'PipelineScheduleStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pipelines: {
      status: {
        type: 'PipelineStatusEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      scope: {
        type: 'PipelineScopeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      source: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    productAnalyticsDashboards: {
      slug: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    productAnalyticsVisualizations: {
      slug: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projectMembers: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MemberSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      relations: {
        type: 'ProjectMemberRelation',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    recentIssueBoards: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    release: {
      tagName: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    releases: {
      sort: {
        type: 'ReleaseSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    requirement: {
      sort: {
        type: 'Sort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'RequirementState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      workItemIid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      workItemIids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      lastTestReportState: {
        type: 'RequirementStatusFilter',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    requirements: {
      sort: {
        type: 'Sort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'RequirementState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      workItemIid: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      workItemIids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      lastTestReportState: {
        type: 'RequirementStatusFilter',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    runners: {
      paused: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      status: {
        type: 'CiRunnerStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'CiRunnerType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      tagList: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'CiRunnerSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      upgradeStatus: {
        type: 'CiRunnerUpgradeStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    scanExecutionPolicies: {
      actionScanTypes: {
        type: 'SecurityReportTypeEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      relationship: {
        type: 'SecurityPolicyRelationType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    scanResultPolicies: {
      relationship: {
        type: 'SecurityPolicyRelationType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    securityTrainingProviders: {
      onlyEnabled: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    securityTrainingUrls: {
      identifierExternalIds: {
        type: 'String',
        array: true,
        arrayRequired: true,
        required: true,
      },
      filename: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    sentryDetailedError: {
      id: {
        type: 'GitlabErrorTrackingDetailedErrorID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    services: {
      active: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'ServiceType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    snippets: {
      ids: {
        type: 'SnippetID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      visibility: {
        type: 'VisibilityScopesEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    terraformState: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    terraformStates: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogCategories: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    userAccessAuthorizedAgents: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    visibleForks: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      minimumAccessLevel: {
        type: 'AccessLevelEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilities: {
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      reportType: {
        type: 'VulnerabilityReportType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      severity: {
        type: 'VulnerabilitySeverity',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'VulnerabilityState',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scanner: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scannerId: {
        type: 'VulnerabilitiesScannerID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'VulnerabilitySort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasResolution: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasIssues: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      image: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterId: {
        type: 'ClustersClusterID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterAgentId: {
        type: 'ClustersAgentID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilitiesCountByDay: {
      startDate: {
        type: 'ISO8601Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      endDate: {
        type: 'ISO8601Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilityImages: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilityScanners: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilitySeveritiesCount: {
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      reportType: {
        type: 'VulnerabilityReportType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      severity: {
        type: 'VulnerabilitySeverity',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'VulnerabilityState',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scanner: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scannerId: {
        type: 'VulnerabilitiesScannerID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      hasIssues: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasResolution: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      image: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterAgentId: {
        type: 'ClustersAgentID',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    workItemTypes: {
      taskable: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workItems: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'IssuableState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      types: {
        type: 'IssueType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'WorkItemSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      statusWidget: {
        type: 'StatusFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ProjectCiCdSettingsUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    keepLatestArtifact: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    inboundJobTokenScopeEnabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    mergePipelinesEnabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    mergeTrainsEnabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ProjectConversations: {
    ciConfigMessages: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ProjectDataTransfer: {
    egressNodes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ProjectID: 'String',
  ProjectInitializeProductAnalyticsInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ProjectMember: {
    mergeRequestInteraction: {
      id: {
        type: 'MergeRequestID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
  },
  ProjectMemberBulkUpdateInput: {
    userIds: {
      type: 'UserID',
      array: true,
      arrayRequired: true,
      required: true,
    },
    accessLevel: {
      type: 'MemberAccessLevel',
      array: false,
      arrayRequired: false,
      required: true,
    },
    expiresAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectId: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ProjectMemberRelation: 'enum',
  ProjectSetComplianceFrameworkInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectId: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    complianceFrameworkId: {
      type: 'ComplianceManagementFrameworkID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ProjectSetLockedInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    filePath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    lock: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ProjectSyncForkInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    targetBranch: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ProjectValueStreamAnalyticsFlowMetrics: {
    cycleTime: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    deploymentCount: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueCount: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    issuesCompletedCount: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
    leadTime: {
      from: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      to: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: true,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labelNames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
    },
  },
  PrometheusIntegrationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
    apiUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  PrometheusIntegrationResetTokenInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IntegrationsPrometheusID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  PrometheusIntegrationUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IntegrationsPrometheusID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    active: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    apiUrl: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  PromoteToEpicInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ProtectedEnvironment: {
    approvalRules: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    deployAccessLevels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  Query: {
    aiMessages: {
      requestIds: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      roles: {
        type: 'AiCachedMessageRole',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    auditEventDefinitions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    boardList: {
      id: {
        type: 'ListID',
        array: false,
        arrayRequired: false,
        required: true,
      },
      issueFilters: {
        type: 'BoardIssueInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    ciCatalogResource: {
      id: {
        type: 'CiCatalogResourceID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    ciCatalogResources: {
      sort: {
        type: 'CiCatalogResourceSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    ciConfig: {
      projectPath: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: true,
      },
      sha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      content: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
      dryRun: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    ciMinutesUsage: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      namespaceId: {
        type: 'NamespaceID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      date: {
        type: 'Date',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    ciPipelineStage: {
      id: {
        type: 'CiStageID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    ciVariables: {
      sort: {
        type: 'CiVariableSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    containerRepository: {
      id: {
        type: 'ContainerRepositoryID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    devopsAdoptionEnabledNamespaces: {
      displayNamespaceId: {
        type: 'NamespaceID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    echo: {
      text: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    epicBoardList: {
      id: {
        type: 'BoardsEpicListID',
        array: false,
        arrayRequired: false,
        required: true,
      },
      epicFilters: {
        type: 'EpicFilters',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    geoNode: {
      name: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    group: {
      fullPath: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    groups: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    instanceExternalAuditEventDestinations: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issue: {
      id: {
        type: 'IssueID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issues: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      in: {
        type: 'IssuableSearchableField',
        array: true,
        arrayRequired: false,
        required: true,
      },
      assigneeId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      closedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      confidential: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmContactId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      crmOrganizationId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iid: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      labelName: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: false,
      },
      milestoneWildcardId: {
        type: 'MilestoneWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      myReactionEmoji: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'NegatedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      or: {
        type: 'UnionedIssueFilterInput',
        array: false,
        arrayRequired: false,
        required: false,
      },
      types: {
        type: 'IssueType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      iterationId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: false,
      },
      iterationWildcardId: {
        type: 'IterationWildcardId',
        array: false,
        arrayRequired: false,
        required: false,
      },
      epicId: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeSubepics: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      weight: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      healthStatusFilter: {
        type: 'HealthStatusFilter',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'IssueSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      includeArchived: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'IssuableState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    iteration: {
      id: {
        type: 'IterationID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    jobs: {
      statuses: {
        type: 'CiJobStatus',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    licenseHistoryEntries: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    mergeRequest: {
      id: {
        type: 'MergeRequestID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    milestone: {
      id: {
        type: 'MilestoneID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    namespace: {
      fullPath: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    note: {
      id: {
        type: 'NoteID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    package: {
      id: {
        type: 'PackagesPackageID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    project: {
      fullPath: {
        type: 'ID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    projects: {
      membership: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      searchNamespaces: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      topics: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      withIssuesEnabled: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      withMergeRequestsEnabled: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    runner: {
      id: {
        type: 'CiRunnerID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    runnerPlatforms: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    runnerSetup: {
      platform: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
      architecture: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    runners: {
      paused: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      status: {
        type: 'CiRunnerStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'CiRunnerType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      tagList: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'CiRunnerSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      upgradeStatus: {
        type: 'CiRunnerUpgradeStatus',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    snippets: {
      ids: {
        type: 'SnippetID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      visibility: {
        type: 'VisibilityScopesEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorId: {
        type: 'UserID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'TypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      explore: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    subscriptionFutureEntries: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    syntheticNote: {
      sha: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
      noteableId: {
        type: 'NoteableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    todo: {
      id: {
        type: 'TodoID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    topics: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    usageTrendsMeasurements: {
      identifier: {
        type: 'MeasurementIdentifier',
        array: false,
        arrayRequired: false,
        required: true,
      },
      recordedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      recordedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    user: {
      id: {
        type: 'UserID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    users: {
      ids: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      usernames: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'Sort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      admins: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilities: {
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      reportType: {
        type: 'VulnerabilityReportType',
        array: true,
        arrayRequired: false,
        required: true,
      },
      severity: {
        type: 'VulnerabilitySeverity',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'VulnerabilityState',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scanner: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      scannerId: {
        type: 'VulnerabilitiesScannerID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sort: {
        type: 'VulnerabilitySort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasResolution: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      hasIssues: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      image: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterId: {
        type: 'ClustersClusterID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      clusterAgentId: {
        type: 'ClustersAgentID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerabilitiesCountByDay: {
      startDate: {
        type: 'ISO8601Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      endDate: {
        type: 'ISO8601Date',
        array: false,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    vulnerability: {
      id: {
        type: 'VulnerabilityID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItem: {
      id: {
        type: 'WorkItemID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workspace: {
      id: {
        type: 'RemoteDevelopmentWorkspaceID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workspaces: {
      ids: {
        type: 'RemoteDevelopmentWorkspaceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  RegistryState: 'enum',
  RelativePositionType: 'enum',
  Release: {
    evidences: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    milestones: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ReleaseAssetLinkCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    url: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    directAssetPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    linkType: {
      type: 'ReleaseAssetLinkType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    tagName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ReleaseAssetLinkDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ReleasesLinkID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ReleaseAssetLinkInput: {
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    url: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    directAssetPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    linkType: {
      type: 'ReleaseAssetLinkType',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ReleaseAssetLinkType: 'enum',
  ReleaseAssetLinkUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ReleasesLinkID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    url: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    directAssetPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    linkType: {
      type: 'ReleaseAssetLinkType',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ReleaseAssets: {
    links: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    sources: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  ReleaseAssetsInput: {
    links: {
      type: 'ReleaseAssetLinkInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  ReleaseCreateInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tagName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    tagMessage: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    ref: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    releasedAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestones: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    assets: {
      type: 'ReleaseAssetsInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  ReleaseDeleteInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tagName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ReleaseID: 'String',
  ReleaseSort: 'enum',
  ReleaseTagWildcardId: 'enum',
  ReleaseUpdateInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tagName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    releasedAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestones: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  ReleasesLinkID: 'String',
  RemoteDevelopmentWorkspaceID: 'String',
  RemoveProjectFromSecurityDashboardInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ReplicationStateEnum: 'enum',
  RepositionImageDiffNoteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'DiffNoteID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    position: {
      type: 'UpdateDiffImagePositionInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  Repository: {
    blobs: {
      paths: {
        type: 'String',
        array: true,
        arrayRequired: true,
        required: true,
      },
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    branchNames: {
      searchPattern: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: true,
      },
      offset: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: true,
      },
      limit: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    codeOwnersPath: {
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    paginatedTree: {
      path: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      recursive: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    tree: {
      path: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      recursive: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      ref: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  Requirement: {
    testReports: {
      sort: {
        type: 'Sort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  RequirementLegacyFilterInput: {
    legacyIids: {
      type: 'String',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  RequirementState: 'enum',
  RequirementStatusFilter: 'enum',
  RunnerCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    maintenanceNote: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    maximumTimeout: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    accessLevel: {
      type: 'CiRunnerAccessLevel',
      array: false,
      arrayRequired: false,
      required: false,
    },
    paused: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    locked: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    runUntagged: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tagList: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    runnerType: {
      type: 'CiRunnerType',
      array: false,
      arrayRequired: false,
      required: true,
    },
    groupId: {
      type: 'GroupID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectId: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  RunnerDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'CiRunnerID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  RunnerPlatform: {
    architectures: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  RunnerUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    maintenanceNote: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    maximumTimeout: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    accessLevel: {
      type: 'CiRunnerAccessLevel',
      array: false,
      arrayRequired: false,
      required: false,
    },
    paused: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    locked: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    runUntagged: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    tagList: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    id: {
      type: 'CiRunnerID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    associatedProjects: {
      type: 'ProjectID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    publicProjectsMinutesCostFactor: {
      type: 'Float',
      array: false,
      arrayRequired: false,
      required: false,
    },
    privateProjectsMinutesCostFactor: {
      type: 'Float',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  RunnersRegistrationTokenResetInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    type: {
      type: 'CiRunnerType',
      array: false,
      arrayRequired: false,
      required: true,
    },
    id: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  SastCiConfiguration: {
    analyzers: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    global: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    pipeline: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  SastCiConfigurationAnalyzersEntity: {
    variables: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  SastCiConfigurationAnalyzersEntityInput: {
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    enabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
    variables: {
      type: 'SastCiConfigurationEntityInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  SastCiConfigurationEntity: {
    options: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  SastCiConfigurationEntityInput: {
    field: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    defaultValue: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    value: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  SastCiConfigurationInput: {
    global: {
      type: 'SastCiConfigurationEntityInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
    pipeline: {
      type: 'SastCiConfigurationEntityInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
    analyzers: {
      type: 'SastCiConfigurationAnalyzersEntityInput',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  SastUiComponentSize: 'enum',
  SavedReplyCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    content: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  SavedReplyDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'UsersSavedReplyID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  SavedReplyUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'UsersSavedReplyID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    content: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ScanExecutionPolicyCommitInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    policyYaml: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    operationMode: {
      type: 'MutationOperationMode',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  ScanStatus: 'enum',
  SecurityFindingCreateIssueInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    uuid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    project: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  SecurityFindingCreateMergeRequestInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    uuid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  SecurityFindingDismissInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    uuid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    comment: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dismissalReason: {
      type: 'VulnerabilityDismissalReason',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  SecurityFindingRevertToDetectedInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    uuid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  SecurityPolicyProjectAssignInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    securityPolicyProjectId: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  SecurityPolicyProjectCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  SecurityPolicyProjectUnassignInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    fullPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  SecurityPolicyRelationType: 'enum',
  SecurityReportSummarySection: {
    scannedResources: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    scans: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  SecurityReportTypeEnum: 'enum',
  SecurityScannerType: 'enum',
  SecurityTrainingProviderID: 'String',
  SecurityTrainingUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    providerId: {
      type: 'SecurityTrainingProviderID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    isEnabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
    isPrimary: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  SentryErrorCollection: {
    detailedError: {
      id: {
        type: 'GitlabErrorTrackingDetailedErrorID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    errorStackTrace: {
      id: {
        type: 'GitlabErrorTrackingDetailedErrorID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    errors: {
      searchTerm: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  SentryErrorStatus: 'enum',
  ServiceType: 'enum',
  ShaFormat: 'enum',
  SharedRunnersSetting: 'enum',
  Snippet: {
    blobs: {
      paths: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  SnippetBlobActionEnum: 'enum',
  SnippetBlobActionInputType: {
    action: {
      type: 'SnippetBlobActionEnum',
      array: false,
      arrayRequired: false,
      required: true,
    },
    previousPath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    filePath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    content: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  SnippetID: 'String',
  Sort: 'enum',
  SortDirectionEnum: 'enum',
  StatusFilterInput: {
    status: {
      type: 'RequirementStatusFilter',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  StatusInput: {
    status: {
      type: 'TestReportState',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  Subscription: {
    aiCompletionResponse: {
      resourceId: {
        type: 'AiModelID',
        array: false,
        arrayRequired: false,
        required: true,
      },
      userId: {
        type: 'UserID',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issuableAssigneesUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableDatesUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableDescriptionUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableEpicUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableHealthStatusUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableIterationUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableLabelsUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableMilestoneUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableTitleUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issuableWeightUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    issueCrmContactsUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestApprovalStateUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestMergeStatusUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    mergeRequestReviewersUpdated: {
      issuableId: {
        type: 'IssuableID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    workItemNoteCreated: {
      noteableId: {
        type: 'NoteableID',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workItemNoteDeleted: {
      noteableId: {
        type: 'NoteableID',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workItemNoteUpdated: {
      noteableId: {
        type: 'NoteableID',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workItemUpdated: {
      workItemId: {
        type: 'WorkItemID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
  },
  SystemNoteMetadataID: 'String',
  TerraformStateDeleteInput: {
    id: {
      type: 'TerraformStateID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  TerraformStateID: 'String',
  TerraformStateLockInput: {
    id: {
      type: 'TerraformStateID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  TerraformStateUnlockInput: {
    id: {
      type: 'TerraformStateID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  TestCaseStatus: 'enum',
  TestReportState: 'enum',
  TestReportSummary: {
    testSuites: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  TestSuite: {
    testCases: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  Time: 'String',
  TimeboxReportErrorReason: 'enum',
  TimeboxReportInterface: {
    report: {
      fullPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  Timeframe: {
    start: {
      type: 'Date',
      array: false,
      arrayRequired: false,
      required: true,
    },
    end: {
      type: 'Date',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TimelineEventCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    incidentId: {
      type: 'IssueID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    note: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    occurredAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: true,
    },
    timelineEventTagNames: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  TimelineEventDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IncidentManagementTimelineEventID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TimelineEventPromoteFromNoteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    noteId: {
      type: 'NoteID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TimelineEventTagCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TimelineEventType: {
    timelineEventTags: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  TimelineEventUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'IncidentManagementTimelineEventID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    note: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    occurredAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    timelineEventTagNames: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  TimelogCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    timeSpent: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    spentAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: true,
    },
    summary: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    issuableId: {
      type: 'IssuableID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TimelogDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'TimelogID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TimelogID: 'String',
  TimelogSort: 'enum',
  TodoActionEnum: 'enum',
  TodoCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    targetId: {
      type: 'TodoableID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TodoID: 'String',
  TodoMarkDoneInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'TodoID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TodoRestoreInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'TodoID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  TodoRestoreManyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    ids: {
      type: 'TodoID',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  TodoStateEnum: 'enum',
  TodoTargetEnum: 'enum',
  TodoableID: 'String',
  TodosMarkAllDoneInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    targetId: {
      type: 'TodoableID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  TrainingUrlRequestStatus: 'enum',
  Tree: {
    blobs: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    submodules: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    trees: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  TypeEnum: 'enum',
  UnionedEpicFilterInput: {
    labelName: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    authorUsername: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  UnionedIssueFilterInput: {
    assigneeUsernames: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    authorUsernames: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    labelNames: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  UntrustedRegexp: 'String',
  UpdateAlertStatusInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    status: {
      type: 'AlertManagementStatus',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  UpdateBoardEpicUserPreferencesInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    boardId: {
      type: 'BoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    collapsed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  UpdateBoardInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hideBacklogList: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hideClosedList: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'BoardID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    assigneeId: {
      type: 'UserID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestoneId: {
      type: 'MilestoneID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationId: {
      type: 'IterationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationCadenceId: {
      type: 'IterationsCadenceID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weight: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    labelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  UpdateBoardListInput: {
    position: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    collapsed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    listId: {
      type: 'ListID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  UpdateComplianceFrameworkInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'ComplianceManagementFrameworkID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    params: {
      type: 'ComplianceFrameworkInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  UpdateContainerExpirationPolicyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    enabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    cadence: {
      type: 'ContainerExpirationPolicyCadenceEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    olderThan: {
      type: 'ContainerExpirationPolicyOlderThanEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    keepN: {
      type: 'ContainerExpirationPolicyKeepEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    nameRegex: {
      type: 'UntrustedRegexp',
      array: false,
      arrayRequired: false,
      required: false,
    },
    nameRegexKeep: {
      type: 'UntrustedRegexp',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateDependencyProxyImageTtlGroupPolicyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    enabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    ttl: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateDependencyProxySettingsInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    enabled: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateDiffImagePositionInput: {
    x: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    y: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    width: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    height: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateEpicBoardListInput: {
    position: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    collapsed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    listId: {
      type: 'BoardsEpicListID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  UpdateEpicInput: {
    iid: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDateFixed: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDateFixed: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDateIsFixed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDateIsFixed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    addLabelIds: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    removeLabelIds: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    addLabels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    color: {
      type: 'Color',
      array: false,
      arrayRequired: false,
      required: false,
    },
    stateEvent: {
      type: 'EpicStateEvent',
      array: false,
      arrayRequired: false,
      required: false,
    },
    removeLabels: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  UpdateImageDiffNoteInput: {
    id: {
      type: 'NoteID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    body: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    position: {
      type: 'UpdateDiffImagePositionInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateIssueInput: {
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDate: {
      type: 'ISO8601Date',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    locked: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    type: {
      type: 'IssueType',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestoneId: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    addLabelIds: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    removeLabelIds: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    labelIds: {
      type: 'ID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    stateEvent: {
      type: 'IssueStateEvent',
      array: false,
      arrayRequired: false,
      required: false,
    },
    timeEstimate: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    healthStatus: {
      type: 'HealthStatus',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weight: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
    epicId: {
      type: 'EpicID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateIterationInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    id: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDate: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDate: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateNamespacePackageSettingsInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    namespacePath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    mavenDuplicatesAllowed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    mavenDuplicateExceptionRegex: {
      type: 'UntrustedRegexp',
      array: false,
      arrayRequired: false,
      required: false,
    },
    genericDuplicatesAllowed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    genericDuplicateExceptionRegex: {
      type: 'UntrustedRegexp',
      array: false,
      arrayRequired: false,
      required: false,
    },
    mavenPackageRequestsForwarding: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    npmPackageRequestsForwarding: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    pypiPackageRequestsForwarding: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    lockMavenPackageRequestsForwarding: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    lockNpmPackageRequestsForwarding: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    lockPypiPackageRequestsForwarding: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateNoteInput: {
    id: {
      type: 'NoteID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    body: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdatePackagesCleanupPolicyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    keepNDuplicatedPackageFiles: {
      type: 'PackagesCleanupKeepDuplicatedPackageFilesEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateRequirementInput: {
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    state: {
      type: 'RequirementState',
      array: false,
      arrayRequired: false,
      required: false,
    },
    workItemIid: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    lastTestReportState: {
      type: 'TestReportState',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UpdateSnippetInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'SnippetID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    visibilityLevel: {
      type: 'VisibilityLevelsEnum',
      array: false,
      arrayRequired: false,
      required: false,
    },
    blobActions: {
      type: 'SnippetBlobActionInputType',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  Upload: 'String',
  UploadDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    secret: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    filename: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  UploadID: 'String',
  User: {
    assignedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    authoredMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    callouts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    emails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groupMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groups: {
      permissionScope: {
        type: 'GroupPermission',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    namespaceCommitEmails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projectMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reviewRequestedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReplies: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReply: {
      id: {
        type: 'UsersSavedReplyID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    snippets: {
      ids: {
        type: 'SnippetID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      visibility: {
        type: 'VisibilityScopesEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'TypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    starredProjects: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    todos: {
      action: {
        type: 'TodoActionEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      groupId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'TodoStateEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'TodoTargetEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    userAchievements: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workspaces: {
      ids: {
        type: 'RemoteDevelopmentWorkspaceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  UserCalloutCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    featureName: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  UserCalloutFeatureNameEnum: 'enum',
  UserCore: {
    assignedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    authoredMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      reviewerUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    callouts: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    emails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groupMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    groups: {
      permissionScope: {
        type: 'GroupPermission',
        array: false,
        arrayRequired: false,
        required: false,
      },
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    namespaceCommitEmails: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    projectMemberships: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    reviewRequestedMergeRequests: {
      iids: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      sourceBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      targetBranches: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'MergeRequestState',
        array: false,
        arrayRequired: false,
        required: false,
      },
      draft: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      approved: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      createdBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      updatedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      labels: {
        type: 'String',
        array: true,
        arrayRequired: false,
        required: true,
      },
      mergedAfter: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      mergedBefore: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      milestoneTitle: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'MergeRequestSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      not: {
        type: 'MergeRequestsResolverNegatedParams',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectPath: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      authorUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      assigneeUsername: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReplies: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    savedReply: {
      id: {
        type: 'UsersSavedReplyID',
        array: false,
        arrayRequired: false,
        required: true,
      },
    },
    snippets: {
      ids: {
        type: 'SnippetID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      visibility: {
        type: 'VisibilityScopesEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      type: {
        type: 'TypeEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    starredProjects: {
      search: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    timelogs: {
      startDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endDate: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      startTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      endTime: {
        type: 'Time',
        array: false,
        arrayRequired: false,
        required: false,
      },
      projectId: {
        type: 'ProjectID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      groupId: {
        type: 'GroupID',
        array: false,
        arrayRequired: false,
        required: false,
      },
      username: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      sort: {
        type: 'TimelogSort',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    todos: {
      action: {
        type: 'TodoActionEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      authorId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      projectId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      groupId: {
        type: 'ID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      state: {
        type: 'TodoStateEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      type: {
        type: 'TodoTargetEnum',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    userAchievements: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    workspaces: {
      ids: {
        type: 'RemoteDevelopmentWorkspaceID',
        array: true,
        arrayRequired: false,
        required: true,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  UserID: 'String',
  UserPreferencesUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    issuesSort: {
      type: 'IssueSort',
      array: false,
      arrayRequired: false,
      required: false,
    },
    visibilityPipelineIdType: {
      type: 'VisibilityPipelineIdType',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  UserState: 'enum',
  UsersSavedReplyID: 'String',
  VerificationStateEnum: 'enum',
  VerificationStatus: 'enum',
  VisibilityLevelsEnum: 'enum',
  VisibilityPipelineIdType: 'enum',
  VisibilityScopesEnum: 'enum',
  VulnerabilitiesExternalIssueLinkID: 'String',
  VulnerabilitiesScannerID: 'String',
  Vulnerability: {
    commenters: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    discussions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    externalIssueLinks: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    issueLinks: {
      linkType: {
        type: 'VulnerabilityIssueLinkType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    notes: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
    stateTransitions: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  VulnerabilityConfidence: 'enum',
  VulnerabilityConfirmInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    comment: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'VulnerabilityID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  VulnerabilityCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    project: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    scanner: {
      type: 'VulnerabilityScannerInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
    identifiers: {
      type: 'VulnerabilityIdentifierInput',
      array: true,
      arrayRequired: true,
      required: true,
    },
    state: {
      type: 'VulnerabilityState',
      array: false,
      arrayRequired: false,
      required: false,
    },
    severity: {
      type: 'VulnerabilitySeverity',
      array: false,
      arrayRequired: false,
      required: false,
    },
    solution: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    detectedAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confirmedAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    resolvedAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dismissedAt: {
      type: 'Time',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  VulnerabilityDismissInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    comment: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'VulnerabilityID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    dismissalReason: {
      type: 'VulnerabilityDismissalReason',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  VulnerabilityDismissalReason: 'enum',
  VulnerabilityExternalIssueLinkCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'VulnerabilityID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    linkType: {
      type: 'VulnerabilityExternalIssueLinkType',
      array: false,
      arrayRequired: false,
      required: true,
    },
    externalTracker: {
      type: 'VulnerabilityExternalIssueLinkExternalTracker',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  VulnerabilityExternalIssueLinkDestroyInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'VulnerabilitiesExternalIssueLinkID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  VulnerabilityExternalIssueLinkExternalTracker: 'enum',
  VulnerabilityExternalIssueLinkType: 'enum',
  VulnerabilityGrade: 'enum',
  VulnerabilityID: 'String',
  VulnerabilityIdentifierInput: {
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    url: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    externalType: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    externalId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  VulnerabilityIssueLinkCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    issueId: {
      type: 'IssueID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    vulnerabilityIds: {
      type: 'VulnerabilityID',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  VulnerabilityIssueLinkType: 'enum',
  VulnerabilityReportType: 'enum',
  VulnerabilityResolveInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    comment: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'VulnerabilityID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  VulnerabilityRevertToDetectedInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    comment: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'VulnerabilityID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  VulnerabilityScannerInput: {
    id: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    url: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    vendor: {
      type: 'VulnerabilityScannerVendorInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    version: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  VulnerabilityScannerVendorInput: {
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  VulnerabilitySeverity: 'enum',
  VulnerabilitySort: 'enum',
  VulnerabilityState: 'enum',
  VulnerableProjectsByGrade: {
    projects: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WeightWildcardId: 'enum',
  WorkItem: {
    reference: {
      full: {
        type: 'Boolean',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WorkItemAwardEmojiUpdateAction: 'enum',
  WorkItemConvertInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    workItemTypeId: {
      type: 'WorkItemsTypeID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemConvertTaskInput: {
    lineNumberEnd: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    lineNumberStart: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    lockVersion: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    workItemTypeId: {
      type: 'WorkItemsTypeID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemCreateFromTaskInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    workItemData: {
      type: 'WorkItemConvertTaskInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hierarchyWidget: {
      type: 'WorkItemWidgetHierarchyCreateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestoneWidget: {
      type: 'WorkItemWidgetMilestoneInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    namespacePath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    workItemTypeId: {
      type: 'WorkItemsTypeID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    iterationWidget: {
      type: 'WorkItemWidgetIterationInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemDeleteInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemDeleteTaskInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    lockVersion: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    taskData: {
      type: 'WorkItemDeletedTaskInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemDeletedTaskInput: {
    id: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    lineNumberEnd: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    lineNumberStart: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemExportInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iids: {
      type: 'String',
      array: true,
      arrayRequired: false,
      required: true,
    },
    state: {
      type: 'IssuableState',
      array: false,
      arrayRequired: false,
      required: false,
    },
    types: {
      type: 'IssueType',
      array: true,
      arrayRequired: false,
      required: true,
    },
    search: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    in: {
      type: 'IssuableSearchableField',
      array: true,
      arrayRequired: false,
      required: true,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    selectedFields: {
      type: 'AvailableExportFields',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemID: 'String',
  WorkItemSort: 'enum',
  WorkItemState: 'enum',
  WorkItemStateEvent: 'enum',
  WorkItemTodoUpdateAction: 'enum',
  WorkItemUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    stateEvent: {
      type: 'WorkItemStateEvent',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    descriptionWidget: {
      type: 'WorkItemWidgetDescriptionInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneesWidget: {
      type: 'WorkItemWidgetAssigneesInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hierarchyWidget: {
      type: 'WorkItemWidgetHierarchyUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startAndDueDateWidget: {
      type: 'WorkItemWidgetStartAndDueDateUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labelsWidget: {
      type: 'WorkItemWidgetLabelsUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestoneWidget: {
      type: 'WorkItemWidgetMilestoneInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    notificationsWidget: {
      type: 'WorkItemWidgetNotificationsUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    currentUserTodosWidget: {
      type: 'WorkItemWidgetCurrentUserTodosInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    awardEmojiWidget: {
      type: 'WorkItemWidgetAwardEmojiUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationWidget: {
      type: 'WorkItemWidgetIterationInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    weightWidget: {
      type: 'WorkItemWidgetWeightInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    progressWidget: {
      type: 'WorkItemWidgetProgressInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    statusWidget: {
      type: 'StatusInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    healthStatusWidget: {
      type: 'WorkItemWidgetHealthStatusInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemUpdateTaskInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    taskData: {
      type: 'WorkItemUpdatedTaskInput',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemUpdatedTaskInput: {
    id: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    stateEvent: {
      type: 'WorkItemStateEvent',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    confidential: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: false,
    },
    descriptionWidget: {
      type: 'WorkItemWidgetDescriptionInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    assigneesWidget: {
      type: 'WorkItemWidgetAssigneesInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    hierarchyWidget: {
      type: 'WorkItemWidgetHierarchyUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startAndDueDateWidget: {
      type: 'WorkItemWidgetStartAndDueDateUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    labelsWidget: {
      type: 'WorkItemWidgetLabelsUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    milestoneWidget: {
      type: 'WorkItemWidgetMilestoneInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    notificationsWidget: {
      type: 'WorkItemWidgetNotificationsUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    currentUserTodosWidget: {
      type: 'WorkItemWidgetCurrentUserTodosInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
    awardEmojiWidget: {
      type: 'WorkItemWidgetAwardEmojiUpdateInput',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemWidgetAssignees: {
    assignees: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WorkItemWidgetAssigneesInput: {
    assigneeIds: {
      type: 'UserID',
      array: true,
      arrayRequired: true,
      required: true,
    },
  },
  WorkItemWidgetAwardEmoji: {
    awardEmoji: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WorkItemWidgetAwardEmojiUpdateInput: {
    action: {
      type: 'WorkItemAwardEmojiUpdateAction',
      array: false,
      arrayRequired: false,
      required: true,
    },
    name: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemWidgetCurrentUserTodos: {
    currentUserTodos: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      state: {
        type: 'TodoStateEnum',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WorkItemWidgetCurrentUserTodosInput: {
    action: {
      type: 'WorkItemTodoUpdateAction',
      array: false,
      arrayRequired: false,
      required: true,
    },
    todoId: {
      type: 'TodoID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemWidgetDescriptionInput: {
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemWidgetHealthStatusInput: {
    healthStatus: {
      type: 'HealthStatus',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemWidgetHierarchy: {
    children: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WorkItemWidgetHierarchyCreateInput: {
    parentId: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemWidgetHierarchyUpdateInput: {
    adjacentWorkItemId: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    childrenIds: {
      type: 'WorkItemID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    parentId: {
      type: 'WorkItemID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    relativePosition: {
      type: 'RelativePositionType',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemWidgetIterationInput: {
    iterationId: {
      type: 'IterationID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemWidgetLabels: {
    labels: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WorkItemWidgetLabelsUpdateInput: {
    addLabelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
    removeLabelIds: {
      type: 'LabelID',
      array: true,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemWidgetMilestoneInput: {
    milestoneId: {
      type: 'MilestoneID',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemWidgetNotes: {
    discussions: {
      filter: {
        type: 'NotesFilterType',
        array: false,
        arrayRequired: false,
        required: false,
      },
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WorkItemWidgetNotificationsUpdateInput: {
    subscribed: {
      type: 'Boolean',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemWidgetProgressInput: {
    progress: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkItemWidgetStartAndDueDateUpdateInput: {
    dueDate: {
      type: 'Date',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDate: {
      type: 'Date',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemWidgetTestReports: {
    testReports: {
      after: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      before: {
        type: 'String',
        array: false,
        arrayRequired: false,
        required: false,
      },
      first: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
      last: {
        type: 'Int',
        array: false,
        arrayRequired: false,
        required: false,
      },
    },
  },
  WorkItemWidgetType: 'enum',
  WorkItemWidgetWeightInput: {
    weight: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
  WorkItemsTypeID: 'String',
  WorkspaceCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    clusterAgentId: {
      type: 'ClustersAgentID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    desiredState: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    editor: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    maxHoursBeforeTermination: {
      type: 'Int',
      array: false,
      arrayRequired: false,
      required: true,
    },
    projectId: {
      type: 'ProjectID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    devfileRef: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
    devfilePath: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  WorkspaceUpdateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    id: {
      type: 'RemoteDevelopmentWorkspaceID',
      array: false,
      arrayRequired: false,
      required: true,
    },
    desiredState: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: true,
    },
  },
  iterationCreateInput: {
    clientMutationId: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    projectPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    groupPath: {
      type: 'ID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    iterationsCadenceId: {
      type: 'IterationsCadenceID',
      array: false,
      arrayRequired: false,
      required: false,
    },
    title: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    description: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    startDate: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
    dueDate: {
      type: 'String',
      array: false,
      arrayRequired: false,
      required: false,
    },
  },
};


export const ReturnTypes: Record<string, any> = {
  AccessLevel: {
    integerValue: 'Int',
    stringValue: 'AccessLevelEnum',
  },
  AccessLevelGroup: {
    avatarUrl: 'String',
    id: 'ID',
    name: 'String',
    parent: 'AccessLevelGroup',
    webUrl: 'String',
  },
  AccessLevelUser: {
    avatarUrl: 'String',
    id: 'ID',
    name: 'String',
    publicEmail: 'String',
    username: 'String',
    webPath: 'String',
    webUrl: 'String',
  },
  Achievement: {
    avatarUrl: 'String',
    createdAt: 'Time',
    description: 'String',
    id: 'AchievementsAchievementID',
    name: 'String',
    namespace: 'Namespace',
    updatedAt: 'Time',
    userAchievements: 'UserAchievementConnection',
  },
  AchievementConnection: {
    edges: 'AchievementEdge',
    nodes: 'Achievement',
    pageInfo: 'PageInfo',
  },
  AchievementEdge: {
    cursor: 'String',
    node: 'Achievement',
  },
  AchievementsAwardPayload: {
    clientMutationId: 'String',
    errors: 'String',
    userAchievement: 'UserAchievement',
  },
  AchievementsCreatePayload: {
    achievement: 'Achievement',
    clientMutationId: 'String',
    errors: 'String',
  },
  AchievementsDeletePayload: {
    achievement: 'Achievement',
    clientMutationId: 'String',
    errors: 'String',
  },
  AchievementsRevokePayload: {
    clientMutationId: 'String',
    errors: 'String',
    userAchievement: 'UserAchievement',
  },
  AchievementsUpdatePayload: {
    achievement: 'Achievement',
    clientMutationId: 'String',
    errors: 'String',
  },
  AddProjectToSecurityDashboardPayload: {
    clientMutationId: 'String',
    errors: 'String',
    project: 'Project',
  },
  AdminSidekiqQueuesDeleteJobsPayload: {
    clientMutationId: 'String',
    errors: 'String',
    result: 'DeleteJobsResponse',
  },
  AgentConfiguration: {
    agentName: 'String',
  },
  AgentConfigurationConnection: {
    edges: 'AgentConfigurationEdge',
    nodes: 'AgentConfiguration',
    pageInfo: 'PageInfo',
  },
  AgentConfigurationEdge: {
    cursor: 'String',
    node: 'AgentConfiguration',
  },
  AgentMetadata: {
    commit: 'String',
    podName: 'String',
    podNamespace: 'String',
    version: 'String',
  },
  AiActionPayload: {
    clientMutationId: 'String',
    errors: 'String',
    requestId: 'String',
  },
  AiCachedMessageType: {
    content: 'String',
    errors: 'String',
    id: 'ID',
    requestId: 'ID',
    role: 'AiCachedMessageRole',
    timestamp: 'Time',
  },
  AiCachedMessageTypeConnection: {
    edges: 'AiCachedMessageTypeEdge',
    nodes: 'AiCachedMessageType',
    pageInfo: 'PageInfo',
  },
  AiCachedMessageTypeEdge: {
    cursor: 'String',
    node: 'AiCachedMessageType',
  },
  AiMessageType: {
    content: 'String',
    errors: 'String',
    id: 'ID',
    isFetching: 'Boolean',
    role: 'String',
  },
  AiMessageTypeConnection: {
    edges: 'AiMessageTypeEdge',
    nodes: 'AiMessageType',
    pageInfo: 'PageInfo',
  },
  AiMessageTypeEdge: {
    cursor: 'String',
    node: 'AiMessageType',
  },
  AiResponse: {
    errors: 'String',
    requestId: 'String',
    responseBody: 'String',
  },
  AlertManagementAlert: {
    assignees: 'UserCoreConnection',
    commenters: 'UserCoreConnection',
    createdAt: 'Time',
    description: 'String',
    details: 'JSON',
    detailsUrl: 'String',
    discussions: 'DiscussionConnection',
    endedAt: 'Time',
    environment: 'Environment',
    eventCount: 'Int',
    hosts: 'String',
    id: 'ID',
    iid: 'ID',
    issue: 'Issue',
    issueIid: 'ID',
    metricsDashboardUrl: 'String',
    monitoringTool: 'String',
    notes: 'NoteConnection',
    prometheusAlert: 'PrometheusAlert',
    runbook: 'String',
    service: 'String',
    severity: 'AlertManagementSeverity',
    startedAt: 'Time',
    status: 'AlertManagementStatus',
    title: 'String',
    todos: 'TodoConnection',
    updatedAt: 'Time',
    webUrl: 'String',
  },
  AlertManagementAlertConnection: {
    edges: 'AlertManagementAlertEdge',
    nodes: 'AlertManagementAlert',
    pageInfo: 'PageInfo',
  },
  AlertManagementAlertEdge: {
    cursor: 'String',
    node: 'AlertManagementAlert',
  },
  AlertManagementAlertStatusCountsType: {
    acknowledged: 'Int',
    all: 'Int',
    ignored: 'Int',
    open: 'Int',
    resolved: 'Int',
    triggered: 'Int',
  },
  AlertManagementHttpIntegration: {
    active: 'Boolean',
    apiUrl: 'String',
    id: 'ID',
    name: 'String',
    payloadAlertFields: 'AlertManagementPayloadAlertField',
    payloadAttributeMappings: 'AlertManagementPayloadAlertMappingField',
    payloadExample: 'JsonString',
    token: 'String',
    type: 'AlertManagementIntegrationType',
    url: 'String',
  },
  AlertManagementHttpIntegrationConnection: {
    edges: 'AlertManagementHttpIntegrationEdge',
    nodes: 'AlertManagementHttpIntegration',
    pageInfo: 'PageInfo',
  },
  AlertManagementHttpIntegrationEdge: {
    cursor: 'String',
    node: 'AlertManagementHttpIntegration',
  },
  AlertManagementIntegration: {
    '...on AlertManagementHttpIntegration': 'AlertManagementHttpIntegration',
    '...on AlertManagementPrometheusIntegration': 'AlertManagementPrometheusIntegration',
    active: 'Boolean',
    apiUrl: 'String',
    id: 'ID',
    name: 'String',
    token: 'String',
    type: 'AlertManagementIntegrationType',
    url: 'String',
  },
  AlertManagementIntegrationConnection: {
    edges: 'AlertManagementIntegrationEdge',
    nodes: 'AlertManagementIntegration',
    pageInfo: 'PageInfo',
  },
  AlertManagementIntegrationEdge: {
    cursor: 'String',
    node: 'AlertManagementIntegration',
  },
  AlertManagementPayloadAlertField: {
    label: 'String',
    path: 'PayloadAlertFieldPathSegment',
    type: 'AlertManagementPayloadAlertFieldType',
  },
  AlertManagementPayloadAlertMappingField: {
    fieldName: 'AlertManagementPayloadAlertFieldName',
    label: 'String',
    path: 'PayloadAlertFieldPathSegment',
    type: 'AlertManagementPayloadAlertFieldType',
  },
  AlertManagementPrometheusIntegration: {
    active: 'Boolean',
    apiUrl: 'String',
    id: 'ID',
    name: 'String',
    token: 'String',
    type: 'AlertManagementIntegrationType',
    url: 'String',
  },
  AlertSetAssigneesPayload: {
    alert: 'AlertManagementAlert',
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
    todo: 'Todo',
  },
  AlertTodoCreatePayload: {
    alert: 'AlertManagementAlert',
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
    todo: 'Todo',
  },
  ApiFuzzingCiConfiguration: {
    scanModes: 'ApiFuzzingScanMode',
    scanProfiles: 'ApiFuzzingScanProfile',
  },
  ApiFuzzingScanProfile: {
    description: 'String',
    name: 'String',
    yaml: 'String',
  },
  ApprovalProjectRule: {
    approvalsRequired: 'Int',
    eligibleApprovers: 'UserCoreConnection',
    id: 'GlobalID',
    name: 'String',
    type: 'ApprovalRuleType',
  },
  ApprovalProjectRuleConnection: {
    edges: 'ApprovalProjectRuleEdge',
    nodes: 'ApprovalProjectRule',
    pageInfo: 'PageInfo',
  },
  ApprovalProjectRuleEdge: {
    cursor: 'String',
    node: 'ApprovalProjectRule',
  },
  ApprovalRule: {
    allowMergeWhenInvalid: 'Boolean',
    approvalsRequired: 'Int',
    approved: 'Boolean',
    approvedBy: 'UserCoreConnection',
    commentedBy: 'UserCoreConnection',
    containsHiddenGroups: 'Boolean',
    eligibleApprovers: 'UserCore',
    groups: 'GroupConnection',
    id: 'GlobalID',
    invalid: 'Boolean',
    name: 'String',
    overridden: 'Boolean',
    section: 'String',
    sourceRule: 'ApprovalRule',
    type: 'ApprovalRuleType',
    users: 'UserCoreConnection',
  },
  ApproveDeploymentPayload: {
    clientMutationId: 'String',
    deploymentApproval: 'DeploymentApproval',
    errors: 'String',
  },
  ArtifactDestroyPayload: {
    artifact: 'CiJobArtifact',
    clientMutationId: 'String',
    errors: 'String',
  },
  AssetType: {
    name: 'String',
    type: 'String',
    url: 'String',
  },
  AuditEventDefinition: {
    description: 'String',
    featureCategory: 'String',
    introducedByIssue: 'String',
    introducedByMr: 'String',
    milestone: 'String',
    name: 'String',
    savedToDatabase: 'Boolean',
    streamed: 'Boolean',
  },
  AuditEventDefinitionConnection: {
    edges: 'AuditEventDefinitionEdge',
    nodes: 'AuditEventDefinition',
    pageInfo: 'PageInfo',
  },
  AuditEventDefinitionEdge: {
    cursor: 'String',
    node: 'AuditEventDefinition',
  },
  AuditEventStreamingHeader: {
    id: 'ID',
    key: 'String',
    value: 'String',
  },
  AuditEventStreamingHeaderConnection: {
    edges: 'AuditEventStreamingHeaderEdge',
    nodes: 'AuditEventStreamingHeader',
    pageInfo: 'PageInfo',
  },
  AuditEventStreamingHeaderEdge: {
    cursor: 'String',
    node: 'AuditEventStreamingHeader',
  },
  AuditEventsStreamingDestinationEventsAddPayload: {
    clientMutationId: 'String',
    errors: 'String',
    eventTypeFilters: 'String',
  },
  AuditEventsStreamingDestinationEventsRemovePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  AuditEventsStreamingHeadersCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    header: 'AuditEventStreamingHeader',
  },
  AuditEventsStreamingHeadersDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  AuditEventsStreamingHeadersUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    header: 'AuditEventStreamingHeader',
  },
  AuditEventsStreamingInstanceHeader: {
    id: 'ID',
    key: 'String',
    value: 'String',
  },
  AuditEventsStreamingInstanceHeadersCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    header: 'AuditEventsStreamingInstanceHeader',
  },
  AuditEventsStreamingInstanceHeadersUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    header: 'AuditEventsStreamingInstanceHeader',
  },
  AwardEmoji: {
    description: 'String',
    emoji: 'String',
    name: 'String',
    unicode: 'String',
    unicodeVersion: 'String',
    user: 'UserCore',
  },
  AwardEmojiAddPayload: {
    awardEmoji: 'AwardEmoji',
    clientMutationId: 'String',
    errors: 'String',
  },
  AwardEmojiConnection: {
    edges: 'AwardEmojiEdge',
    nodes: 'AwardEmoji',
    pageInfo: 'PageInfo',
  },
  AwardEmojiEdge: {
    cursor: 'String',
    node: 'AwardEmoji',
  },
  AwardEmojiRemovePayload: {
    awardEmoji: 'AwardEmoji',
    clientMutationId: 'String',
    errors: 'String',
  },
  AwardEmojiTogglePayload: {
    awardEmoji: 'AwardEmoji',
    clientMutationId: 'String',
    errors: 'String',
    toggledOn: 'Boolean',
  },
  BaseHeaderInterface: {
    '...on AuditEventStreamingHeader': 'AuditEventStreamingHeader',
    '...on AuditEventsStreamingInstanceHeader': 'AuditEventsStreamingInstanceHeader',
    id: 'ID',
    key: 'String',
    value: 'String',
  },
  BaseService: {
    active: 'Boolean',
    serviceType: 'ServiceType',
    type: 'String',
  },
  Blob: {
    flatPath: 'String',
    id: 'ID',
    lfsOid: 'String',
    mode: 'String',
    name: 'String',
    path: 'String',
    sha: 'String',
    type: 'EntryType',
    webPath: 'String',
    webUrl: 'String',
  },
  BlobConnection: {
    edges: 'BlobEdge',
    nodes: 'Blob',
    pageInfo: 'PageInfo',
  },
  BlobEdge: {
    cursor: 'String',
    node: 'Blob',
  },
  BlobViewer: {
    collapsed: 'Boolean',
    fileType: 'String',
    loadAsync: 'Boolean',
    loadingPartialName: 'String',
    renderError: 'String',
    tooLarge: 'Boolean',
    type: 'BlobViewersType',
  },
  Board: {
    assignee: 'UserCore',
    createdAt: 'Time',
    epics: 'BoardEpicConnection',
    hideBacklogList: 'Boolean',
    hideClosedList: 'Boolean',
    id: 'ID',
    iteration: 'Iteration',
    iterationCadence: 'IterationCadence',
    labels: 'LabelConnection',
    lists: 'BoardListConnection',
    milestone: 'Milestone',
    name: 'String',
    updatedAt: 'Time',
    webPath: 'String',
    webUrl: 'String',
    weight: 'Int',
  },
  BoardConnection: {
    edges: 'BoardEdge',
    nodes: 'Board',
    pageInfo: 'PageInfo',
  },
  BoardEdge: {
    cursor: 'String',
    node: 'Board',
  },
  BoardEpic: {
    ancestors: 'EpicConnection',
    author: 'UserCore',
    awardEmoji: 'AwardEmojiConnection',
    blocked: 'Boolean',
    blockedByCount: 'Int',
    blockedByEpics: 'EpicConnection',
    blockingCount: 'Int',
    children: 'EpicConnection',
    closedAt: 'Time',
    color: 'String',
    commenters: 'UserCoreConnection',
    confidential: 'Boolean',
    createdAt: 'Time',
    currentUserTodos: 'TodoConnection',
    defaultProjectForIssueCreation: 'Project',
    descendantCounts: 'EpicDescendantCount',
    descendantWeightSum: 'EpicDescendantWeights',
    description: 'String',
    descriptionHtml: 'String',
    discussions: 'DiscussionConnection',
    downvotes: 'Int',
    dueDate: 'Time',
    dueDateFixed: 'Time',
    dueDateFromInheritedSource: 'Time',
    dueDateFromMilestones: 'Time',
    dueDateIsFixed: 'Boolean',
    events: 'EventConnection',
    group: 'Group',
    hasChildren: 'Boolean',
    hasIssues: 'Boolean',
    hasParent: 'Boolean',
    healthStatus: 'EpicHealthStatus',
    id: 'ID',
    iid: 'ID',
    issues: 'EpicIssueConnection',
    labels: 'LabelConnection',
    notes: 'NoteConnection',
    parent: 'Epic',
    participants: 'UserCoreConnection',
    reference: 'String',
    relationPath: 'String',
    relativePosition: 'Int',
    startDate: 'Time',
    startDateFixed: 'Time',
    startDateFromInheritedSource: 'Time',
    startDateFromMilestones: 'Time',
    startDateIsFixed: 'Boolean',
    state: 'EpicState',
    subscribed: 'Boolean',
    textColor: 'String',
    title: 'String',
    titleHtml: 'String',
    updatedAt: 'Time',
    upvotes: 'Int',
    userDiscussionsCount: 'Int',
    userNotesCount: 'Int',
    userPermissions: 'EpicPermissions',
    userPreferences: 'BoardEpicUserPreferences',
    webPath: 'String',
    webUrl: 'String',
  },
  BoardEpicConnection: {
    count: 'Int',
    edges: 'BoardEpicEdge',
    nodes: 'BoardEpic',
    pageInfo: 'PageInfo',
  },
  BoardEpicCreatePayload: {
    clientMutationId: 'String',
    epic: 'Epic',
    errors: 'String',
  },
  BoardEpicEdge: {
    cursor: 'String',
    node: 'BoardEpic',
  },
  BoardEpicUserPreferences: {
    collapsed: 'Boolean',
  },
  BoardList: {
    assignee: 'UserCore',
    collapsed: 'Boolean',
    id: 'ID',
    issues: 'IssueConnection',
    issuesCount: 'Int',
    iteration: 'Iteration',
    label: 'Label',
    limitMetric: 'ListLimitMetric',
    listType: 'String',
    maxIssueCount: 'Int',
    maxIssueWeight: 'Int',
    milestone: 'Milestone',
    position: 'Int',
    title: 'String',
    totalWeight: 'Int',
  },
  BoardListConnection: {
    edges: 'BoardListEdge',
    nodes: 'BoardList',
    pageInfo: 'PageInfo',
  },
  BoardListCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    list: 'BoardList',
  },
  BoardListEdge: {
    cursor: 'String',
    node: 'BoardList',
  },
  BoardListUpdateLimitMetricsPayload: {
    clientMutationId: 'String',
    errors: 'String',
    list: 'BoardList',
  },
  Branch: {
    commit: 'Commit',
    name: 'String',
  },
  BranchProtection: {
    allowForcePush: 'Boolean',
    codeOwnerApprovalRequired: 'Boolean',
    mergeAccessLevels: 'MergeAccessLevelConnection',
    pushAccessLevels: 'PushAccessLevelConnection',
    unprotectAccessLevels: 'UnprotectAccessLevelConnection',
  },
  BranchRule: {
    approvalRules: 'ApprovalProjectRuleConnection',
    branchProtection: 'BranchProtection',
    createdAt: 'Time',
    externalStatusChecks: 'ExternalStatusCheckConnection',
    isDefault: 'Boolean',
    isProtected: 'Boolean',
    matchingBranchesCount: 'Int',
    name: 'String',
    updatedAt: 'Time',
  },
  BranchRuleConnection: {
    edges: 'BranchRuleEdge',
    nodes: 'BranchRule',
    pageInfo: 'PageInfo',
  },
  BranchRuleEdge: {
    cursor: 'String',
    node: 'BranchRule',
  },
  BuildForecastPayload: {
    clientMutationId: 'String',
    errors: 'String',
    forecast: 'Forecast',
  },
  BulkDestroyJobArtifactsPayload: {
    clientMutationId: 'String',
    destroyedCount: 'Int',
    destroyedIds: 'CiJobArtifactID',
    errors: 'String',
  },
  BulkEnableDevopsAdoptionNamespacesPayload: {
    clientMutationId: 'String',
    enabledNamespaces: 'DevopsAdoptionEnabledNamespace',
    errors: 'String',
  },
  BulkRunnerDeletePayload: {
    clientMutationId: 'String',
    deletedCount: 'Int',
    deletedIds: 'CiRunnerID',
    errors: 'String',
  },
  BurnupChartDailyTotals: {
    completedCount: 'Int',
    completedWeight: 'Int',
    date: 'ISO8601Date',
    scopeCount: 'Int',
    scopeWeight: 'Int',
  },
  CatalogResourcesCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  CiAiGenerateConfigPayload: {
    clientMutationId: 'String',
    errors: 'String',
    userMessage: 'AiMessageType',
  },
  CiApplicationSettings: {
    keepLatestArtifact: 'Boolean',
  },
  CiBuildNeed: {
    id: 'ID',
    name: 'String',
  },
  CiBuildNeedConnection: {
    edges: 'CiBuildNeedEdge',
    nodes: 'CiBuildNeed',
    pageInfo: 'PageInfo',
  },
  CiBuildNeedEdge: {
    cursor: 'String',
    node: 'CiBuildNeed',
  },
  CiCatalogResource: {
    description: 'String',
    forksCount: 'Int',
    icon: 'String',
    id: 'ID',
    name: 'String',
    readmeHtml: 'String',
    rootNamespace: 'Namespace',
    starCount: 'Int',
    versions: 'ReleaseConnection',
    webPath: 'String',
  },
  CiCatalogResourceConnection: {
    count: 'Int',
    edges: 'CiCatalogResourceEdge',
    nodes: 'CiCatalogResource',
    pageInfo: 'PageInfo',
  },
  CiCatalogResourceEdge: {
    cursor: 'String',
    node: 'CiCatalogResource',
  },
  CiConfig: {
    errors: 'String',
    includes: 'CiConfigInclude',
    mergedYaml: 'String',
    stages: 'CiConfigStageConnection',
    status: 'CiConfigStatus',
    warnings: 'String',
  },
  CiConfigGroup: {
    jobs: 'CiConfigJobConnection',
    name: 'String',
    size: 'Int',
  },
  CiConfigGroupConnection: {
    edges: 'CiConfigGroupEdge',
    nodes: 'CiConfigGroup',
    pageInfo: 'PageInfo',
  },
  CiConfigGroupEdge: {
    cursor: 'String',
    node: 'CiConfigGroup',
  },
  CiConfigInclude: {
    blob: 'String',
    contextProject: 'String',
    contextSha: 'String',
    extra: 'JSON',
    location: 'String',
    raw: 'String',
    type: 'CiConfigIncludeType',
  },
  CiConfigJob: {
    afterScript: 'String',
    allowFailure: 'Boolean',
    beforeScript: 'String',
    environment: 'String',
    except: 'CiConfigJobRestriction',
    groupName: 'String',
    name: 'String',
    needs: 'CiConfigNeedConnection',
    only: 'CiConfigJobRestriction',
    script: 'String',
    stage: 'String',
    tags: 'String',
    when: 'String',
  },
  CiConfigJobConnection: {
    edges: 'CiConfigJobEdge',
    nodes: 'CiConfigJob',
    pageInfo: 'PageInfo',
  },
  CiConfigJobEdge: {
    cursor: 'String',
    node: 'CiConfigJob',
  },
  CiConfigJobRestriction: {
    refs: 'String',
  },
  CiConfigNeed: {
    name: 'String',
  },
  CiConfigNeedConnection: {
    edges: 'CiConfigNeedEdge',
    nodes: 'CiConfigNeed',
    pageInfo: 'PageInfo',
  },
  CiConfigNeedEdge: {
    cursor: 'String',
    node: 'CiConfigNeed',
  },
  CiConfigStage: {
    groups: 'CiConfigGroupConnection',
    name: 'String',
  },
  CiConfigStageConnection: {
    edges: 'CiConfigStageEdge',
    nodes: 'CiConfigStage',
    pageInfo: 'PageInfo',
  },
  CiConfigStageEdge: {
    cursor: 'String',
    node: 'CiConfigStage',
  },
  CiConfigVariable: {
    description: 'String',
    key: 'String',
    value: 'String',
    valueOptions: 'String',
  },
  CiFreezePeriod: {
    cronTimezone: 'String',
    endCron: 'String',
    endTime: 'Time',
    startCron: 'String',
    startTime: 'Time',
    status: 'CiFreezePeriodStatus',
  },
  CiGroup: {
    detailedStatus: 'DetailedStatus',
    id: 'String',
    jobs: 'CiJobConnection',
    name: 'String',
    size: 'Int',
  },
  CiGroupConnection: {
    edges: 'CiGroupEdge',
    nodes: 'CiGroup',
    pageInfo: 'PageInfo',
  },
  CiGroupEdge: {
    cursor: 'String',
    node: 'CiGroup',
  },
  CiGroupVariable: {
    environmentScope: 'String',
    id: 'ID',
    key: 'String',
    masked: 'Boolean',
    protected: 'Boolean',
    raw: 'Boolean',
    value: 'String',
    variableType: 'CiVariableType',
  },
  CiGroupVariableConnection: {
    edges: 'CiGroupVariableEdge',
    limit: 'Int',
    nodes: 'CiGroupVariable',
    pageInfo: 'PageInfo',
  },
  CiGroupVariableEdge: {
    cursor: 'String',
    node: 'CiGroupVariable',
  },
  CiInstanceVariable: {
    environmentScope: 'String',
    id: 'ID',
    key: 'String',
    masked: 'Boolean',
    protected: 'Boolean',
    raw: 'Boolean',
    value: 'String',
    variableType: 'CiVariableType',
  },
  CiInstanceVariableConnection: {
    edges: 'CiInstanceVariableEdge',
    nodes: 'CiInstanceVariable',
    pageInfo: 'PageInfo',
  },
  CiInstanceVariableEdge: {
    cursor: 'String',
    node: 'CiInstanceVariable',
  },
  CiJob: {
    active: 'Boolean',
    aiFailureAnalysis: 'String',
    allowFailure: 'Boolean',
    artifacts: 'CiJobArtifactConnection',
    browseArtifactsPath: 'String',
    canPlayJob: 'Boolean',
    cancelable: 'Boolean',
    commitPath: 'String',
    coverage: 'Float',
    createdAt: 'Time',
    createdByTag: 'Boolean',
    detailedStatus: 'DetailedStatus',
    downstreamPipeline: 'Pipeline',
    duration: 'Int',
    erasedAt: 'Time',
    failureMessage: 'String',
    finishedAt: 'Time',
    id: 'JobID',
    kind: 'CiJobKind',
    manualJob: 'Boolean',
    manualVariables: 'CiManualVariableConnection',
    name: 'String',
    needs: 'CiBuildNeedConnection',
    pipeline: 'Pipeline',
    playPath: 'String',
    playable: 'Boolean',
    previousStageJobsOrNeeds: 'JobNeedUnionConnection',
    project: 'Project',
    queuedAt: 'Time',
    queuedDuration: 'Duration',
    refName: 'String',
    refPath: 'String',
    retried: 'Boolean',
    retryable: 'Boolean',
    runner: 'CiRunner',
    runnerManager: 'CiRunnerManager',
    scheduled: 'Boolean',
    scheduledAt: 'Time',
    schedulingType: 'String',
    shortSha: 'String',
    stage: 'CiStage',
    startedAt: 'Time',
    status: 'CiJobStatus',
    stuck: 'Boolean',
    tags: 'String',
    trace: 'CiJobTrace',
    triggered: 'Boolean',
    userPermissions: 'JobPermissions',
    webPath: 'String',
  },
  CiJobArtifact: {
    downloadPath: 'String',
    expireAt: 'Time',
    fileType: 'JobArtifactFileType',
    id: 'CiJobArtifactID',
    name: 'String',
    size: 'BigInt',
  },
  CiJobArtifactConnection: {
    edges: 'CiJobArtifactEdge',
    nodes: 'CiJobArtifact',
    pageInfo: 'PageInfo',
  },
  CiJobArtifactEdge: {
    cursor: 'String',
    node: 'CiJobArtifact',
  },
  CiJobConnection: {
    count: 'Int',
    edges: 'CiJobEdge',
    nodes: 'CiJob',
    pageInfo: 'PageInfo',
  },
  CiJobEdge: {
    cursor: 'String',
    node: 'CiJob',
  },
  CiJobTokenScopeAddProjectPayload: {
    ciJobTokenScope: 'CiJobTokenScopeType',
    clientMutationId: 'String',
    errors: 'String',
  },
  CiJobTokenScopeRemoveProjectPayload: {
    ciJobTokenScope: 'CiJobTokenScopeType',
    clientMutationId: 'String',
    errors: 'String',
  },
  CiJobTokenScopeType: {
    inboundAllowlist: 'ProjectConnection',
    outboundAllowlist: 'ProjectConnection',
    projects: 'ProjectConnection',
  },
  CiJobTrace: {
    htmlSummary: 'String',
  },
  CiJobsDurationStatistics: {
    p50: 'Duration',
    p75: 'Duration',
    p90: 'Duration',
    p95: 'Duration',
    p99: 'Duration',
  },
  CiJobsStatistics: {
    queuedDuration: 'CiJobsDurationStatistics',
  },
  CiManualVariable: {
    environmentScope: 'String',
    id: 'ID',
    key: 'String',
    raw: 'Boolean',
    value: 'String',
    variableType: 'CiVariableType',
  },
  CiManualVariableConnection: {
    edges: 'CiManualVariableEdge',
    nodes: 'CiManualVariable',
    pageInfo: 'PageInfo',
  },
  CiManualVariableEdge: {
    cursor: 'String',
    node: 'CiManualVariable',
  },
  CiMinutesNamespaceMonthlyUsage: {
    minutes: 'Int',
    month: 'String',
    monthIso8601: 'ISO8601Date',
    projects: 'CiMinutesProjectMonthlyUsageConnection',
    sharedRunnersDuration: 'Int',
  },
  CiMinutesNamespaceMonthlyUsageConnection: {
    edges: 'CiMinutesNamespaceMonthlyUsageEdge',
    nodes: 'CiMinutesNamespaceMonthlyUsage',
    pageInfo: 'PageInfo',
  },
  CiMinutesNamespaceMonthlyUsageEdge: {
    cursor: 'String',
    node: 'CiMinutesNamespaceMonthlyUsage',
  },
  CiMinutesProjectMonthlyUsage: {
    minutes: 'Int',
    name: 'String',
    project: 'Project',
    sharedRunnersDuration: 'Int',
  },
  CiMinutesProjectMonthlyUsageConnection: {
    edges: 'CiMinutesProjectMonthlyUsageEdge',
    nodes: 'CiMinutesProjectMonthlyUsage',
    pageInfo: 'PageInfo',
  },
  CiMinutesProjectMonthlyUsageEdge: {
    cursor: 'String',
    node: 'CiMinutesProjectMonthlyUsage',
  },
  CiProjectVariable: {
    environmentScope: 'String',
    id: 'ID',
    key: 'String',
    masked: 'Boolean',
    protected: 'Boolean',
    raw: 'Boolean',
    value: 'String',
    variableType: 'CiVariableType',
  },
  CiProjectVariableConnection: {
    edges: 'CiProjectVariableEdge',
    limit: 'Int',
    nodes: 'CiProjectVariable',
    pageInfo: 'PageInfo',
  },
  CiProjectVariableEdge: {
    cursor: 'String',
    node: 'CiProjectVariable',
  },
  CiRunner: {
    accessLevel: 'CiRunnerAccessLevel',
    active: 'Boolean',
    adminUrl: 'String',
    architectureName: 'String',
    contactedAt: 'Time',
    createdAt: 'Time',
    createdBy: 'UserCore',
    description: 'String',
    editAdminUrl: 'String',
    ephemeralAuthenticationToken: 'String',
    ephemeralRegisterUrl: 'String',
    executorName: 'String',
    groups: 'GroupConnection',
    id: 'CiRunnerID',
    ipAddress: 'String',
    jobCount: 'Int',
    jobExecutionStatus: 'CiRunnerJobExecutionStatus',
    jobs: 'CiJobConnection',
    locked: 'Boolean',
    maintenanceNote: 'String',
    maintenanceNoteHtml: 'String',
    managers: 'CiRunnerManagerConnection',
    maximumTimeout: 'Int',
    ownerProject: 'Project',
    paused: 'Boolean',
    platformName: 'String',
    privateProjectsMinutesCostFactor: 'Float',
    projectCount: 'Int',
    projects: 'ProjectConnection',
    publicProjectsMinutesCostFactor: 'Float',
    registerAdminUrl: 'String',
    revision: 'String',
    runUntagged: 'Boolean',
    runnerType: 'CiRunnerType',
    shortSha: 'String',
    status: 'CiRunnerStatus',
    tagList: 'String',
    tokenExpiresAt: 'Time',
    upgradeStatus: 'CiRunnerUpgradeStatus',
    userPermissions: 'RunnerPermissions',
    version: 'String',
  },
  CiRunnerConnection: {
    count: 'Int',
    edges: 'CiRunnerEdge',
    jobsStatistics: 'CiJobsStatistics',
    nodes: 'CiRunner',
    pageInfo: 'PageInfo',
  },
  CiRunnerEdge: {
    cursor: 'String',
    editUrl: 'String',
    node: 'CiRunner',
    webUrl: 'String',
  },
  CiRunnerManager: {
    architectureName: 'String',
    contactedAt: 'Time',
    createdAt: 'Time',
    executorName: 'String',
    id: 'CiRunnerManagerID',
    ipAddress: 'String',
    platformName: 'String',
    revision: 'String',
    runner: 'CiRunner',
    status: 'CiRunnerStatus',
    systemId: 'String',
    upgradeStatus: 'CiRunnerUpgradeStatus',
    version: 'String',
  },
  CiRunnerManagerConnection: {
    count: 'Int',
    edges: 'CiRunnerManagerEdge',
    nodes: 'CiRunnerManager',
    pageInfo: 'PageInfo',
  },
  CiRunnerManagerEdge: {
    cursor: 'String',
    node: 'CiRunnerManager',
  },
  CiSecureFileRegistry: {
    ciSecureFileId: 'ID',
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  CiSecureFileRegistryConnection: {
    edges: 'CiSecureFileRegistryEdge',
    nodes: 'CiSecureFileRegistry',
    pageInfo: 'PageInfo',
  },
  CiSecureFileRegistryEdge: {
    cursor: 'String',
    node: 'CiSecureFileRegistry',
  },
  CiStage: {
    detailedStatus: 'DetailedStatus',
    groups: 'CiGroupConnection',
    id: 'ID',
    jobs: 'CiJobConnection',
    name: 'String',
    status: 'String',
  },
  CiStageConnection: {
    edges: 'CiStageEdge',
    nodes: 'CiStage',
    pageInfo: 'PageInfo',
  },
  CiStageEdge: {
    cursor: 'String',
    node: 'CiStage',
  },
  CiTemplate: {
    content: 'String',
    name: 'String',
  },
  CiVariable: {
    '...on CiGroupVariable': 'CiGroupVariable',
    '...on CiInstanceVariable': 'CiInstanceVariable',
    '...on CiManualVariable': 'CiManualVariable',
    '...on CiProjectVariable': 'CiProjectVariable',
    '...on PipelineScheduleVariable': 'PipelineScheduleVariable',
    id: 'ID',
    key: 'String',
    raw: 'Boolean',
    value: 'String',
    variableType: 'CiVariableType',
  },
  ClusterAgent: {
    activityEvents: 'ClusterAgentActivityEventConnection',
    connections: 'ConnectedAgentConnection',
    createdAt: 'Time',
    createdByUser: 'UserCore',
    id: 'ID',
    name: 'String',
    project: 'Project',
    tokens: 'ClusterAgentTokenConnection',
    updatedAt: 'Time',
    vulnerabilityImages: 'VulnerabilityContainerImageConnection',
    webPath: 'String',
  },
  ClusterAgentActivityEvent: {
    agentToken: 'ClusterAgentToken',
    kind: 'String',
    level: 'String',
    recordedAt: 'Time',
    user: 'UserCore',
  },
  ClusterAgentActivityEventConnection: {
    count: 'Int',
    edges: 'ClusterAgentActivityEventEdge',
    nodes: 'ClusterAgentActivityEvent',
    pageInfo: 'PageInfo',
  },
  ClusterAgentActivityEventEdge: {
    cursor: 'String',
    node: 'ClusterAgentActivityEvent',
  },
  ClusterAgentAuthorizationCiAccess: {
    agent: 'ClusterAgent',
    config: 'JSON',
  },
  ClusterAgentAuthorizationCiAccessConnection: {
    edges: 'ClusterAgentAuthorizationCiAccessEdge',
    nodes: 'ClusterAgentAuthorizationCiAccess',
    pageInfo: 'PageInfo',
  },
  ClusterAgentAuthorizationCiAccessEdge: {
    cursor: 'String',
    node: 'ClusterAgentAuthorizationCiAccess',
  },
  ClusterAgentAuthorizationUserAccess: {
    agent: 'ClusterAgent',
    config: 'JSON',
  },
  ClusterAgentAuthorizationUserAccessConnection: {
    edges: 'ClusterAgentAuthorizationUserAccessEdge',
    nodes: 'ClusterAgentAuthorizationUserAccess',
    pageInfo: 'PageInfo',
  },
  ClusterAgentAuthorizationUserAccessEdge: {
    cursor: 'String',
    node: 'ClusterAgentAuthorizationUserAccess',
  },
  ClusterAgentConnection: {
    count: 'Int',
    edges: 'ClusterAgentEdge',
    nodes: 'ClusterAgent',
    pageInfo: 'PageInfo',
  },
  ClusterAgentDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  ClusterAgentEdge: {
    cursor: 'String',
    node: 'ClusterAgent',
  },
  ClusterAgentToken: {
    clusterAgent: 'ClusterAgent',
    createdAt: 'Time',
    createdByUser: 'UserCore',
    description: 'String',
    id: 'ClustersAgentTokenID',
    lastUsedAt: 'Time',
    name: 'String',
    status: 'AgentTokenStatus',
  },
  ClusterAgentTokenConnection: {
    count: 'Int',
    edges: 'ClusterAgentTokenEdge',
    nodes: 'ClusterAgentToken',
    pageInfo: 'PageInfo',
  },
  ClusterAgentTokenCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    secret: 'String',
    token: 'ClusterAgentToken',
  },
  ClusterAgentTokenEdge: {
    cursor: 'String',
    node: 'ClusterAgentToken',
  },
  ClusterAgentTokenRevokePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  CodeCoverageActivity: {
    averageCoverage: 'Float',
    coverageCount: 'Int',
    date: 'Date',
    projectCount: 'Int',
  },
  CodeCoverageActivityConnection: {
    edges: 'CodeCoverageActivityEdge',
    nodes: 'CodeCoverageActivity',
    pageInfo: 'PageInfo',
  },
  CodeCoverageActivityEdge: {
    cursor: 'String',
    node: 'CodeCoverageActivity',
  },
  CodeCoverageSummary: {
    averageCoverage: 'Float',
    coverageCount: 'Int',
    lastUpdatedOn: 'Date',
  },
  CodeQualityDegradation: {
    description: 'String',
    engineName: 'String',
    fingerprint: 'String',
    line: 'Int',
    path: 'String',
    severity: 'CodeQualityDegradationSeverity',
    webUrl: 'String',
  },
  CodeQualityDegradationConnection: {
    count: 'Int',
    edges: 'CodeQualityDegradationEdge',
    nodes: 'CodeQualityDegradation',
    pageInfo: 'PageInfo',
  },
  CodeQualityDegradationEdge: {
    cursor: 'String',
    node: 'CodeQualityDegradation',
  },
  CodeQualityReportSummary: {
    blocker: 'Int',
    count: 'Int',
    critical: 'Int',
    info: 'Int',
    major: 'Int',
    minor: 'Int',
    unknown: 'Int',
  },
  Commit: {
    author: 'UserCore',
    authorEmail: 'String',
    authorGravatar: 'String',
    authorName: 'String',
    authoredDate: 'Time',
    description: 'String',
    descriptionHtml: 'String',
    fullTitle: 'String',
    fullTitleHtml: 'String',
    id: 'ID',
    message: 'String',
    pipelines: 'PipelineConnection',
    sha: 'String',
    shortId: 'String',
    signature: 'CommitSignature',
    signatureHtml: 'String',
    title: 'String',
    titleHtml: 'String',
    webPath: 'String',
    webUrl: 'String',
  },
  CommitConnection: {
    edges: 'CommitEdge',
    nodes: 'Commit',
    pageInfo: 'PageInfo',
  },
  CommitCreatePayload: {
    clientMutationId: 'String',
    commit: 'Commit',
    commitPipelinePath: 'String',
    content: 'String',
    errors: 'String',
  },
  CommitEdge: {
    cursor: 'String',
    node: 'Commit',
  },
  CommitParentNames: {
    names: 'String',
  },
  CommitReferences: {
    containingBranches: 'CommitParentNames',
    containingTags: 'CommitParentNames',
    tippingBranches: 'CommitParentNames',
    tippingTags: 'CommitParentNames',
  },
  CommitSignature: {
    '...on GpgSignature': 'GpgSignature',
    '...on SshSignature': 'SshSignature',
    '...on X509Signature': 'X509Signature',
    commitSha: 'String',
    project: 'Project',
    verificationStatus: 'VerificationStatus',
  },
  ComparedSecurityReport: {
    added: 'ComparedSecurityReportFinding',
    baseReportCreatedAt: 'Time',
    baseReportOutOfDate: 'Boolean',
    fixed: 'ComparedSecurityReportFinding',
    headReportCreatedAt: 'Time',
  },
  ComparedSecurityReportFinding: {
    description: 'String',
    foundByPipelineIid: 'String',
    severity: 'VulnerabilitySeverity',
    state: 'VulnerabilityState',
    title: 'String',
    uuid: 'String',
  },
  ComplianceFramework: {
    color: 'String',
    default: 'Boolean',
    description: 'String',
    id: 'ID',
    name: 'String',
    pipelineConfigurationFullPath: 'String',
  },
  ComplianceFrameworkConnection: {
    edges: 'ComplianceFrameworkEdge',
    nodes: 'ComplianceFramework',
    pageInfo: 'PageInfo',
  },
  ComplianceFrameworkEdge: {
    cursor: 'String',
    node: 'ComplianceFramework',
  },
  ComplianceViolation: {
    id: 'ID',
    mergeRequest: 'MergeRequest',
    reason: 'ComplianceViolationReason',
    severityLevel: 'ComplianceViolationSeverity',
    violatingUser: 'UserCore',
  },
  ComplianceViolationConnection: {
    edges: 'ComplianceViolationEdge',
    nodes: 'ComplianceViolation',
    pageInfo: 'PageInfo',
  },
  ComplianceViolationEdge: {
    cursor: 'String',
    node: 'ComplianceViolation',
  },
  ComposerMetadata: {
    composerJson: 'PackageComposerJsonType',
    targetSha: 'String',
  },
  ConanFileMetadata: {
    conanFileType: 'ConanMetadatumFileTypeEnum',
    conanPackageReference: 'String',
    createdAt: 'Time',
    id: 'PackagesConanFileMetadatumID',
    packageRevision: 'String',
    recipeRevision: 'String',
    updatedAt: 'Time',
  },
  ConanMetadata: {
    createdAt: 'Time',
    id: 'PackagesConanMetadatumID',
    packageChannel: 'String',
    packageUsername: 'String',
    recipe: 'String',
    recipePath: 'String',
    updatedAt: 'Time',
  },
  ConfigureContainerScanningPayload: {
    branch: 'String',
    clientMutationId: 'String',
    errors: 'String',
    successPath: 'String',
  },
  ConfigureDependencyScanningPayload: {
    branch: 'String',
    clientMutationId: 'String',
    errors: 'String',
    successPath: 'String',
  },
  ConfigureSastIacPayload: {
    branch: 'String',
    clientMutationId: 'String',
    errors: 'String',
    successPath: 'String',
  },
  ConfigureSastPayload: {
    branch: 'String',
    clientMutationId: 'String',
    errors: 'String',
    successPath: 'String',
  },
  ConfigureSecretDetectionPayload: {
    branch: 'String',
    clientMutationId: 'String',
    errors: 'String',
    successPath: 'String',
  },
  ConnectedAgent: {
    connectedAt: 'Time',
    connectionId: 'BigInt',
    metadata: 'AgentMetadata',
  },
  ConnectedAgentConnection: {
    edges: 'ConnectedAgentEdge',
    nodes: 'ConnectedAgent',
    pageInfo: 'PageInfo',
  },
  ConnectedAgentEdge: {
    cursor: 'String',
    node: 'ConnectedAgent',
  },
  ContactStateCounts: {
    active: 'Int',
    all: 'Int',
    inactive: 'Int',
  },
  ContainerExpirationPolicy: {
    cadence: 'ContainerExpirationPolicyCadenceEnum',
    createdAt: 'Time',
    enabled: 'Boolean',
    keepN: 'ContainerExpirationPolicyKeepEnum',
    nameRegex: 'UntrustedRegexp',
    nameRegexKeep: 'UntrustedRegexp',
    nextRunAt: 'Time',
    olderThan: 'ContainerExpirationPolicyOlderThanEnum',
    updatedAt: 'Time',
  },
  ContainerRepository: {
    canDelete: 'Boolean',
    createdAt: 'Time',
    expirationPolicyCleanupStatus: 'ContainerRepositoryCleanupStatus',
    expirationPolicyStartedAt: 'Time',
    id: 'ID',
    lastCleanupDeletedTagsCount: 'Int',
    location: 'String',
    migrationState: 'String',
    name: 'String',
    path: 'String',
    project: 'Project',
    status: 'ContainerRepositoryStatus',
    tagsCount: 'Int',
    updatedAt: 'Time',
  },
  ContainerRepositoryConnection: {
    edges: 'ContainerRepositoryEdge',
    nodes: 'ContainerRepository',
    pageInfo: 'PageInfo',
  },
  ContainerRepositoryDetails: {
    canDelete: 'Boolean',
    createdAt: 'Time',
    expirationPolicyCleanupStatus: 'ContainerRepositoryCleanupStatus',
    expirationPolicyStartedAt: 'Time',
    id: 'ID',
    lastCleanupDeletedTagsCount: 'Int',
    location: 'String',
    migrationState: 'String',
    name: 'String',
    path: 'String',
    project: 'Project',
    size: 'Float',
    status: 'ContainerRepositoryStatus',
    tags: 'ContainerRepositoryTagConnection',
    tagsCount: 'Int',
    updatedAt: 'Time',
  },
  ContainerRepositoryEdge: {
    cursor: 'String',
    node: 'ContainerRepository',
  },
  ContainerRepositoryRegistry: {
    containerRepositoryId: 'ID',
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  ContainerRepositoryRegistryConnection: {
    edges: 'ContainerRepositoryRegistryEdge',
    nodes: 'ContainerRepositoryRegistry',
    pageInfo: 'PageInfo',
  },
  ContainerRepositoryRegistryEdge: {
    cursor: 'String',
    node: 'ContainerRepositoryRegistry',
  },
  ContainerRepositoryTag: {
    canDelete: 'Boolean',
    createdAt: 'Time',
    digest: 'String',
    location: 'String',
    name: 'String',
    path: 'String',
    revision: 'String',
    shortRevision: 'String',
    totalSize: 'BigInt',
  },
  ContainerRepositoryTagConnection: {
    edges: 'ContainerRepositoryTagEdge',
    nodes: 'ContainerRepositoryTag',
    pageInfo: 'PageInfo',
  },
  ContainerRepositoryTagEdge: {
    cursor: 'String',
    node: 'ContainerRepositoryTag',
  },
  ContributionAnalyticsContribution: {
    issuesClosed: 'Int',
    issuesCreated: 'Int',
    mergeRequestsApproved: 'Int',
    mergeRequestsClosed: 'Int',
    mergeRequestsCreated: 'Int',
    mergeRequestsMerged: 'Int',
    repoPushed: 'Int',
    totalEvents: 'Int',
    user: 'UserCore',
  },
  ContributionAnalyticsContributionConnection: {
    edges: 'ContributionAnalyticsContributionEdge',
    nodes: 'ContributionAnalyticsContribution',
    pageInfo: 'PageInfo',
  },
  ContributionAnalyticsContributionEdge: {
    cursor: 'String',
    node: 'ContributionAnalyticsContribution',
  },
  CorpusCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  CoverageFuzzingCorpus: {
    id: 'AppSecFuzzingCoverageCorpusID',
    package: 'PackageDetailsType',
  },
  CoverageFuzzingCorpusConnection: {
    edges: 'CoverageFuzzingCorpusEdge',
    nodes: 'CoverageFuzzingCorpus',
    pageInfo: 'PageInfo',
  },
  CoverageFuzzingCorpusEdge: {
    cursor: 'String',
    node: 'CoverageFuzzingCorpus',
  },
  CreateAlertIssuePayload: {
    alert: 'AlertManagementAlert',
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
    todo: 'Todo',
  },
  CreateAnnotationPayload: {
    annotation: 'MetricsDashboardAnnotation',
    clientMutationId: 'String',
    errors: 'String',
  },
  CreateBoardPayload: {
    board: 'Board',
    clientMutationId: 'String',
    errors: 'String',
  },
  CreateBranchPayload: {
    branch: 'Branch',
    clientMutationId: 'String',
    errors: 'String',
  },
  CreateClusterAgentPayload: {
    clientMutationId: 'String',
    clusterAgent: 'ClusterAgent',
    errors: 'String',
  },
  CreateComplianceFrameworkPayload: {
    clientMutationId: 'String',
    errors: 'String',
    framework: 'ComplianceFramework',
  },
  CreateCustomEmojiPayload: {
    clientMutationId: 'String',
    customEmoji: 'CustomEmoji',
    errors: 'String',
  },
  CreateDiffNotePayload: {
    clientMutationId: 'String',
    errors: 'String',
    note: 'Note',
  },
  CreateEpicPayload: {
    clientMutationId: 'String',
    epic: 'Epic',
    errors: 'String',
  },
  CreateImageDiffNotePayload: {
    clientMutationId: 'String',
    errors: 'String',
    note: 'Note',
  },
  CreateIssuePayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  CreateIterationPayload: {
    clientMutationId: 'String',
    errors: 'String',
    iteration: 'Iteration',
  },
  CreateNotePayload: {
    clientMutationId: 'String',
    errors: 'String',
    note: 'Note',
  },
  CreateRequirementPayload: {
    clientMutationId: 'String',
    errors: 'String',
    requirement: 'Requirement',
  },
  CreateSnippetPayload: {
    clientMutationId: 'String',
    errors: 'String',
    snippet: 'Snippet',
  },
  CreateTestCasePayload: {
    clientMutationId: 'String',
    errors: 'String',
    testCase: 'Issue',
  },
  CurrentLicense: {
    activatedAt: 'Date',
    billableUsersCount: 'Int',
    blockChangesAt: 'Date',
    company: 'String',
    createdAt: 'Date',
    email: 'String',
    expiresAt: 'Date',
    id: 'ID',
    lastSync: 'Time',
    maximumUserCount: 'Int',
    name: 'String',
    plan: 'String',
    startsAt: 'Date',
    type: 'String',
    usersInLicenseCount: 'Int',
    usersOverLicenseCount: 'Int',
  },
  CurrentUserTodos: {
    '...on BoardEpic': 'BoardEpic',
    '...on Design': 'Design',
    '...on Epic': 'Epic',
    '...on EpicIssue': 'EpicIssue',
    '...on Issue': 'Issue',
    '...on MergeRequest': 'MergeRequest',
    '...on WorkItemWidgetCurrentUserTodos': 'WorkItemWidgetCurrentUserTodos',
    currentUserTodos: 'TodoConnection',
  },
  CustomEmoji: {
    external: 'Boolean',
    id: 'CustomEmojiID',
    name: 'String',
    url: 'String',
  },
  CustomEmojiConnection: {
    edges: 'CustomEmojiEdge',
    nodes: 'CustomEmoji',
    pageInfo: 'PageInfo',
  },
  CustomEmojiEdge: {
    cursor: 'String',
    node: 'CustomEmoji',
  },
  CustomerRelationsContact: {
    active: 'Boolean',
    createdAt: 'Time',
    description: 'String',
    email: 'String',
    firstName: 'String',
    id: 'ID',
    lastName: 'String',
    organization: 'CustomerRelationsOrganization',
    phone: 'String',
    updatedAt: 'Time',
  },
  CustomerRelationsContactConnection: {
    edges: 'CustomerRelationsContactEdge',
    nodes: 'CustomerRelationsContact',
    pageInfo: 'PageInfo',
  },
  CustomerRelationsContactCreatePayload: {
    clientMutationId: 'String',
    contact: 'CustomerRelationsContact',
    errors: 'String',
  },
  CustomerRelationsContactEdge: {
    cursor: 'String',
    node: 'CustomerRelationsContact',
  },
  CustomerRelationsContactUpdatePayload: {
    clientMutationId: 'String',
    contact: 'CustomerRelationsContact',
    errors: 'String',
  },
  CustomerRelationsOrganization: {
    active: 'Boolean',
    createdAt: 'Time',
    defaultRate: 'Float',
    description: 'String',
    id: 'ID',
    name: 'String',
    updatedAt: 'Time',
  },
  CustomerRelationsOrganizationConnection: {
    edges: 'CustomerRelationsOrganizationEdge',
    nodes: 'CustomerRelationsOrganization',
    pageInfo: 'PageInfo',
  },
  CustomerRelationsOrganizationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    organization: 'CustomerRelationsOrganization',
  },
  CustomerRelationsOrganizationEdge: {
    cursor: 'String',
    node: 'CustomerRelationsOrganization',
  },
  CustomerRelationsOrganizationUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    organization: 'CustomerRelationsOrganization',
  },
  DastOnDemandScanCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    pipelineUrl: 'String',
  },
  DastPreScanVerification: {
    preScanVerificationSteps: 'DastPreScanVerificationStep',
    status: 'DastPreScanVerificationStatus',
    valid: 'Boolean',
  },
  DastPreScanVerificationStep: {
    checkType: 'DastPreScanVerificationCheckType',
    errors: 'String',
    name: 'String',
    success: 'Boolean',
  },
  DastProfile: {
    branch: 'DastProfileBranch',
    dastPreScanVerification: 'DastPreScanVerification',
    dastProfileSchedule: 'DastProfileSchedule',
    dastScannerProfile: 'DastScannerProfile',
    dastSiteProfile: 'DastSiteProfile',
    description: 'String',
    editPath: 'String',
    id: 'DastProfileID',
    name: 'String',
    tagList: 'String',
  },
  DastProfileBranch: {
    exists: 'Boolean',
    name: 'String',
  },
  DastProfileCadence: {
    duration: 'Int',
    unit: 'DastProfileCadenceUnit',
  },
  DastProfileConnection: {
    count: 'Int',
    edges: 'DastProfileEdge',
    nodes: 'DastProfile',
    pageInfo: 'PageInfo',
  },
  DastProfileCreatePayload: {
    clientMutationId: 'String',
    dastProfile: 'DastProfile',
    errors: 'String',
    pipelineUrl: 'String',
  },
  DastProfileDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DastProfileEdge: {
    cursor: 'String',
    node: 'DastProfile',
  },
  DastProfileRunPayload: {
    clientMutationId: 'String',
    errors: 'String',
    pipelineUrl: 'String',
  },
  DastProfileSchedule: {
    active: 'Boolean',
    cadence: 'DastProfileCadence',
    id: 'DastProfileScheduleID',
    nextRunAt: 'Time',
    ownerValid: 'Boolean',
    startsAt: 'Time',
    timezone: 'String',
  },
  DastProfileUpdatePayload: {
    clientMutationId: 'String',
    dastProfile: 'DastProfile',
    errors: 'String',
    pipelineUrl: 'String',
  },
  DastScannerProfile: {
    editPath: 'String',
    id: 'DastScannerProfileID',
    profileName: 'String',
    referencedInSecurityPolicies: 'String',
    scanType: 'DastScanTypeEnum',
    showDebugMessages: 'Boolean',
    spiderTimeout: 'Int',
    tagList: 'String',
    targetTimeout: 'Int',
    useAjaxSpider: 'Boolean',
  },
  DastScannerProfileConnection: {
    edges: 'DastScannerProfileEdge',
    nodes: 'DastScannerProfile',
    pageInfo: 'PageInfo',
  },
  DastScannerProfileCreatePayload: {
    clientMutationId: 'String',
    dastScannerProfile: 'DastScannerProfile',
    errors: 'String',
    id: 'DastScannerProfileID',
  },
  DastScannerProfileDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DastScannerProfileEdge: {
    cursor: 'String',
    node: 'DastScannerProfile',
  },
  DastScannerProfileUpdatePayload: {
    clientMutationId: 'String',
    dastScannerProfile: 'DastScannerProfile',
    errors: 'String',
    id: 'DastScannerProfileID',
  },
  DastSiteProfile: {
    auth: 'DastSiteProfileAuth',
    editPath: 'String',
    excludedUrls: 'String',
    id: 'DastSiteProfileID',
    normalizedTargetUrl: 'String',
    profileName: 'String',
    referencedInSecurityPolicies: 'String',
    requestHeaders: 'String',
    scanFilePath: 'String',
    scanMethod: 'DastScanMethodType',
    targetType: 'DastTargetTypeEnum',
    targetUrl: 'String',
    userPermissions: 'DastSiteProfilePermissions',
    validationStartedAt: 'Time',
    validationStatus: 'DastSiteProfileValidationStatusEnum',
  },
  DastSiteProfileAuth: {
    enabled: 'Boolean',
    password: 'String',
    passwordField: 'String',
    submitField: 'String',
    url: 'String',
    username: 'String',
    usernameField: 'String',
  },
  DastSiteProfileConnection: {
    edges: 'DastSiteProfileEdge',
    nodes: 'DastSiteProfile',
    pageInfo: 'PageInfo',
  },
  DastSiteProfileCreatePayload: {
    clientMutationId: 'String',
    dastSiteProfile: 'DastSiteProfile',
    errors: 'String',
    id: 'DastSiteProfileID',
  },
  DastSiteProfileDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DastSiteProfileEdge: {
    cursor: 'String',
    node: 'DastSiteProfile',
  },
  DastSiteProfilePermissions: {
    createOnDemandDastScan: 'Boolean',
  },
  DastSiteProfileUpdatePayload: {
    clientMutationId: 'String',
    dastSiteProfile: 'DastSiteProfile',
    errors: 'String',
    id: 'DastSiteProfileID',
  },
  DastSiteTokenCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    id: 'DastSiteTokenID',
    status: 'DastSiteProfileValidationStatusEnum',
    token: 'String',
  },
  DastSiteValidation: {
    id: 'DastSiteValidationID',
    normalizedTargetUrl: 'String',
    status: 'DastSiteProfileValidationStatusEnum',
    validationStartedAt: 'Time',
  },
  DastSiteValidationConnection: {
    edges: 'DastSiteValidationEdge',
    nodes: 'DastSiteValidation',
    pageInfo: 'PageInfo',
  },
  DastSiteValidationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    id: 'DastSiteValidationID',
    status: 'DastSiteProfileValidationStatusEnum',
  },
  DastSiteValidationEdge: {
    cursor: 'String',
    node: 'DastSiteValidation',
  },
  DastSiteValidationRevokePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DeleteAnnotationPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DeleteJobsResponse: {
    completed: 'Boolean',
    deletedJobs: 'Int',
    queueSize: 'Int',
  },
  DeletedNote: {
    discussionId: 'DiscussionID',
    id: 'NoteID',
    lastDiscussionNote: 'Boolean',
  },
  Dependency: {
    id: 'GlobalID',
    location: 'Location',
    name: 'String',
    packager: 'PackageManager',
    version: 'String',
  },
  DependencyConnection: {
    edges: 'DependencyEdge',
    nodes: 'Dependency',
    pageInfo: 'PageInfo',
  },
  DependencyEdge: {
    cursor: 'String',
    node: 'Dependency',
  },
  DependencyLinkMetadata: {
    '...on NugetDependencyLinkMetadata': 'NugetDependencyLinkMetadata',
  },
  DependencyProxyBlob: {
    createdAt: 'Time',
    fileName: 'String',
    size: 'String',
    updatedAt: 'Time',
  },
  DependencyProxyBlobConnection: {
    edges: 'DependencyProxyBlobEdge',
    nodes: 'DependencyProxyBlob',
    pageInfo: 'PageInfo',
  },
  DependencyProxyBlobEdge: {
    cursor: 'String',
    node: 'DependencyProxyBlob',
  },
  DependencyProxyBlobRegistry: {
    createdAt: 'Time',
    dependencyProxyBlobId: 'ID',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  DependencyProxyBlobRegistryConnection: {
    edges: 'DependencyProxyBlobRegistryEdge',
    nodes: 'DependencyProxyBlobRegistry',
    pageInfo: 'PageInfo',
  },
  DependencyProxyBlobRegistryEdge: {
    cursor: 'String',
    node: 'DependencyProxyBlobRegistry',
  },
  DependencyProxyImageTtlGroupPolicy: {
    createdAt: 'Time',
    enabled: 'Boolean',
    ttl: 'Int',
    updatedAt: 'Time',
  },
  DependencyProxyManifest: {
    createdAt: 'Time',
    digest: 'String',
    fileName: 'String',
    id: 'DependencyProxyManifestID',
    imageName: 'String',
    size: 'String',
    status: 'DependencyProxyManifestStatus',
    updatedAt: 'Time',
  },
  DependencyProxyManifestConnection: {
    edges: 'DependencyProxyManifestEdge',
    nodes: 'DependencyProxyManifest',
    pageInfo: 'PageInfo',
  },
  DependencyProxyManifestEdge: {
    cursor: 'String',
    node: 'DependencyProxyManifest',
  },
  DependencyProxyManifestRegistry: {
    createdAt: 'Time',
    dependencyProxyManifestId: 'ID',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  DependencyProxyManifestRegistryConnection: {
    edges: 'DependencyProxyManifestRegistryEdge',
    nodes: 'DependencyProxyManifestRegistry',
    pageInfo: 'PageInfo',
  },
  DependencyProxyManifestRegistryEdge: {
    cursor: 'String',
    node: 'DependencyProxyManifestRegistry',
  },
  DependencyProxySetting: {
    enabled: 'Boolean',
  },
  Deployment: {
    approvalSummary: 'DeploymentApprovalSummary',
    approvals: 'DeploymentApproval',
    commit: 'Commit',
    createdAt: 'Time',
    finishedAt: 'Time',
    id: 'ID',
    iid: 'ID',
    job: 'CiJob',
    pendingApprovalCount: 'Int',
    ref: 'String',
    sha: 'String',
    status: 'DeploymentStatus',
    tag: 'Boolean',
    tags: 'DeploymentTag',
    triggerer: 'UserCore',
    updatedAt: 'Time',
    userPermissions: 'DeploymentPermissions',
  },
  DeploymentApproval: {
    comment: 'String',
    createdAt: 'Time',
    status: 'DeploymentsApprovalStatus',
    updatedAt: 'Time',
    user: 'UserCore',
  },
  DeploymentApprovalSummary: {
    rules: 'ProtectedEnvironmentApprovalRuleForSummary',
    status: 'DeploymentApprovalSummaryStatus',
    totalPendingApprovalCount: 'Int',
    totalRequiredApprovals: 'Int',
  },
  DeploymentConnection: {
    edges: 'DeploymentEdge',
    nodes: 'Deployment',
    pageInfo: 'PageInfo',
  },
  DeploymentEdge: {
    cursor: 'String',
    node: 'Deployment',
  },
  DeploymentPermissions: {
    approveDeployment: 'Boolean',
    destroyDeployment: 'Boolean',
    updateDeployment: 'Boolean',
  },
  DeploymentTag: {
    name: 'String',
    path: 'String',
  },
  DescriptionVersion: {
    canDelete: 'Boolean',
    deletePath: 'String',
    deleted: 'Boolean',
    description: 'String',
    diff: 'String',
    diffPath: 'String',
    id: 'DescriptionVersionID',
  },
  Design: {
    commenters: 'UserCoreConnection',
    currentUserTodos: 'TodoConnection',
    description: 'String',
    descriptionHtml: 'String',
    diffRefs: 'DiffRefs',
    discussions: 'DiscussionConnection',
    event: 'DesignVersionEvent',
    filename: 'String',
    fullPath: 'String',
    id: 'ID',
    image: 'String',
    imageV432x230: 'String',
    issue: 'Issue',
    notes: 'NoteConnection',
    notesCount: 'Int',
    project: 'Project',
    versions: 'DesignVersionConnection',
    webUrl: 'String',
  },
  DesignAtVersion: {
    design: 'Design',
    diffRefs: 'DiffRefs',
    event: 'DesignVersionEvent',
    filename: 'String',
    fullPath: 'String',
    id: 'ID',
    image: 'String',
    imageV432x230: 'String',
    issue: 'Issue',
    notesCount: 'Int',
    project: 'Project',
    version: 'DesignVersion',
  },
  DesignAtVersionConnection: {
    edges: 'DesignAtVersionEdge',
    nodes: 'DesignAtVersion',
    pageInfo: 'PageInfo',
  },
  DesignAtVersionEdge: {
    cursor: 'String',
    node: 'DesignAtVersion',
  },
  DesignCollection: {
    copyState: 'DesignCollectionCopyState',
    design: 'Design',
    designAtVersion: 'DesignAtVersion',
    designs: 'DesignConnection',
    issue: 'Issue',
    project: 'Project',
    version: 'DesignVersion',
    versions: 'DesignVersionConnection',
  },
  DesignConnection: {
    edges: 'DesignEdge',
    nodes: 'Design',
    pageInfo: 'PageInfo',
  },
  DesignEdge: {
    cursor: 'String',
    node: 'Design',
  },
  DesignFields: {
    '...on Design': 'Design',
    '...on DesignAtVersion': 'DesignAtVersion',
    diffRefs: 'DiffRefs',
    event: 'DesignVersionEvent',
    filename: 'String',
    fullPath: 'String',
    id: 'ID',
    image: 'String',
    imageV432x230: 'String',
    issue: 'Issue',
    notesCount: 'Int',
    project: 'Project',
  },
  DesignManagement: {
    designAtVersion: 'DesignAtVersion',
    version: 'DesignVersion',
  },
  DesignManagementDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
    version: 'DesignVersion',
  },
  DesignManagementMovePayload: {
    clientMutationId: 'String',
    designCollection: 'DesignCollection',
    errors: 'String',
  },
  DesignManagementRepositoryRegistry: {
    createdAt: 'Time',
    designManagementRepositoryId: 'ID',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  DesignManagementRepositoryRegistryConnection: {
    edges: 'DesignManagementRepositoryRegistryEdge',
    nodes: 'DesignManagementRepositoryRegistry',
    pageInfo: 'PageInfo',
  },
  DesignManagementRepositoryRegistryEdge: {
    cursor: 'String',
    node: 'DesignManagementRepositoryRegistry',
  },
  DesignManagementUpdatePayload: {
    clientMutationId: 'String',
    design: 'Design',
    errors: 'String',
  },
  DesignManagementUploadPayload: {
    clientMutationId: 'String',
    designs: 'Design',
    errors: 'String',
    skippedDesigns: 'Design',
  },
  DesignVersion: {
    author: 'UserCore',
    createdAt: 'Time',
    designAtVersion: 'DesignAtVersion',
    designs: 'DesignConnection',
    designsAtVersion: 'DesignAtVersionConnection',
    id: 'ID',
    sha: 'ID',
  },
  DesignVersionConnection: {
    edges: 'DesignVersionEdge',
    nodes: 'DesignVersion',
    pageInfo: 'PageInfo',
  },
  DesignVersionEdge: {
    cursor: 'String',
    node: 'DesignVersion',
  },
  DestroyBoardListPayload: {
    clientMutationId: 'String',
    errors: 'String',
    list: 'BoardList',
  },
  DestroyBoardPayload: {
    board: 'Board',
    clientMutationId: 'String',
    errors: 'String',
  },
  DestroyComplianceFrameworkPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DestroyContainerRepositoryPayload: {
    clientMutationId: 'String',
    containerRepository: 'ContainerRepository',
    errors: 'String',
  },
  DestroyContainerRepositoryTagsPayload: {
    clientMutationId: 'String',
    deletedTagNames: 'String',
    errors: 'String',
  },
  DestroyCustomEmojiPayload: {
    clientMutationId: 'String',
    customEmoji: 'CustomEmoji',
    errors: 'String',
  },
  DestroyEpicBoardPayload: {
    clientMutationId: 'String',
    epicBoard: 'EpicBoard',
    errors: 'String',
  },
  DestroyNotePayload: {
    clientMutationId: 'String',
    errors: 'String',
    note: 'Note',
  },
  DestroyPackageFilePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DestroyPackageFilesPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DestroyPackagePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DestroyPackagesPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  DestroySnippetPayload: {
    clientMutationId: 'String',
    errors: 'String',
    snippet: 'Snippet',
  },
  DetailedStatus: {
    action: 'StatusAction',
    detailsPath: 'String',
    favicon: 'String',
    group: 'String',
    hasDetails: 'Boolean',
    icon: 'String',
    id: 'String',
    label: 'String',
    text: 'String',
    tooltip: 'String',
  },
  DevopsAdoptionEnabledNamespace: {
    displayNamespace: 'Namespace',
    id: 'ID',
    latestSnapshot: 'DevopsAdoptionSnapshot',
    namespace: 'Namespace',
    snapshots: 'DevopsAdoptionSnapshotConnection',
  },
  DevopsAdoptionEnabledNamespaceConnection: {
    edges: 'DevopsAdoptionEnabledNamespaceEdge',
    nodes: 'DevopsAdoptionEnabledNamespace',
    pageInfo: 'PageInfo',
  },
  DevopsAdoptionEnabledNamespaceEdge: {
    cursor: 'String',
    node: 'DevopsAdoptionEnabledNamespace',
  },
  DevopsAdoptionSnapshot: {
    codeOwnersUsedCount: 'Int',
    coverageFuzzingEnabledCount: 'Int',
    dastEnabledCount: 'Int',
    dependencyScanningEnabledCount: 'Int',
    deploySucceeded: 'Boolean',
    endTime: 'Time',
    issueOpened: 'Boolean',
    mergeRequestApproved: 'Boolean',
    mergeRequestOpened: 'Boolean',
    pipelineSucceeded: 'Boolean',
    recordedAt: 'Time',
    runnerConfigured: 'Boolean',
    sastEnabledCount: 'Int',
    startTime: 'Time',
    totalProjectsCount: 'Int',
    vulnerabilityManagementUsedCount: 'Int',
  },
  DevopsAdoptionSnapshotConnection: {
    edges: 'DevopsAdoptionSnapshotEdge',
    nodes: 'DevopsAdoptionSnapshot',
    pageInfo: 'PageInfo',
  },
  DevopsAdoptionSnapshotEdge: {
    cursor: 'String',
    node: 'DevopsAdoptionSnapshot',
  },
  DiffPosition: {
    diffRefs: 'DiffRefs',
    filePath: 'String',
    height: 'Int',
    newLine: 'Int',
    newPath: 'String',
    oldLine: 'Int',
    oldPath: 'String',
    positionType: 'DiffPositionType',
    width: 'Int',
    x: 'Int',
    y: 'Int',
  },
  DiffRefs: {
    baseSha: 'String',
    headSha: 'String',
    startSha: 'String',
  },
  DiffStats: {
    additions: 'Int',
    deletions: 'Int',
    path: 'String',
  },
  DiffStatsSummary: {
    additions: 'Int',
    changes: 'Int',
    deletions: 'Int',
    fileCount: 'Int',
  },
  DisableDevopsAdoptionNamespacePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  Discussion: {
    createdAt: 'Time',
    id: 'DiscussionID',
    noteable: 'NoteableType',
    notes: 'NoteConnection',
    replyId: 'DiscussionID',
    resolvable: 'Boolean',
    resolved: 'Boolean',
    resolvedAt: 'Time',
    resolvedBy: 'UserCore',
  },
  DiscussionConnection: {
    edges: 'DiscussionEdge',
    nodes: 'Discussion',
    pageInfo: 'PageInfo',
  },
  DiscussionEdge: {
    cursor: 'String',
    node: 'Discussion',
  },
  DiscussionToggleResolvePayload: {
    clientMutationId: 'String',
    discussion: 'Discussion',
    errors: 'String',
  },
  Dora: {
    metrics: 'DoraMetric',
  },
  DoraMetric: {
    changeFailureRate: 'Float',
    date: 'String',
    deploymentFrequency: 'Float',
    leadTimeForChanges: 'Float',
    timeToRestoreService: 'Float',
    value: 'Float',
  },
  DoraPerformanceScoreCount: {
    highProjectsCount: 'Int',
    lowProjectsCount: 'Int',
    mediumProjectsCount: 'Int',
    metricName: 'String',
    noDataProjectsCount: 'Int',
  },
  DoraPerformanceScoreCountConnection: {
    edges: 'DoraPerformanceScoreCountEdge',
    nodes: 'DoraPerformanceScoreCount',
    pageInfo: 'PageInfo',
  },
  DoraPerformanceScoreCountEdge: {
    cursor: 'String',
    node: 'DoraPerformanceScoreCount',
  },
  EchoCreatePayload: {
    clientMutationId: 'String',
    echoes: 'String',
    errors: 'String',
  },
  EgressNode: {
    artifactsEgress: 'BigInt',
    date: 'String',
    packagesEgress: 'BigInt',
    registryEgress: 'BigInt',
    repositoryEgress: 'BigInt',
    totalEgress: 'BigInt',
  },
  EgressNodeConnection: {
    edges: 'EgressNodeEdge',
    nodes: 'EgressNode',
    pageInfo: 'PageInfo',
  },
  EgressNodeEdge: {
    cursor: 'String',
    node: 'EgressNode',
  },
  Email: {
    confirmedAt: 'Time',
    createdAt: 'Time',
    email: 'String',
    id: 'ID',
    updatedAt: 'Time',
  },
  EmailConnection: {
    edges: 'EmailEdge',
    nodes: 'Email',
    pageInfo: 'PageInfo',
  },
  EmailEdge: {
    cursor: 'String',
    node: 'Email',
  },
  EnableDevopsAdoptionNamespacePayload: {
    clientMutationId: 'String',
    enabledNamespace: 'DevopsAdoptionEnabledNamespace',
    errors: 'String',
  },
  Entry: {
    '...on Blob': 'Blob',
    '...on Submodule': 'Submodule',
    '...on TreeEntry': 'TreeEntry',
    flatPath: 'String',
    id: 'ID',
    name: 'String',
    path: 'String',
    sha: 'String',
    type: 'EntryType',
  },
  Environment: {
    autoDeleteAt: 'Time',
    autoStopAt: 'Time',
    clusterAgent: 'ClusterAgent',
    createdAt: 'Time',
    deployFreezes: 'CiFreezePeriod',
    deployments: 'DeploymentConnection',
    environmentType: 'String',
    externalUrl: 'String',
    id: 'ID',
    lastDeployment: 'Deployment',
    latestOpenedMostSevereAlert: 'AlertManagementAlert',
    metricsDashboard: 'MetricsDashboard',
    name: 'String',
    path: 'String',
    protectedEnvironments: 'ProtectedEnvironmentConnection',
    slug: 'String',
    state: 'String',
    tier: 'DeploymentTier',
    updatedAt: 'Time',
    userPermissions: 'EnvironmentPermissions',
  },
  EnvironmentConnection: {
    edges: 'EnvironmentEdge',
    nodes: 'Environment',
    pageInfo: 'PageInfo',
  },
  EnvironmentCreatePayload: {
    clientMutationId: 'String',
    environment: 'Environment',
    errors: 'String',
  },
  EnvironmentDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  EnvironmentEdge: {
    cursor: 'String',
    node: 'Environment',
  },
  EnvironmentPermissions: {
    destroyEnvironment: 'Boolean',
    stopEnvironment: 'Boolean',
    updateEnvironment: 'Boolean',
  },
  EnvironmentStopPayload: {
    clientMutationId: 'String',
    environment: 'Environment',
    errors: 'String',
  },
  EnvironmentUpdatePayload: {
    clientMutationId: 'String',
    environment: 'Environment',
    errors: 'String',
  },
  EnvironmentsCanaryIngressUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  Epic: {
    ancestors: 'EpicConnection',
    author: 'UserCore',
    awardEmoji: 'AwardEmojiConnection',
    blocked: 'Boolean',
    blockedByCount: 'Int',
    blockedByEpics: 'EpicConnection',
    blockingCount: 'Int',
    children: 'EpicConnection',
    closedAt: 'Time',
    color: 'String',
    commenters: 'UserCoreConnection',
    confidential: 'Boolean',
    createdAt: 'Time',
    currentUserTodos: 'TodoConnection',
    defaultProjectForIssueCreation: 'Project',
    descendantCounts: 'EpicDescendantCount',
    descendantWeightSum: 'EpicDescendantWeights',
    description: 'String',
    descriptionHtml: 'String',
    discussions: 'DiscussionConnection',
    downvotes: 'Int',
    dueDate: 'Time',
    dueDateFixed: 'Time',
    dueDateFromInheritedSource: 'Time',
    dueDateFromMilestones: 'Time',
    dueDateIsFixed: 'Boolean',
    events: 'EventConnection',
    group: 'Group',
    hasChildren: 'Boolean',
    hasIssues: 'Boolean',
    hasParent: 'Boolean',
    healthStatus: 'EpicHealthStatus',
    id: 'ID',
    iid: 'ID',
    issues: 'EpicIssueConnection',
    labels: 'LabelConnection',
    notes: 'NoteConnection',
    parent: 'Epic',
    participants: 'UserCoreConnection',
    reference: 'String',
    relationPath: 'String',
    relativePosition: 'Int',
    startDate: 'Time',
    startDateFixed: 'Time',
    startDateFromInheritedSource: 'Time',
    startDateFromMilestones: 'Time',
    startDateIsFixed: 'Boolean',
    state: 'EpicState',
    subscribed: 'Boolean',
    textColor: 'String',
    title: 'String',
    titleHtml: 'String',
    updatedAt: 'Time',
    upvotes: 'Int',
    userDiscussionsCount: 'Int',
    userNotesCount: 'Int',
    userPermissions: 'EpicPermissions',
    webPath: 'String',
    webUrl: 'String',
  },
  EpicAddIssuePayload: {
    clientMutationId: 'String',
    epic: 'Epic',
    epicIssue: 'EpicIssue',
    errors: 'String',
  },
  EpicBoard: {
    displayColors: 'Boolean',
    hideBacklogList: 'Boolean',
    hideClosedList: 'Boolean',
    id: 'BoardsEpicBoardID',
    labels: 'LabelConnection',
    lists: 'EpicListConnection',
    name: 'String',
    webPath: 'String',
    webUrl: 'String',
  },
  EpicBoardConnection: {
    edges: 'EpicBoardEdge',
    nodes: 'EpicBoard',
    pageInfo: 'PageInfo',
  },
  EpicBoardCreatePayload: {
    clientMutationId: 'String',
    epicBoard: 'EpicBoard',
    errors: 'String',
  },
  EpicBoardEdge: {
    cursor: 'String',
    node: 'EpicBoard',
  },
  EpicBoardListCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    list: 'EpicList',
  },
  EpicBoardListDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    list: 'EpicList',
  },
  EpicBoardUpdatePayload: {
    clientMutationId: 'String',
    epicBoard: 'EpicBoard',
    errors: 'String',
  },
  EpicConnection: {
    count: 'Int',
    edges: 'EpicEdge',
    nodes: 'Epic',
    pageInfo: 'PageInfo',
  },
  EpicDescendantCount: {
    closedEpics: 'Int',
    closedIssues: 'Int',
    openedEpics: 'Int',
    openedIssues: 'Int',
  },
  EpicDescendantWeights: {
    closedIssues: 'Int',
    openedIssues: 'Int',
  },
  EpicEdge: {
    cursor: 'String',
    node: 'Epic',
  },
  EpicHealthStatus: {
    issuesAtRisk: 'Int',
    issuesNeedingAttention: 'Int',
    issuesOnTrack: 'Int',
  },
  EpicIssue: {
    alertManagementAlert: 'AlertManagementAlert',
    alertManagementAlerts: 'AlertManagementAlertConnection',
    assignees: 'UserCoreConnection',
    author: 'UserCore',
    blocked: 'Boolean',
    blockedByCount: 'Int',
    blockedByIssues: 'IssueConnection',
    blockingCount: 'Int',
    closedAsDuplicateOf: 'Issue',
    closedAt: 'Time',
    commenters: 'UserCoreConnection',
    confidential: 'Boolean',
    createNoteEmail: 'String',
    createdAt: 'Time',
    currentUserTodos: 'TodoConnection',
    customerRelationsContacts: 'CustomerRelationsContactConnection',
    description: 'String',
    descriptionHtml: 'String',
    designCollection: 'DesignCollection',
    discussionLocked: 'Boolean',
    discussions: 'DiscussionConnection',
    downvotes: 'Int',
    dueDate: 'Time',
    emailsDisabled: 'Boolean',
    epic: 'Epic',
    epicIssueId: 'ID',
    escalationPolicy: 'EscalationPolicyType',
    escalationStatus: 'IssueEscalationStatus',
    hasEpic: 'Boolean',
    healthStatus: 'HealthStatus',
    hidden: 'Boolean',
    humanTimeEstimate: 'String',
    humanTotalTimeSpent: 'String',
    id: 'ID',
    iid: 'ID',
    issuableResourceLinks: 'IssuableResourceLinkConnection',
    iteration: 'Iteration',
    labels: 'LabelConnection',
    mergeRequestsCount: 'Int',
    metricImages: 'MetricImage',
    milestone: 'Milestone',
    moved: 'Boolean',
    movedTo: 'Issue',
    notes: 'NoteConnection',
    participants: 'UserCoreConnection',
    projectId: 'Int',
    reference: 'String',
    relatedMergeRequests: 'MergeRequestConnection',
    relatedVulnerabilities: 'VulnerabilityConnection',
    relationPath: 'String',
    relativePosition: 'Int',
    severity: 'IssuableSeverity',
    slaDueAt: 'Time',
    state: 'IssueState',
    statusPagePublishedIncident: 'Boolean',
    subscribed: 'Boolean',
    taskCompletionStatus: 'TaskCompletionStatus',
    timeEstimate: 'Int',
    timelogs: 'TimelogConnection',
    title: 'String',
    titleHtml: 'String',
    totalTimeSpent: 'Int',
    type: 'IssueType',
    updatedAt: 'Time',
    updatedBy: 'UserCore',
    upvotes: 'Int',
    userDiscussionsCount: 'Int',
    userNotesCount: 'Int',
    userPermissions: 'IssuePermissions',
    webPath: 'String',
    webUrl: 'String',
    weight: 'Int',
  },
  EpicIssueConnection: {
    count: 'Int',
    edges: 'EpicIssueEdge',
    nodes: 'EpicIssue',
    pageInfo: 'PageInfo',
    weight: 'Int',
  },
  EpicIssueEdge: {
    cursor: 'String',
    node: 'EpicIssue',
  },
  EpicList: {
    collapsed: 'Boolean',
    epics: 'EpicConnection',
    epicsCount: 'Int',
    id: 'BoardsEpicListID',
    label: 'Label',
    listType: 'String',
    metadata: 'EpicListMetadata',
    position: 'Int',
    title: 'String',
  },
  EpicListConnection: {
    edges: 'EpicListEdge',
    nodes: 'EpicList',
    pageInfo: 'PageInfo',
  },
  EpicListEdge: {
    cursor: 'String',
    node: 'EpicList',
  },
  EpicListMetadata: {
    epicsCount: 'Int',
    totalWeight: 'Int',
  },
  EpicMoveListPayload: {
    clientMutationId: 'String',
    epic: 'Epic',
    errors: 'String',
  },
  EpicPermissions: {
    adminEpic: 'Boolean',
    awardEmoji: 'Boolean',
    createEpic: 'Boolean',
    createNote: 'Boolean',
    destroyEpic: 'Boolean',
    readEpic: 'Boolean',
    readEpicIid: 'Boolean',
    updateEpic: 'Boolean',
  },
  EpicSetSubscriptionPayload: {
    clientMutationId: 'String',
    epic: 'Epic',
    errors: 'String',
  },
  EpicTreeReorderPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  EscalationPolicyCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    escalationPolicy: 'EscalationPolicyType',
  },
  EscalationPolicyDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    escalationPolicy: 'EscalationPolicyType',
  },
  EscalationPolicyType: {
    description: 'String',
    id: 'IncidentManagementEscalationPolicyID',
    name: 'String',
    rules: 'EscalationRuleType',
  },
  EscalationPolicyTypeConnection: {
    edges: 'EscalationPolicyTypeEdge',
    nodes: 'EscalationPolicyType',
    pageInfo: 'PageInfo',
  },
  EscalationPolicyTypeEdge: {
    cursor: 'String',
    node: 'EscalationPolicyType',
  },
  EscalationPolicyUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    escalationPolicy: 'EscalationPolicyType',
  },
  EscalationRuleType: {
    elapsedTimeSeconds: 'Int',
    id: 'IncidentManagementEscalationRuleID',
    oncallSchedule: 'IncidentManagementOncallSchedule',
    status: 'EscalationRuleStatus',
    user: 'UserCore',
  },
  Event: {
    action: 'EventAction',
    author: 'UserCore',
    createdAt: 'Time',
    id: 'ID',
    updatedAt: 'Time',
  },
  EventConnection: {
    edges: 'EventEdge',
    nodes: 'Event',
    pageInfo: 'PageInfo',
  },
  EventEdge: {
    cursor: 'String',
    node: 'Event',
  },
  Eventable: {
    '...on BoardEpic': 'BoardEpic',
    '...on Epic': 'Epic',
    events: 'EventConnection',
  },
  ExportRequirementsPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  ExternalAuditEventDestination: {
    destinationUrl: 'String',
    eventTypeFilters: 'String',
    group: 'Group',
    headers: 'AuditEventStreamingHeaderConnection',
    id: 'ID',
    verificationToken: 'String',
  },
  ExternalAuditEventDestinationConnection: {
    edges: 'ExternalAuditEventDestinationEdge',
    nodes: 'ExternalAuditEventDestination',
    pageInfo: 'PageInfo',
  },
  ExternalAuditEventDestinationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    externalAuditEventDestination: 'ExternalAuditEventDestination',
  },
  ExternalAuditEventDestinationDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  ExternalAuditEventDestinationEdge: {
    cursor: 'String',
    node: 'ExternalAuditEventDestination',
  },
  ExternalAuditEventDestinationInterface: {
    '...on ExternalAuditEventDestination': 'ExternalAuditEventDestination',
    '...on InstanceExternalAuditEventDestination': 'InstanceExternalAuditEventDestination',
    destinationUrl: 'String',
    id: 'ID',
    verificationToken: 'String',
  },
  ExternalAuditEventDestinationUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    externalAuditEventDestination: 'ExternalAuditEventDestination',
  },
  ExternalIssue: {
    createdAt: 'Time',
    externalTracker: 'String',
    relativeReference: 'String',
    status: 'String',
    title: 'String',
    updatedAt: 'Time',
    webUrl: 'String',
  },
  ExternalStatusCheck: {
    externalUrl: 'String',
    id: 'GlobalID',
    name: 'String',
  },
  ExternalStatusCheckConnection: {
    edges: 'ExternalStatusCheckEdge',
    nodes: 'ExternalStatusCheck',
    pageInfo: 'PageInfo',
  },
  ExternalStatusCheckEdge: {
    cursor: 'String',
    node: 'ExternalStatusCheck',
  },
  FileUpload: {
    id: 'UploadID',
    path: 'String',
    size: 'Int',
  },
  FindingReportsComparer: {
    report: 'ComparedSecurityReport',
    status: 'FindingReportsComparerStatus',
    statusReason: 'String',
  },
  Forecast: {
    status: 'ForecastStatus',
    values: 'ForecastDatapointConnection',
  },
  ForecastDatapoint: {
    datapoint: 'String',
    value: 'Float',
  },
  ForecastDatapointConnection: {
    edges: 'ForecastDatapointEdge',
    nodes: 'ForecastDatapoint',
    pageInfo: 'PageInfo',
  },
  ForecastDatapointEdge: {
    cursor: 'String',
    node: 'ForecastDatapoint',
  },
  ForkDetails: {
    ahead: 'Int',
    behind: 'Int',
    hasConflicts: 'Boolean',
    isSyncing: 'Boolean',
  },
  GeoNode: {
    ciSecureFileRegistries: 'CiSecureFileRegistryConnection',
    containerRepositoriesMaxCapacity: 'Int',
    containerRepositoryRegistries: 'ContainerRepositoryRegistryConnection',
    dependencyProxyBlobRegistries: 'DependencyProxyBlobRegistryConnection',
    dependencyProxyManifestRegistries: 'DependencyProxyManifestRegistryConnection',
    designManagementRepositoryRegistries: 'DesignManagementRepositoryRegistryConnection',
    enabled: 'Boolean',
    filesMaxCapacity: 'Int',
    groupWikiRepositoryRegistries: 'GroupWikiRepositoryRegistryConnection',
    id: 'ID',
    internalUrl: 'String',
    jobArtifactRegistries: 'JobArtifactRegistryConnection',
    lfsObjectRegistries: 'LfsObjectRegistryConnection',
    mergeRequestDiffRegistries: 'MergeRequestDiffRegistryConnection',
    minimumReverificationInterval: 'Int',
    name: 'String',
    packageFileRegistries: 'PackageFileRegistryConnection',
    pagesDeploymentRegistries: 'PagesDeploymentRegistryConnection',
    pipelineArtifactRegistries: 'PipelineArtifactRegistryConnection',
    primary: 'Boolean',
    projectWikiRepositoryRegistries: 'ProjectWikiRepositoryRegistryConnection',
    reposMaxCapacity: 'Int',
    selectiveSyncNamespaces: 'NamespaceConnection',
    selectiveSyncShards: 'String',
    selectiveSyncType: 'String',
    snippetRepositoryRegistries: 'SnippetRepositoryRegistryConnection',
    syncObjectStorage: 'Boolean',
    terraformStateVersionRegistries: 'TerraformStateVersionRegistryConnection',
    uploadRegistries: 'UploadRegistryConnection',
    url: 'String',
    verificationMaxCapacity: 'Int',
  },
  GeoRegistriesUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    registry: 'Registrable',
  },
  GitlabSubscriptionActivatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    futureSubscriptions: 'SubscriptionFutureEntry',
    license: 'CurrentLicense',
  },
  GoogleCloudLoggingConfigurationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    googleCloudLoggingConfiguration: 'GoogleCloudLoggingConfigurationType',
  },
  GoogleCloudLoggingConfigurationDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  GoogleCloudLoggingConfigurationType: {
    clientEmail: 'String',
    googleProjectIdName: 'String',
    group: 'Group',
    id: 'ID',
    logIdName: 'String',
    privateKey: 'String',
  },
  GoogleCloudLoggingConfigurationTypeConnection: {
    edges: 'GoogleCloudLoggingConfigurationTypeEdge',
    nodes: 'GoogleCloudLoggingConfigurationType',
    pageInfo: 'PageInfo',
  },
  GoogleCloudLoggingConfigurationTypeEdge: {
    cursor: 'String',
    node: 'GoogleCloudLoggingConfigurationType',
  },
  GoogleCloudLoggingConfigurationUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    googleCloudLoggingConfiguration: 'GoogleCloudLoggingConfigurationType',
  },
  GpgSignature: {
    commitSha: 'String',
    gpgKeyPrimaryKeyid: 'String',
    gpgKeyUserEmail: 'String',
    gpgKeyUserName: 'String',
    project: 'Project',
    user: 'UserCore',
    verificationStatus: 'VerificationStatus',
  },
  GrafanaIntegration: {
    createdAt: 'Time',
    enabled: 'Boolean',
    grafanaUrl: 'String',
    id: 'ID',
    updatedAt: 'Time',
  },
  Group: {
    achievements: 'AchievementConnection',
    actualRepositorySizeLimit: 'Float',
    additionalPurchasedStorageSize: 'Float',
    allowStaleRunnerPruning: 'Boolean',
    autoDevopsEnabled: 'Boolean',
    avatarUrl: 'String',
    billableMembersCount: 'Int',
    board: 'Board',
    boards: 'BoardConnection',
    ciVariables: 'CiGroupVariableConnection',
    clusterAgents: 'ClusterAgentConnection',
    codeCoverageActivities: 'CodeCoverageActivityConnection',
    complianceFrameworks: 'ComplianceFrameworkConnection',
    contactStateCounts: 'ContactStateCounts',
    contacts: 'CustomerRelationsContactConnection',
    containerRepositories: 'ContainerRepositoryConnection',
    containerRepositoriesCount: 'Int',
    containsLockedProjects: 'Boolean',
    contributions: 'ContributionAnalyticsContributionConnection',
    crossProjectPipelineAvailable: 'Boolean',
    customEmoji: 'CustomEmojiConnection',
    dataTransfer: 'GroupDataTransfer',
    dependencyProxyBlobCount: 'Int',
    dependencyProxyBlobs: 'DependencyProxyBlobConnection',
    dependencyProxyImageCount: 'Int',
    dependencyProxyImagePrefix: 'String',
    dependencyProxyImageTtlPolicy: 'DependencyProxyImageTtlGroupPolicy',
    dependencyProxyManifests: 'DependencyProxyManifestConnection',
    dependencyProxySetting: 'DependencyProxySetting',
    dependencyProxyTotalSize: 'String',
    dependencyProxyTotalSizeBytes: 'BigInt',
    dependencyProxyTotalSizeInBytes: 'Int',
    descendantGroups: 'GroupConnection',
    description: 'String',
    descriptionHtml: 'String',
    dora: 'Dora',
    doraPerformanceScoreCounts: 'DoraPerformanceScoreCountConnection',
    emailsDisabled: 'Boolean',
    enforceFreeUserCap: 'Boolean',
    epic: 'Epic',
    epicBoard: 'EpicBoard',
    epicBoards: 'EpicBoardConnection',
    epics: 'EpicConnection',
    epicsEnabled: 'Boolean',
    externalAuditEventDestinations: 'ExternalAuditEventDestinationConnection',
    flowMetrics: 'GroupValueStreamAnalyticsFlowMetrics',
    fullName: 'String',
    fullPath: 'ID',
    gitlabSubscriptionsPreviewBillableUserChange: 'PreviewBillableUserChange',
    googleCloudLoggingConfigurations: 'GoogleCloudLoggingConfigurationTypeConnection',
    groupMembers: 'GroupMemberConnection',
    id: 'ID',
    isTemporaryStorageIncreaseEnabled: 'Boolean',
    issues: 'IssueConnection',
    iterationCadences: 'IterationCadenceConnection',
    iterations: 'IterationConnection',
    label: 'Label',
    labels: 'LabelConnection',
    lfsEnabled: 'Boolean',
    mentionsDisabled: 'Boolean',
    mergeRequestViolations: 'ComplianceViolationConnection',
    mergeRequests: 'MergeRequestConnection',
    milestones: 'MilestoneConnection',
    name: 'String',
    organizationStateCounts: 'OrganizationStateCounts',
    organizations: 'CustomerRelationsOrganizationConnection',
    packageSettings: 'PackageSettings',
    packages: 'PackageConnection',
    parent: 'Group',
    path: 'String',
    projectCreationLevel: 'String',
    projects: 'ProjectConnection',
    recentIssueBoards: 'BoardConnection',
    releases: 'ReleaseConnection',
    repositorySizeExcessProjectCount: 'Int',
    requestAccessEnabled: 'Boolean',
    requireTwoFactorAuthentication: 'Boolean',
    rootStorageStatistics: 'RootStorageStatistics',
    runners: 'CiRunnerConnection',
    scanExecutionPolicies: 'ScanExecutionPolicyConnection',
    scanResultPolicies: 'ScanResultPolicyConnection',
    shareWithGroupLock: 'Boolean',
    sharedRunnersSetting: 'SharedRunnersSetting',
    stats: 'GroupStats',
    storageSizeLimit: 'Float',
    subgroupCreationLevel: 'String',
    temporaryStorageIncreaseEndsOn: 'Time',
    timelogCategories: 'TimeTrackingTimelogCategoryConnection',
    timelogs: 'TimelogConnection',
    totalRepositorySize: 'Float',
    totalRepositorySizeExcess: 'Float',
    twoFactorGracePeriod: 'Int',
    userPermissions: 'GroupPermissions',
    visibility: 'String',
    vulnerabilities: 'VulnerabilityConnection',
    vulnerabilitiesCountByDay: 'VulnerabilitiesCountByDayConnection',
    vulnerabilityGrades: 'VulnerableProjectsByGrade',
    vulnerabilityScanners: 'VulnerabilityScannerConnection',
    vulnerabilitySeveritiesCount: 'VulnerabilitySeveritiesCount',
    webUrl: 'String',
    workItemTypes: 'WorkItemTypeConnection',
  },
  GroupConnection: {
    edges: 'GroupEdge',
    nodes: 'Group',
    pageInfo: 'PageInfo',
  },
  GroupDataTransfer: {
    egressNodes: 'EgressNodeConnection',
  },
  GroupEdge: {
    cursor: 'String',
    node: 'Group',
  },
  GroupMember: {
    accessLevel: 'AccessLevel',
    createdAt: 'Time',
    createdBy: 'UserCore',
    expiresAt: 'Time',
    group: 'Group',
    id: 'ID',
    mergeRequestInteraction: 'UserMergeRequestInteraction',
    notificationEmail: 'String',
    updatedAt: 'Time',
    user: 'UserCore',
    userPermissions: 'GroupPermissions',
  },
  GroupMemberBulkUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    groupMembers: 'GroupMember',
  },
  GroupMemberConnection: {
    edges: 'GroupMemberEdge',
    nodes: 'GroupMember',
    pageInfo: 'PageInfo',
  },
  GroupMemberEdge: {
    cursor: 'String',
    node: 'GroupMember',
  },
  GroupPermissions: {
    createProjects: 'Boolean',
    readGroup: 'Boolean',
  },
  GroupReleaseStats: {
    releasesCount: 'Int',
    releasesPercentage: 'Int',
  },
  GroupSecurityPolicySource: {
    inherited: 'Boolean',
    namespace: 'Namespace',
  },
  GroupStats: {
    releaseStats: 'GroupReleaseStats',
  },
  GroupUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    group: 'Group',
  },
  GroupValueStreamAnalyticsFlowMetrics: {
    cycleTime: 'ValueStreamAnalyticsMetric',
    deploymentCount: 'ValueStreamAnalyticsMetric',
    issueCount: 'ValueStreamAnalyticsMetric',
    issuesCompletedCount: 'ValueStreamAnalyticsMetric',
    leadTime: 'ValueStreamAnalyticsMetric',
  },
  GroupWikiRepositoryRegistry: {
    createdAt: 'Time',
    groupWikiRepositoryId: 'ID',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  GroupWikiRepositoryRegistryConnection: {
    edges: 'GroupWikiRepositoryRegistryEdge',
    nodes: 'GroupWikiRepositoryRegistry',
    pageInfo: 'PageInfo',
  },
  GroupWikiRepositoryRegistryEdge: {
    cursor: 'String',
    node: 'GroupWikiRepositoryRegistry',
  },
  HelmFileMetadata: {
    channel: 'String',
    createdAt: 'Time',
    metadata: 'PackageHelmMetadataType',
    updatedAt: 'Time',
  },
  HttpIntegrationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    integration: 'AlertManagementHttpIntegration',
  },
  HttpIntegrationDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    integration: 'AlertManagementHttpIntegration',
  },
  HttpIntegrationResetTokenPayload: {
    clientMutationId: 'String',
    errors: 'String',
    integration: 'AlertManagementHttpIntegration',
  },
  HttpIntegrationUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    integration: 'AlertManagementHttpIntegration',
  },
  IncidentManagementOncallRotation: {
    activePeriod: 'OncallRotationActivePeriodType',
    endsAt: 'Time',
    id: 'IncidentManagementOncallRotationID',
    length: 'Int',
    lengthUnit: 'OncallRotationUnitEnum',
    name: 'String',
    participants: 'OncallParticipantTypeConnection',
    shifts: 'IncidentManagementOncallShiftConnection',
    startsAt: 'Time',
  },
  IncidentManagementOncallRotationConnection: {
    edges: 'IncidentManagementOncallRotationEdge',
    nodes: 'IncidentManagementOncallRotation',
    pageInfo: 'PageInfo',
  },
  IncidentManagementOncallRotationEdge: {
    cursor: 'String',
    node: 'IncidentManagementOncallRotation',
  },
  IncidentManagementOncallSchedule: {
    description: 'String',
    iid: 'ID',
    name: 'String',
    oncallUsers: 'UserCore',
    rotation: 'IncidentManagementOncallRotation',
    rotations: 'IncidentManagementOncallRotationConnection',
    timezone: 'String',
  },
  IncidentManagementOncallScheduleConnection: {
    edges: 'IncidentManagementOncallScheduleEdge',
    nodes: 'IncidentManagementOncallSchedule',
    pageInfo: 'PageInfo',
  },
  IncidentManagementOncallScheduleEdge: {
    cursor: 'String',
    node: 'IncidentManagementOncallSchedule',
  },
  IncidentManagementOncallShift: {
    endsAt: 'Time',
    participant: 'OncallParticipantType',
    startsAt: 'Time',
  },
  IncidentManagementOncallShiftConnection: {
    edges: 'IncidentManagementOncallShiftEdge',
    nodes: 'IncidentManagementOncallShift',
    pageInfo: 'PageInfo',
  },
  IncidentManagementOncallShiftEdge: {
    cursor: 'String',
    node: 'IncidentManagementOncallShift',
  },
  InheritedCiVariable: {
    environmentScope: 'String',
    groupCiCdSettingsPath: 'String',
    groupName: 'String',
    id: 'ID',
    key: 'String',
    masked: 'Boolean',
    protected: 'Boolean',
    raw: 'Boolean',
    variableType: 'CiVariableType',
  },
  InheritedCiVariableConnection: {
    edges: 'InheritedCiVariableEdge',
    nodes: 'InheritedCiVariable',
    pageInfo: 'PageInfo',
  },
  InheritedCiVariableEdge: {
    cursor: 'String',
    node: 'InheritedCiVariable',
  },
  InstanceExternalAuditEventDestination: {
    destinationUrl: 'String',
    id: 'ID',
    verificationToken: 'String',
  },
  InstanceExternalAuditEventDestinationConnection: {
    edges: 'InstanceExternalAuditEventDestinationEdge',
    nodes: 'InstanceExternalAuditEventDestination',
    pageInfo: 'PageInfo',
  },
  InstanceExternalAuditEventDestinationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    instanceExternalAuditEventDestination: 'InstanceExternalAuditEventDestination',
  },
  InstanceExternalAuditEventDestinationDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  InstanceExternalAuditEventDestinationEdge: {
    cursor: 'String',
    node: 'InstanceExternalAuditEventDestination',
  },
  InstanceExternalAuditEventDestinationUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    instanceExternalAuditEventDestination: 'InstanceExternalAuditEventDestination',
  },
  InstanceSecurityDashboard: {
    clusterAgents: 'ClusterAgentConnection',
    projects: 'ProjectConnection',
    vulnerabilityGrades: 'VulnerableProjectsByGrade',
    vulnerabilityScanners: 'VulnerabilityScannerConnection',
    vulnerabilitySeveritiesCount: 'VulnerabilitySeveritiesCount',
  },
  Issuable: {
    '...on Epic': 'Epic',
    '...on Issue': 'Issue',
    '...on MergeRequest': 'MergeRequest',
    '...on WorkItem': 'WorkItem',
  },
  IssuableResourceLink: {
    id: 'IncidentManagementIssuableResourceLinkID',
    issue: 'Issue',
    link: 'String',
    linkText: 'String',
    linkType: 'IssuableResourceLinkType',
  },
  IssuableResourceLinkConnection: {
    edges: 'IssuableResourceLinkEdge',
    nodes: 'IssuableResourceLink',
    pageInfo: 'PageInfo',
  },
  IssuableResourceLinkCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    issuableResourceLink: 'IssuableResourceLink',
  },
  IssuableResourceLinkDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issuableResourceLink: 'IssuableResourceLink',
  },
  IssuableResourceLinkEdge: {
    cursor: 'String',
    node: 'IssuableResourceLink',
  },
  Issue: {
    alertManagementAlert: 'AlertManagementAlert',
    alertManagementAlerts: 'AlertManagementAlertConnection',
    assignees: 'UserCoreConnection',
    author: 'UserCore',
    blocked: 'Boolean',
    blockedByCount: 'Int',
    blockedByIssues: 'IssueConnection',
    blockingCount: 'Int',
    closedAsDuplicateOf: 'Issue',
    closedAt: 'Time',
    commenters: 'UserCoreConnection',
    confidential: 'Boolean',
    createNoteEmail: 'String',
    createdAt: 'Time',
    currentUserTodos: 'TodoConnection',
    customerRelationsContacts: 'CustomerRelationsContactConnection',
    description: 'String',
    descriptionHtml: 'String',
    designCollection: 'DesignCollection',
    discussionLocked: 'Boolean',
    discussions: 'DiscussionConnection',
    downvotes: 'Int',
    dueDate: 'Time',
    emailsDisabled: 'Boolean',
    epic: 'Epic',
    escalationPolicy: 'EscalationPolicyType',
    escalationStatus: 'IssueEscalationStatus',
    hasEpic: 'Boolean',
    healthStatus: 'HealthStatus',
    hidden: 'Boolean',
    humanTimeEstimate: 'String',
    humanTotalTimeSpent: 'String',
    id: 'ID',
    iid: 'ID',
    issuableResourceLinks: 'IssuableResourceLinkConnection',
    iteration: 'Iteration',
    labels: 'LabelConnection',
    mergeRequestsCount: 'Int',
    metricImages: 'MetricImage',
    milestone: 'Milestone',
    moved: 'Boolean',
    movedTo: 'Issue',
    notes: 'NoteConnection',
    participants: 'UserCoreConnection',
    projectId: 'Int',
    reference: 'String',
    relatedMergeRequests: 'MergeRequestConnection',
    relatedVulnerabilities: 'VulnerabilityConnection',
    relativePosition: 'Int',
    severity: 'IssuableSeverity',
    slaDueAt: 'Time',
    state: 'IssueState',
    statusPagePublishedIncident: 'Boolean',
    subscribed: 'Boolean',
    taskCompletionStatus: 'TaskCompletionStatus',
    timeEstimate: 'Int',
    timelogs: 'TimelogConnection',
    title: 'String',
    titleHtml: 'String',
    totalTimeSpent: 'Int',
    type: 'IssueType',
    updatedAt: 'Time',
    updatedBy: 'UserCore',
    upvotes: 'Int',
    userDiscussionsCount: 'Int',
    userNotesCount: 'Int',
    userPermissions: 'IssuePermissions',
    webPath: 'String',
    webUrl: 'String',
    weight: 'Int',
  },
  IssueConnection: {
    count: 'Int',
    edges: 'IssueEdge',
    nodes: 'Issue',
    pageInfo: 'PageInfo',
    weight: 'Int',
  },
  IssueEdge: {
    cursor: 'String',
    node: 'Issue',
  },
  IssueLinkAlertsPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueMoveListPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueMovePayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssuePermissions: {
    adminIssue: 'Boolean',
    createDesign: 'Boolean',
    createNote: 'Boolean',
    destroyDesign: 'Boolean',
    readDesign: 'Boolean',
    readIssue: 'Boolean',
    reopenIssue: 'Boolean',
    updateDesign: 'Boolean',
    updateIssue: 'Boolean',
  },
  IssueSetAssigneesPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetConfidentialPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetCrmContactsPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetDueDatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetEpicPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetEscalationPolicyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetEscalationStatusPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetIterationPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetLockedPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetSeverityPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetSubscriptionPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueSetWeightPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssueStatusCountsType: {
    all: 'Int',
    closed: 'Int',
    opened: 'Int',
  },
  IssueUnlinkAlertPayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  IssuesBulkUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    updatedIssueCount: 'Int',
  },
  Iteration: {
    createdAt: 'Time',
    description: 'String',
    descriptionHtml: 'String',
    dueDate: 'Time',
    id: 'ID',
    iid: 'ID',
    iterationCadence: 'IterationCadence',
    report: 'TimeboxReport',
    scopedPath: 'String',
    scopedUrl: 'String',
    sequence: 'Int',
    startDate: 'Time',
    state: 'IterationState',
    title: 'String',
    updatedAt: 'Time',
    webPath: 'String',
    webUrl: 'String',
  },
  IterationCadence: {
    active: 'Boolean',
    automatic: 'Boolean',
    description: 'String',
    durationInWeeks: 'Int',
    id: 'IterationsCadenceID',
    iterationsInAdvance: 'Int',
    rollOver: 'Boolean',
    startDate: 'Time',
    title: 'String',
  },
  IterationCadenceConnection: {
    edges: 'IterationCadenceEdge',
    nodes: 'IterationCadence',
    pageInfo: 'PageInfo',
  },
  IterationCadenceCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    iterationCadence: 'IterationCadence',
  },
  IterationCadenceDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    group: 'Group',
  },
  IterationCadenceEdge: {
    cursor: 'String',
    node: 'IterationCadence',
  },
  IterationCadenceUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    iterationCadence: 'IterationCadence',
  },
  IterationConnection: {
    edges: 'IterationEdge',
    nodes: 'Iteration',
    pageInfo: 'PageInfo',
  },
  IterationDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
    group: 'Group',
  },
  IterationEdge: {
    cursor: 'String',
    node: 'Iteration',
  },
  JiraImport: {
    createdAt: 'Time',
    failedToImportCount: 'Int',
    importedIssuesCount: 'Int',
    jiraProjectKey: 'String',
    scheduledAt: 'Time',
    scheduledBy: 'UserCore',
    totalIssueCount: 'Int',
  },
  JiraImportConnection: {
    edges: 'JiraImportEdge',
    nodes: 'JiraImport',
    pageInfo: 'PageInfo',
  },
  JiraImportEdge: {
    cursor: 'String',
    node: 'JiraImport',
  },
  JiraImportStartPayload: {
    clientMutationId: 'String',
    errors: 'String',
    jiraImport: 'JiraImport',
  },
  JiraImportUsersPayload: {
    clientMutationId: 'String',
    errors: 'String',
    jiraUsers: 'JiraUser',
  },
  JiraProject: {
    key: 'String',
    name: 'String',
    projectId: 'Int',
  },
  JiraProjectConnection: {
    edges: 'JiraProjectEdge',
    nodes: 'JiraProject',
    pageInfo: 'PageInfo',
  },
  JiraProjectEdge: {
    cursor: 'String',
    node: 'JiraProject',
  },
  JiraService: {
    active: 'Boolean',
    projects: 'JiraProjectConnection',
    serviceType: 'ServiceType',
    type: 'String',
  },
  JiraUser: {
    gitlabId: 'Int',
    gitlabName: 'String',
    gitlabUsername: 'String',
    jiraAccountId: 'String',
    jiraDisplayName: 'String',
    jiraEmail: 'String',
  },
  JobArtifactRegistry: {
    artifactId: 'ID',
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  JobArtifactRegistryConnection: {
    edges: 'JobArtifactRegistryEdge',
    nodes: 'JobArtifactRegistry',
    pageInfo: 'PageInfo',
  },
  JobArtifactRegistryEdge: {
    cursor: 'String',
    node: 'JobArtifactRegistry',
  },
  JobArtifactsDestroyPayload: {
    clientMutationId: 'String',
    destroyedArtifactsCount: 'Int',
    errors: 'String',
    job: 'CiJob',
  },
  JobCancelPayload: {
    clientMutationId: 'String',
    errors: 'String',
    job: 'CiJob',
  },
  JobNeedUnion: {
    '...on CiBuildNeed': 'CiBuildNeed',
    '...on CiJob': 'CiJob',
  },
  JobNeedUnionConnection: {
    edges: 'JobNeedUnionEdge',
    nodes: 'JobNeedUnion',
    pageInfo: 'PageInfo',
  },
  JobNeedUnionEdge: {
    cursor: 'String',
    node: 'JobNeedUnion',
  },
  JobPermissions: {
    readBuild: 'Boolean',
    readJobArtifacts: 'Boolean',
    updateBuild: 'Boolean',
  },
  JobPlayPayload: {
    clientMutationId: 'String',
    errors: 'String',
    job: 'CiJob',
  },
  JobRetryPayload: {
    clientMutationId: 'String',
    errors: 'String',
    job: 'CiJob',
  },
  JobUnschedulePayload: {
    clientMutationId: 'String',
    errors: 'String',
    job: 'CiJob',
  },
  Kas: {
    enabled: 'Boolean',
    externalUrl: 'String',
    version: 'String',
  },
  Key: {
    createdAt: 'Time',
    expiresAt: 'Time',
    id: 'ID',
    key: 'String',
    title: 'String',
  },
  Label: {
    color: 'String',
    createdAt: 'Time',
    description: 'String',
    descriptionHtml: 'String',
    id: 'ID',
    textColor: 'String',
    title: 'String',
    updatedAt: 'Time',
  },
  LabelConnection: {
    count: 'Int',
    edges: 'LabelEdge',
    nodes: 'Label',
    pageInfo: 'PageInfo',
  },
  LabelCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    label: 'Label',
  },
  LabelEdge: {
    cursor: 'String',
    node: 'Label',
  },
  LfsObjectRegistry: {
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    lfsObjectId: 'ID',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  LfsObjectRegistryConnection: {
    edges: 'LfsObjectRegistryEdge',
    nodes: 'LfsObjectRegistry',
    pageInfo: 'PageInfo',
  },
  LfsObjectRegistryEdge: {
    cursor: 'String',
    node: 'LfsObjectRegistry',
  },
  LicenseHistoryEntry: {
    activatedAt: 'Date',
    blockChangesAt: 'Date',
    company: 'String',
    createdAt: 'Date',
    email: 'String',
    expiresAt: 'Date',
    id: 'ID',
    name: 'String',
    plan: 'String',
    startsAt: 'Date',
    type: 'String',
    usersInLicenseCount: 'Int',
  },
  LicenseHistoryEntryConnection: {
    edges: 'LicenseHistoryEntryEdge',
    nodes: 'LicenseHistoryEntry',
    pageInfo: 'PageInfo',
  },
  LicenseHistoryEntryEdge: {
    cursor: 'String',
    node: 'LicenseHistoryEntry',
  },
  Location: {
    blobPath: 'String',
    path: 'String',
  },
  MarkAsSpamSnippetPayload: {
    clientMutationId: 'String',
    errors: 'String',
    snippet: 'Snippet',
  },
  MavenMetadata: {
    appGroup: 'String',
    appName: 'String',
    appVersion: 'String',
    createdAt: 'Time',
    id: 'PackagesMavenMetadatumID',
    path: 'String',
    updatedAt: 'Time',
  },
  MemberInterface: {
    '...on GroupMember': 'GroupMember',
    '...on ProjectMember': 'ProjectMember',
    accessLevel: 'AccessLevel',
    createdAt: 'Time',
    createdBy: 'UserCore',
    expiresAt: 'Time',
    id: 'ID',
    mergeRequestInteraction: 'UserMergeRequestInteraction',
    updatedAt: 'Time',
    user: 'UserCore',
  },
  MemberInterfaceConnection: {
    edges: 'MemberInterfaceEdge',
    nodes: 'MemberInterface',
    pageInfo: 'PageInfo',
  },
  MemberInterfaceEdge: {
    cursor: 'String',
    node: 'MemberInterface',
  },
  MergeAccessLevel: {
    accessLevel: 'Int',
    accessLevelDescription: 'String',
    group: 'AccessLevelGroup',
    user: 'AccessLevelUser',
  },
  MergeAccessLevelConnection: {
    edges: 'MergeAccessLevelEdge',
    nodes: 'MergeAccessLevel',
    pageInfo: 'PageInfo',
  },
  MergeAccessLevelEdge: {
    cursor: 'String',
    node: 'MergeAccessLevel',
  },
  MergeRequest: {
    allowCollaboration: 'Boolean',
    approvalState: 'MergeRequestApprovalState',
    approvalsLeft: 'Int',
    approvalsRequired: 'Int',
    approved: 'Boolean',
    approvedBy: 'UserCoreConnection',
    assignees: 'MergeRequestAssigneeConnection',
    author: 'MergeRequestAuthor',
    autoMergeEnabled: 'Boolean',
    autoMergeStrategy: 'String',
    availableAutoMergeStrategies: 'String',
    awardEmoji: 'AwardEmojiConnection',
    commenters: 'UserCoreConnection',
    commitCount: 'Int',
    commits: 'CommitConnection',
    commitsWithoutMergeCommits: 'CommitConnection',
    committers: 'UserCoreConnection',
    conflicts: 'Boolean',
    createdAt: 'Time',
    currentUserTodos: 'TodoConnection',
    defaultMergeCommitMessage: 'String',
    defaultSquashCommitMessage: 'String',
    description: 'String',
    descriptionHtml: 'String',
    detailedMergeStatus: 'DetailedMergeStatus',
    diffHeadSha: 'String',
    diffLlmSummaries: 'MergeRequestDiffLlmSummaryConnection',
    diffRefs: 'DiffRefs',
    diffStats: 'DiffStats',
    diffStatsSummary: 'DiffStatsSummary',
    discussionLocked: 'Boolean',
    discussions: 'DiscussionConnection',
    divergedFromTargetBranch: 'Boolean',
    downvotes: 'Int',
    draft: 'Boolean',
    findingReportsComparer: 'FindingReportsComparer',
    forceRemoveSourceBranch: 'Boolean',
    hasCi: 'Boolean',
    hasSecurityReports: 'Boolean',
    headPipeline: 'Pipeline',
    humanTimeEstimate: 'String',
    humanTotalTimeSpent: 'String',
    id: 'ID',
    iid: 'String',
    inProgressMergeCommitSha: 'String',
    labels: 'LabelConnection',
    mergeCommitSha: 'String',
    mergeError: 'String',
    mergeOngoing: 'Boolean',
    mergeStatus: 'String',
    mergeStatusEnum: 'MergeStatus',
    mergeTrainsCount: 'Int',
    mergeUser: 'UserCore',
    mergeWhenPipelineSucceeds: 'Boolean',
    mergeable: 'Boolean',
    mergeableDiscussionsState: 'Boolean',
    mergedAt: 'Time',
    milestone: 'Milestone',
    notes: 'NoteConnection',
    participants: 'MergeRequestParticipantConnection',
    pipelines: 'PipelineConnection',
    preparedAt: 'Time',
    project: 'Project',
    projectId: 'Int',
    rebaseCommitSha: 'String',
    rebaseInProgress: 'Boolean',
    reference: 'String',
    reviewers: 'MergeRequestReviewerConnection',
    securityAutoFix: 'Boolean',
    securityReportsUpToDateOnTargetBranch: 'Boolean',
    shouldBeRebased: 'Boolean',
    shouldRemoveSourceBranch: 'Boolean',
    sourceBranch: 'String',
    sourceBranchExists: 'Boolean',
    sourceBranchProtected: 'Boolean',
    sourceProject: 'Project',
    sourceProjectId: 'Int',
    squash: 'Boolean',
    squashOnMerge: 'Boolean',
    state: 'MergeRequestState',
    subscribed: 'Boolean',
    suggestedReviewers: 'SuggestedReviewersType',
    targetBranch: 'String',
    targetBranchExists: 'Boolean',
    targetProject: 'Project',
    targetProjectId: 'Int',
    taskCompletionStatus: 'TaskCompletionStatus',
    timeEstimate: 'Int',
    timelogs: 'TimelogConnection',
    title: 'String',
    titleHtml: 'String',
    totalTimeSpent: 'Int',
    updatedAt: 'Time',
    upvotes: 'Int',
    userDiscussionsCount: 'Int',
    userNotesCount: 'Int',
    userPermissions: 'MergeRequestPermissions',
    webUrl: 'String',
  },
  MergeRequestAcceptPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestApprovalState: {
    approvalRulesOverwritten: 'Boolean',
    invalidApproversRules: 'ApprovalRule',
    rules: 'ApprovalRule',
    suggestedApprovers: 'UserCoreConnection',
  },
  MergeRequestAssignee: {
    assignedMergeRequests: 'MergeRequestConnection',
    authoredMergeRequests: 'MergeRequestConnection',
    avatarUrl: 'String',
    bot: 'Boolean',
    callouts: 'UserCalloutConnection',
    commitEmail: 'String',
    email: 'String',
    emails: 'EmailConnection',
    gitpodEnabled: 'Boolean',
    groupCount: 'Int',
    groupMemberships: 'GroupMemberConnection',
    groups: 'GroupConnection',
    id: 'ID',
    location: 'String',
    mergeRequestInteraction: 'UserMergeRequestInteraction',
    name: 'String',
    namespace: 'Namespace',
    namespaceCommitEmails: 'NamespaceCommitEmailConnection',
    preferencesGitpodPath: 'String',
    profileEnableGitpodPath: 'String',
    projectMemberships: 'ProjectMemberConnection',
    publicEmail: 'String',
    reviewRequestedMergeRequests: 'MergeRequestConnection',
    savedReplies: 'SavedReplyConnection',
    savedReply: 'SavedReply',
    snippets: 'SnippetConnection',
    starredProjects: 'ProjectConnection',
    state: 'UserState',
    status: 'UserStatus',
    timelogs: 'TimelogConnection',
    todos: 'TodoConnection',
    userAchievements: 'UserAchievementConnection',
    userPermissions: 'UserPermissions',
    username: 'String',
    webPath: 'String',
    webUrl: 'String',
    workspaces: 'WorkspaceConnection',
  },
  MergeRequestAssigneeConnection: {
    edges: 'MergeRequestAssigneeEdge',
    nodes: 'MergeRequestAssignee',
    pageInfo: 'PageInfo',
  },
  MergeRequestAssigneeEdge: {
    cursor: 'String',
    node: 'MergeRequestAssignee',
  },
  MergeRequestAuthor: {
    assignedMergeRequests: 'MergeRequestConnection',
    authoredMergeRequests: 'MergeRequestConnection',
    avatarUrl: 'String',
    bot: 'Boolean',
    callouts: 'UserCalloutConnection',
    commitEmail: 'String',
    email: 'String',
    emails: 'EmailConnection',
    gitpodEnabled: 'Boolean',
    groupCount: 'Int',
    groupMemberships: 'GroupMemberConnection',
    groups: 'GroupConnection',
    id: 'ID',
    location: 'String',
    mergeRequestInteraction: 'UserMergeRequestInteraction',
    name: 'String',
    namespace: 'Namespace',
    namespaceCommitEmails: 'NamespaceCommitEmailConnection',
    preferencesGitpodPath: 'String',
    profileEnableGitpodPath: 'String',
    projectMemberships: 'ProjectMemberConnection',
    publicEmail: 'String',
    reviewRequestedMergeRequests: 'MergeRequestConnection',
    savedReplies: 'SavedReplyConnection',
    savedReply: 'SavedReply',
    snippets: 'SnippetConnection',
    starredProjects: 'ProjectConnection',
    state: 'UserState',
    status: 'UserStatus',
    timelogs: 'TimelogConnection',
    todos: 'TodoConnection',
    userAchievements: 'UserAchievementConnection',
    userPermissions: 'UserPermissions',
    username: 'String',
    webPath: 'String',
    webUrl: 'String',
    workspaces: 'WorkspaceConnection',
  },
  MergeRequestConnection: {
    count: 'Int',
    edges: 'MergeRequestEdge',
    nodes: 'MergeRequest',
    pageInfo: 'PageInfo',
    totalTimeToMerge: 'Float',
  },
  MergeRequestCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestDiffLlmSummary: {
    content: 'String',
    createdAt: 'Time',
    mergeRequestDiffId: 'ID',
    provider: 'String',
    updatedAt: 'Time',
    user: 'UserCore',
  },
  MergeRequestDiffLlmSummaryConnection: {
    edges: 'MergeRequestDiffLlmSummaryEdge',
    nodes: 'MergeRequestDiffLlmSummary',
    pageInfo: 'PageInfo',
  },
  MergeRequestDiffLlmSummaryEdge: {
    cursor: 'String',
    node: 'MergeRequestDiffLlmSummary',
  },
  MergeRequestDiffRegistry: {
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    mergeRequestDiffId: 'ID',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  MergeRequestDiffRegistryConnection: {
    edges: 'MergeRequestDiffRegistryEdge',
    nodes: 'MergeRequestDiffRegistry',
    pageInfo: 'PageInfo',
  },
  MergeRequestDiffRegistryEdge: {
    cursor: 'String',
    node: 'MergeRequestDiffRegistry',
  },
  MergeRequestEdge: {
    cursor: 'String',
    node: 'MergeRequest',
  },
  MergeRequestParticipant: {
    assignedMergeRequests: 'MergeRequestConnection',
    authoredMergeRequests: 'MergeRequestConnection',
    avatarUrl: 'String',
    bot: 'Boolean',
    callouts: 'UserCalloutConnection',
    commitEmail: 'String',
    email: 'String',
    emails: 'EmailConnection',
    gitpodEnabled: 'Boolean',
    groupCount: 'Int',
    groupMemberships: 'GroupMemberConnection',
    groups: 'GroupConnection',
    id: 'ID',
    location: 'String',
    mergeRequestInteraction: 'UserMergeRequestInteraction',
    name: 'String',
    namespace: 'Namespace',
    namespaceCommitEmails: 'NamespaceCommitEmailConnection',
    preferencesGitpodPath: 'String',
    profileEnableGitpodPath: 'String',
    projectMemberships: 'ProjectMemberConnection',
    publicEmail: 'String',
    reviewRequestedMergeRequests: 'MergeRequestConnection',
    savedReplies: 'SavedReplyConnection',
    savedReply: 'SavedReply',
    snippets: 'SnippetConnection',
    starredProjects: 'ProjectConnection',
    state: 'UserState',
    status: 'UserStatus',
    timelogs: 'TimelogConnection',
    todos: 'TodoConnection',
    userAchievements: 'UserAchievementConnection',
    userPermissions: 'UserPermissions',
    username: 'String',
    webPath: 'String',
    webUrl: 'String',
    workspaces: 'WorkspaceConnection',
  },
  MergeRequestParticipantConnection: {
    edges: 'MergeRequestParticipantEdge',
    nodes: 'MergeRequestParticipant',
    pageInfo: 'PageInfo',
  },
  MergeRequestParticipantEdge: {
    cursor: 'String',
    node: 'MergeRequestParticipant',
  },
  MergeRequestPermissions: {
    adminMergeRequest: 'Boolean',
    canApprove: 'Boolean',
    canMerge: 'Boolean',
    cherryPickOnCurrentMergeRequest: 'Boolean',
    createNote: 'Boolean',
    pushToSourceBranch: 'Boolean',
    readMergeRequest: 'Boolean',
    removeSourceBranch: 'Boolean',
    revertOnCurrentMergeRequest: 'Boolean',
    updateMergeRequest: 'Boolean',
  },
  MergeRequestReviewer: {
    assignedMergeRequests: 'MergeRequestConnection',
    authoredMergeRequests: 'MergeRequestConnection',
    avatarUrl: 'String',
    bot: 'Boolean',
    callouts: 'UserCalloutConnection',
    commitEmail: 'String',
    email: 'String',
    emails: 'EmailConnection',
    gitpodEnabled: 'Boolean',
    groupCount: 'Int',
    groupMemberships: 'GroupMemberConnection',
    groups: 'GroupConnection',
    id: 'ID',
    location: 'String',
    mergeRequestInteraction: 'UserMergeRequestInteraction',
    name: 'String',
    namespace: 'Namespace',
    namespaceCommitEmails: 'NamespaceCommitEmailConnection',
    preferencesGitpodPath: 'String',
    profileEnableGitpodPath: 'String',
    projectMemberships: 'ProjectMemberConnection',
    publicEmail: 'String',
    reviewRequestedMergeRequests: 'MergeRequestConnection',
    savedReplies: 'SavedReplyConnection',
    savedReply: 'SavedReply',
    snippets: 'SnippetConnection',
    starredProjects: 'ProjectConnection',
    state: 'UserState',
    status: 'UserStatus',
    timelogs: 'TimelogConnection',
    todos: 'TodoConnection',
    userAchievements: 'UserAchievementConnection',
    userPermissions: 'UserPermissions',
    username: 'String',
    webPath: 'String',
    webUrl: 'String',
    workspaces: 'WorkspaceConnection',
  },
  MergeRequestReviewerConnection: {
    edges: 'MergeRequestReviewerEdge',
    nodes: 'MergeRequestReviewer',
    pageInfo: 'PageInfo',
  },
  MergeRequestReviewerEdge: {
    cursor: 'String',
    node: 'MergeRequestReviewer',
  },
  MergeRequestReviewerRereviewPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestSetAssigneesPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestSetDraftPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestSetLabelsPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestSetLockedPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestSetMilestonePayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestSetReviewersPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestSetSubscriptionPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestUpdateApprovalRulePayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  MergeRequestUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  Metadata: {
    enterprise: 'Boolean',
    kas: 'Kas',
    revision: 'String',
    version: 'String',
  },
  MetricImage: {
    fileName: 'String',
    filePath: 'String',
    id: 'ID',
    iid: 'ID',
    url: 'String',
  },
  MetricsDashboard: {
    annotations: 'MetricsDashboardAnnotationConnection',
    path: 'String',
    schemaValidationWarnings: 'String',
  },
  MetricsDashboardAnnotation: {
    description: 'String',
    endingAt: 'Time',
    id: 'ID',
    panelId: 'String',
    startingAt: 'Time',
  },
  MetricsDashboardAnnotationConnection: {
    edges: 'MetricsDashboardAnnotationEdge',
    nodes: 'MetricsDashboardAnnotation',
    pageInfo: 'PageInfo',
  },
  MetricsDashboardAnnotationEdge: {
    cursor: 'String',
    node: 'MetricsDashboardAnnotation',
  },
  Milestone: {
    createdAt: 'Time',
    description: 'String',
    dueDate: 'Time',
    expired: 'Boolean',
    groupMilestone: 'Boolean',
    id: 'ID',
    iid: 'ID',
    projectMilestone: 'Boolean',
    releases: 'ReleaseConnection',
    report: 'TimeboxReport',
    startDate: 'Time',
    state: 'MilestoneStateEnum',
    stats: 'MilestoneStats',
    subgroupMilestone: 'Boolean',
    title: 'String',
    updatedAt: 'Time',
    webPath: 'String',
  },
  MilestoneConnection: {
    edges: 'MilestoneEdge',
    nodes: 'Milestone',
    pageInfo: 'PageInfo',
  },
  MilestoneEdge: {
    cursor: 'String',
    node: 'Milestone',
  },
  MilestoneStats: {
    closedIssuesCount: 'Int',
    totalIssuesCount: 'Int',
  },
  Mutation: {
    achievementsAward: 'AchievementsAwardPayload',
    achievementsCreate: 'AchievementsCreatePayload',
    achievementsDelete: 'AchievementsDeletePayload',
    achievementsRevoke: 'AchievementsRevokePayload',
    achievementsUpdate: 'AchievementsUpdatePayload',
    addProjectToSecurityDashboard: 'AddProjectToSecurityDashboardPayload',
    adminSidekiqQueuesDeleteJobs: 'AdminSidekiqQueuesDeleteJobsPayload',
    aiAction: 'AiActionPayload',
    alertSetAssignees: 'AlertSetAssigneesPayload',
    alertTodoCreate: 'AlertTodoCreatePayload',
    approveDeployment: 'ApproveDeploymentPayload',
    artifactDestroy: 'ArtifactDestroyPayload',
    auditEventsStreamingDestinationEventsAdd: 'AuditEventsStreamingDestinationEventsAddPayload',
    auditEventsStreamingDestinationEventsRemove:
      'AuditEventsStreamingDestinationEventsRemovePayload',
    auditEventsStreamingHeadersCreate: 'AuditEventsStreamingHeadersCreatePayload',
    auditEventsStreamingHeadersDestroy: 'AuditEventsStreamingHeadersDestroyPayload',
    auditEventsStreamingHeadersUpdate: 'AuditEventsStreamingHeadersUpdatePayload',
    auditEventsStreamingInstanceHeadersCreate: 'AuditEventsStreamingInstanceHeadersCreatePayload',
    auditEventsStreamingInstanceHeadersUpdate: 'AuditEventsStreamingInstanceHeadersUpdatePayload',
    awardEmojiAdd: 'AwardEmojiAddPayload',
    awardEmojiRemove: 'AwardEmojiRemovePayload',
    awardEmojiToggle: 'AwardEmojiTogglePayload',
    boardEpicCreate: 'BoardEpicCreatePayload',
    boardListCreate: 'BoardListCreatePayload',
    boardListUpdateLimitMetrics: 'BoardListUpdateLimitMetricsPayload',
    buildForecast: 'BuildForecastPayload',
    bulkDestroyJobArtifacts: 'BulkDestroyJobArtifactsPayload',
    bulkEnableDevopsAdoptionNamespaces: 'BulkEnableDevopsAdoptionNamespacesPayload',
    bulkRunnerDelete: 'BulkRunnerDeletePayload',
    catalogResourcesCreate: 'CatalogResourcesCreatePayload',
    ciAiGenerateConfig: 'CiAiGenerateConfigPayload',
    ciJobTokenScopeAddProject: 'CiJobTokenScopeAddProjectPayload',
    ciJobTokenScopeRemoveProject: 'CiJobTokenScopeRemoveProjectPayload',
    clusterAgentDelete: 'ClusterAgentDeletePayload',
    clusterAgentTokenCreate: 'ClusterAgentTokenCreatePayload',
    clusterAgentTokenRevoke: 'ClusterAgentTokenRevokePayload',
    commitCreate: 'CommitCreatePayload',
    configureContainerScanning: 'ConfigureContainerScanningPayload',
    configureDependencyScanning: 'ConfigureDependencyScanningPayload',
    configureSast: 'ConfigureSastPayload',
    configureSastIac: 'ConfigureSastIacPayload',
    configureSecretDetection: 'ConfigureSecretDetectionPayload',
    corpusCreate: 'CorpusCreatePayload',
    createAlertIssue: 'CreateAlertIssuePayload',
    createAnnotation: 'CreateAnnotationPayload',
    createBoard: 'CreateBoardPayload',
    createBranch: 'CreateBranchPayload',
    createClusterAgent: 'CreateClusterAgentPayload',
    createComplianceFramework: 'CreateComplianceFrameworkPayload',
    createCustomEmoji: 'CreateCustomEmojiPayload',
    createDiffNote: 'CreateDiffNotePayload',
    createEpic: 'CreateEpicPayload',
    createImageDiffNote: 'CreateImageDiffNotePayload',
    createIssue: 'CreateIssuePayload',
    createIteration: 'CreateIterationPayload',
    createNote: 'CreateNotePayload',
    createRequirement: 'CreateRequirementPayload',
    createSnippet: 'CreateSnippetPayload',
    createTestCase: 'CreateTestCasePayload',
    customerRelationsContactCreate: 'CustomerRelationsContactCreatePayload',
    customerRelationsContactUpdate: 'CustomerRelationsContactUpdatePayload',
    customerRelationsOrganizationCreate: 'CustomerRelationsOrganizationCreatePayload',
    customerRelationsOrganizationUpdate: 'CustomerRelationsOrganizationUpdatePayload',
    dastOnDemandScanCreate: 'DastOnDemandScanCreatePayload',
    dastProfileCreate: 'DastProfileCreatePayload',
    dastProfileDelete: 'DastProfileDeletePayload',
    dastProfileRun: 'DastProfileRunPayload',
    dastProfileUpdate: 'DastProfileUpdatePayload',
    dastScannerProfileCreate: 'DastScannerProfileCreatePayload',
    dastScannerProfileDelete: 'DastScannerProfileDeletePayload',
    dastScannerProfileUpdate: 'DastScannerProfileUpdatePayload',
    dastSiteProfileCreate: 'DastSiteProfileCreatePayload',
    dastSiteProfileDelete: 'DastSiteProfileDeletePayload',
    dastSiteProfileUpdate: 'DastSiteProfileUpdatePayload',
    dastSiteTokenCreate: 'DastSiteTokenCreatePayload',
    dastSiteValidationCreate: 'DastSiteValidationCreatePayload',
    dastSiteValidationRevoke: 'DastSiteValidationRevokePayload',
    deleteAnnotation: 'DeleteAnnotationPayload',
    designManagementDelete: 'DesignManagementDeletePayload',
    designManagementMove: 'DesignManagementMovePayload',
    designManagementUpdate: 'DesignManagementUpdatePayload',
    designManagementUpload: 'DesignManagementUploadPayload',
    destroyBoard: 'DestroyBoardPayload',
    destroyBoardList: 'DestroyBoardListPayload',
    destroyComplianceFramework: 'DestroyComplianceFrameworkPayload',
    destroyContainerRepository: 'DestroyContainerRepositoryPayload',
    destroyContainerRepositoryTags: 'DestroyContainerRepositoryTagsPayload',
    destroyCustomEmoji: 'DestroyCustomEmojiPayload',
    destroyEpicBoard: 'DestroyEpicBoardPayload',
    destroyNote: 'DestroyNotePayload',
    destroyPackage: 'DestroyPackagePayload',
    destroyPackageFile: 'DestroyPackageFilePayload',
    destroyPackageFiles: 'DestroyPackageFilesPayload',
    destroyPackages: 'DestroyPackagesPayload',
    destroySnippet: 'DestroySnippetPayload',
    disableDevopsAdoptionNamespace: 'DisableDevopsAdoptionNamespacePayload',
    discussionToggleResolve: 'DiscussionToggleResolvePayload',
    echoCreate: 'EchoCreatePayload',
    enableDevopsAdoptionNamespace: 'EnableDevopsAdoptionNamespacePayload',
    environmentCreate: 'EnvironmentCreatePayload',
    environmentDelete: 'EnvironmentDeletePayload',
    environmentStop: 'EnvironmentStopPayload',
    environmentUpdate: 'EnvironmentUpdatePayload',
    environmentsCanaryIngressUpdate: 'EnvironmentsCanaryIngressUpdatePayload',
    epicAddIssue: 'EpicAddIssuePayload',
    epicBoardCreate: 'EpicBoardCreatePayload',
    epicBoardListCreate: 'EpicBoardListCreatePayload',
    epicBoardListDestroy: 'EpicBoardListDestroyPayload',
    epicBoardUpdate: 'EpicBoardUpdatePayload',
    epicMoveList: 'EpicMoveListPayload',
    epicSetSubscription: 'EpicSetSubscriptionPayload',
    epicTreeReorder: 'EpicTreeReorderPayload',
    escalationPolicyCreate: 'EscalationPolicyCreatePayload',
    escalationPolicyDestroy: 'EscalationPolicyDestroyPayload',
    escalationPolicyUpdate: 'EscalationPolicyUpdatePayload',
    exportRequirements: 'ExportRequirementsPayload',
    externalAuditEventDestinationCreate: 'ExternalAuditEventDestinationCreatePayload',
    externalAuditEventDestinationDestroy: 'ExternalAuditEventDestinationDestroyPayload',
    externalAuditEventDestinationUpdate: 'ExternalAuditEventDestinationUpdatePayload',
    geoRegistriesUpdate: 'GeoRegistriesUpdatePayload',
    gitlabSubscriptionActivate: 'GitlabSubscriptionActivatePayload',
    googleCloudLoggingConfigurationCreate: 'GoogleCloudLoggingConfigurationCreatePayload',
    googleCloudLoggingConfigurationDestroy: 'GoogleCloudLoggingConfigurationDestroyPayload',
    googleCloudLoggingConfigurationUpdate: 'GoogleCloudLoggingConfigurationUpdatePayload',
    groupMemberBulkUpdate: 'GroupMemberBulkUpdatePayload',
    groupUpdate: 'GroupUpdatePayload',
    httpIntegrationCreate: 'HttpIntegrationCreatePayload',
    httpIntegrationDestroy: 'HttpIntegrationDestroyPayload',
    httpIntegrationResetToken: 'HttpIntegrationResetTokenPayload',
    httpIntegrationUpdate: 'HttpIntegrationUpdatePayload',
    instanceExternalAuditEventDestinationCreate:
      'InstanceExternalAuditEventDestinationCreatePayload',
    instanceExternalAuditEventDestinationDestroy:
      'InstanceExternalAuditEventDestinationDestroyPayload',
    instanceExternalAuditEventDestinationUpdate:
      'InstanceExternalAuditEventDestinationUpdatePayload',
    issuableResourceLinkCreate: 'IssuableResourceLinkCreatePayload',
    issuableResourceLinkDestroy: 'IssuableResourceLinkDestroyPayload',
    issueLinkAlerts: 'IssueLinkAlertsPayload',
    issueMove: 'IssueMovePayload',
    issueMoveList: 'IssueMoveListPayload',
    issueSetAssignees: 'IssueSetAssigneesPayload',
    issueSetConfidential: 'IssueSetConfidentialPayload',
    issueSetCrmContacts: 'IssueSetCrmContactsPayload',
    issueSetDueDate: 'IssueSetDueDatePayload',
    issueSetEpic: 'IssueSetEpicPayload',
    issueSetEscalationPolicy: 'IssueSetEscalationPolicyPayload',
    issueSetEscalationStatus: 'IssueSetEscalationStatusPayload',
    issueSetIteration: 'IssueSetIterationPayload',
    issueSetLocked: 'IssueSetLockedPayload',
    issueSetSeverity: 'IssueSetSeverityPayload',
    issueSetSubscription: 'IssueSetSubscriptionPayload',
    issueSetWeight: 'IssueSetWeightPayload',
    issueUnlinkAlert: 'IssueUnlinkAlertPayload',
    issuesBulkUpdate: 'IssuesBulkUpdatePayload',
    iterationCadenceCreate: 'IterationCadenceCreatePayload',
    iterationCadenceDestroy: 'IterationCadenceDestroyPayload',
    iterationCadenceUpdate: 'IterationCadenceUpdatePayload',
    iterationCreate: 'iterationCreatePayload',
    iterationDelete: 'IterationDeletePayload',
    jiraImportStart: 'JiraImportStartPayload',
    jiraImportUsers: 'JiraImportUsersPayload',
    jobArtifactsDestroy: 'JobArtifactsDestroyPayload',
    jobCancel: 'JobCancelPayload',
    jobPlay: 'JobPlayPayload',
    jobRetry: 'JobRetryPayload',
    jobUnschedule: 'JobUnschedulePayload',
    labelCreate: 'LabelCreatePayload',
    markAsSpamSnippet: 'MarkAsSpamSnippetPayload',
    mergeRequestAccept: 'MergeRequestAcceptPayload',
    mergeRequestCreate: 'MergeRequestCreatePayload',
    mergeRequestReviewerRereview: 'MergeRequestReviewerRereviewPayload',
    mergeRequestSetAssignees: 'MergeRequestSetAssigneesPayload',
    mergeRequestSetDraft: 'MergeRequestSetDraftPayload',
    mergeRequestSetLabels: 'MergeRequestSetLabelsPayload',
    mergeRequestSetLocked: 'MergeRequestSetLockedPayload',
    mergeRequestSetMilestone: 'MergeRequestSetMilestonePayload',
    mergeRequestSetReviewers: 'MergeRequestSetReviewersPayload',
    mergeRequestSetSubscription: 'MergeRequestSetSubscriptionPayload',
    mergeRequestUpdate: 'MergeRequestUpdatePayload',
    mergeRequestUpdateApprovalRule: 'MergeRequestUpdateApprovalRulePayload',
    namespaceBanDestroy: 'NamespaceBanDestroyPayload',
    namespaceCiCdSettingsUpdate: 'NamespaceCiCdSettingsUpdatePayload',
    namespaceIncreaseStorageTemporarily: 'NamespaceIncreaseStorageTemporarilyPayload',
    oncallRotationCreate: 'OncallRotationCreatePayload',
    oncallRotationDestroy: 'OncallRotationDestroyPayload',
    oncallRotationUpdate: 'OncallRotationUpdatePayload',
    oncallScheduleCreate: 'OncallScheduleCreatePayload',
    oncallScheduleDestroy: 'OncallScheduleDestroyPayload',
    oncallScheduleUpdate: 'OncallScheduleUpdatePayload',
    pagesMarkOnboardingComplete: 'PagesMarkOnboardingCompletePayload',
    pipelineCancel: 'PipelineCancelPayload',
    pipelineDestroy: 'PipelineDestroyPayload',
    pipelineRetry: 'PipelineRetryPayload',
    pipelineScheduleCreate: 'PipelineScheduleCreatePayload',
    pipelineScheduleDelete: 'PipelineScheduleDeletePayload',
    pipelineSchedulePlay: 'PipelineSchedulePlayPayload',
    pipelineScheduleTakeOwnership: 'PipelineScheduleTakeOwnershipPayload',
    pipelineScheduleUpdate: 'PipelineScheduleUpdatePayload',
    projectCiCdSettingsUpdate: 'ProjectCiCdSettingsUpdatePayload',
    projectInitializeProductAnalytics: 'ProjectInitializeProductAnalyticsPayload',
    projectMemberBulkUpdate: 'ProjectMemberBulkUpdatePayload',
    projectSetComplianceFramework: 'ProjectSetComplianceFrameworkPayload',
    projectSetLocked: 'ProjectSetLockedPayload',
    projectSyncFork: 'ProjectSyncForkPayload',
    prometheusIntegrationCreate: 'PrometheusIntegrationCreatePayload',
    prometheusIntegrationResetToken: 'PrometheusIntegrationResetTokenPayload',
    prometheusIntegrationUpdate: 'PrometheusIntegrationUpdatePayload',
    promoteToEpic: 'PromoteToEpicPayload',
    releaseAssetLinkCreate: 'ReleaseAssetLinkCreatePayload',
    releaseAssetLinkDelete: 'ReleaseAssetLinkDeletePayload',
    releaseAssetLinkUpdate: 'ReleaseAssetLinkUpdatePayload',
    releaseCreate: 'ReleaseCreatePayload',
    releaseDelete: 'ReleaseDeletePayload',
    releaseUpdate: 'ReleaseUpdatePayload',
    removeProjectFromSecurityDashboard: 'RemoveProjectFromSecurityDashboardPayload',
    repositionImageDiffNote: 'RepositionImageDiffNotePayload',
    runnerCreate: 'RunnerCreatePayload',
    runnerDelete: 'RunnerDeletePayload',
    runnerUpdate: 'RunnerUpdatePayload',
    runnersRegistrationTokenReset: 'RunnersRegistrationTokenResetPayload',
    savedReplyCreate: 'SavedReplyCreatePayload',
    savedReplyDestroy: 'SavedReplyDestroyPayload',
    savedReplyUpdate: 'SavedReplyUpdatePayload',
    scanExecutionPolicyCommit: 'ScanExecutionPolicyCommitPayload',
    securityFindingCreateIssue: 'SecurityFindingCreateIssuePayload',
    securityFindingCreateMergeRequest: 'SecurityFindingCreateMergeRequestPayload',
    securityFindingDismiss: 'SecurityFindingDismissPayload',
    securityFindingRevertToDetected: 'SecurityFindingRevertToDetectedPayload',
    securityPolicyProjectAssign: 'SecurityPolicyProjectAssignPayload',
    securityPolicyProjectCreate: 'SecurityPolicyProjectCreatePayload',
    securityPolicyProjectUnassign: 'SecurityPolicyProjectUnassignPayload',
    securityTrainingUpdate: 'SecurityTrainingUpdatePayload',
    terraformStateDelete: 'TerraformStateDeletePayload',
    terraformStateLock: 'TerraformStateLockPayload',
    terraformStateUnlock: 'TerraformStateUnlockPayload',
    timelineEventCreate: 'TimelineEventCreatePayload',
    timelineEventDestroy: 'TimelineEventDestroyPayload',
    timelineEventPromoteFromNote: 'TimelineEventPromoteFromNotePayload',
    timelineEventTagCreate: 'TimelineEventTagCreatePayload',
    timelineEventUpdate: 'TimelineEventUpdatePayload',
    timelogCreate: 'TimelogCreatePayload',
    timelogDelete: 'TimelogDeletePayload',
    todoCreate: 'TodoCreatePayload',
    todoMarkDone: 'TodoMarkDonePayload',
    todoRestore: 'TodoRestorePayload',
    todoRestoreMany: 'TodoRestoreManyPayload',
    todosMarkAllDone: 'TodosMarkAllDonePayload',
    updateAlertStatus: 'UpdateAlertStatusPayload',
    updateBoard: 'UpdateBoardPayload',
    updateBoardEpicUserPreferences: 'UpdateBoardEpicUserPreferencesPayload',
    updateBoardList: 'UpdateBoardListPayload',
    updateComplianceFramework: 'UpdateComplianceFrameworkPayload',
    updateContainerExpirationPolicy: 'UpdateContainerExpirationPolicyPayload',
    updateDependencyProxyImageTtlGroupPolicy: 'UpdateDependencyProxyImageTtlGroupPolicyPayload',
    updateDependencyProxySettings: 'UpdateDependencyProxySettingsPayload',
    updateEpic: 'UpdateEpicPayload',
    updateEpicBoardList: 'UpdateEpicBoardListPayload',
    updateImageDiffNote: 'UpdateImageDiffNotePayload',
    updateIssue: 'UpdateIssuePayload',
    updateIteration: 'UpdateIterationPayload',
    updateNamespacePackageSettings: 'UpdateNamespacePackageSettingsPayload',
    updateNote: 'UpdateNotePayload',
    updatePackagesCleanupPolicy: 'UpdatePackagesCleanupPolicyPayload',
    updateRequirement: 'UpdateRequirementPayload',
    updateSnippet: 'UpdateSnippetPayload',
    uploadDelete: 'UploadDeletePayload',
    userCalloutCreate: 'UserCalloutCreatePayload',
    userPreferencesUpdate: 'UserPreferencesUpdatePayload',
    vulnerabilityConfirm: 'VulnerabilityConfirmPayload',
    vulnerabilityCreate: 'VulnerabilityCreatePayload',
    vulnerabilityDismiss: 'VulnerabilityDismissPayload',
    vulnerabilityExternalIssueLinkCreate: 'VulnerabilityExternalIssueLinkCreatePayload',
    vulnerabilityExternalIssueLinkDestroy: 'VulnerabilityExternalIssueLinkDestroyPayload',
    vulnerabilityIssueLinkCreate: 'VulnerabilityIssueLinkCreatePayload',
    vulnerabilityResolve: 'VulnerabilityResolvePayload',
    vulnerabilityRevertToDetected: 'VulnerabilityRevertToDetectedPayload',
    workItemConvert: 'WorkItemConvertPayload',
    workItemCreate: 'WorkItemCreatePayload',
    workItemCreateFromTask: 'WorkItemCreateFromTaskPayload',
    workItemDelete: 'WorkItemDeletePayload',
    workItemDeleteTask: 'WorkItemDeleteTaskPayload',
    workItemExport: 'WorkItemExportPayload',
    workItemUpdate: 'WorkItemUpdatePayload',
    workItemUpdateTask: 'WorkItemUpdateTaskPayload',
    workspaceCreate: 'WorkspaceCreatePayload',
    workspaceUpdate: 'WorkspaceUpdatePayload',
  },
  Namespace: {
    achievements: 'AchievementConnection',
    actualRepositorySizeLimit: 'Float',
    additionalPurchasedStorageSize: 'Float',
    complianceFrameworks: 'ComplianceFrameworkConnection',
    containsLockedProjects: 'Boolean',
    crossProjectPipelineAvailable: 'Boolean',
    description: 'String',
    descriptionHtml: 'String',
    fullName: 'String',
    fullPath: 'ID',
    id: 'ID',
    isTemporaryStorageIncreaseEnabled: 'Boolean',
    lfsEnabled: 'Boolean',
    name: 'String',
    packageSettings: 'PackageSettings',
    path: 'String',
    projects: 'ProjectConnection',
    repositorySizeExcessProjectCount: 'Int',
    requestAccessEnabled: 'Boolean',
    rootStorageStatistics: 'RootStorageStatistics',
    scanExecutionPolicies: 'ScanExecutionPolicyConnection',
    scanResultPolicies: 'ScanResultPolicyConnection',
    sharedRunnersSetting: 'SharedRunnersSetting',
    storageSizeLimit: 'Float',
    temporaryStorageIncreaseEndsOn: 'Time',
    timelogCategories: 'TimeTrackingTimelogCategoryConnection',
    totalRepositorySize: 'Float',
    totalRepositorySizeExcess: 'Float',
    visibility: 'String',
  },
  NamespaceBan: {
    id: 'GlobalID',
    namespace: 'Namespace',
    user: 'UserCore',
  },
  NamespaceBanDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    namespaceBan: 'NamespaceBan',
  },
  NamespaceCiCdSetting: {
    allowStaleRunnerPruning: 'Boolean',
    namespace: 'Namespace',
  },
  NamespaceCiCdSettingsUpdatePayload: {
    ciCdSettings: 'NamespaceCiCdSetting',
    clientMutationId: 'String',
    errors: 'String',
  },
  NamespaceCommitEmail: {
    createdAt: 'Time',
    email: 'Email',
    id: 'ID',
    namespace: 'Namespace',
    updatedAt: 'Time',
  },
  NamespaceCommitEmailConnection: {
    edges: 'NamespaceCommitEmailEdge',
    nodes: 'NamespaceCommitEmail',
    pageInfo: 'PageInfo',
  },
  NamespaceCommitEmailEdge: {
    cursor: 'String',
    node: 'NamespaceCommitEmail',
  },
  NamespaceConnection: {
    edges: 'NamespaceEdge',
    nodes: 'Namespace',
    pageInfo: 'PageInfo',
  },
  NamespaceEdge: {
    cursor: 'String',
    node: 'Namespace',
  },
  NamespaceIncreaseStorageTemporarilyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    namespace: 'Namespace',
  },
  NestedEnvironment: {
    environment: 'Environment',
    name: 'String',
    size: 'Int',
  },
  NestedEnvironmentConnection: {
    edges: 'NestedEnvironmentEdge',
    nodes: 'NestedEnvironment',
    pageInfo: 'PageInfo',
  },
  NestedEnvironmentEdge: {
    cursor: 'String',
    node: 'NestedEnvironment',
  },
  NetworkPolicy: {
    enabled: 'Boolean',
    environments: 'EnvironmentConnection',
    fromAutoDevops: 'Boolean',
    kind: 'NetworkPolicyKind',
    name: 'String',
    namespace: 'String',
    updatedAt: 'Time',
    yaml: 'String',
  },
  NetworkPolicyConnection: {
    edges: 'NetworkPolicyEdge',
    nodes: 'NetworkPolicy',
    pageInfo: 'PageInfo',
  },
  NetworkPolicyEdge: {
    cursor: 'String',
    node: 'NetworkPolicy',
  },
  Note: {
    author: 'UserCore',
    authorIsContributor: 'Boolean',
    awardEmoji: 'AwardEmojiConnection',
    body: 'String',
    bodyHtml: 'String',
    confidential: 'Boolean',
    createdAt: 'Time',
    discussion: 'Discussion',
    id: 'NoteID',
    internal: 'Boolean',
    lastEditedAt: 'Time',
    lastEditedBy: 'UserCore',
    maxAccessLevelOfAuthor: 'String',
    position: 'DiffPosition',
    project: 'Project',
    resolvable: 'Boolean',
    resolved: 'Boolean',
    resolvedAt: 'Time',
    resolvedBy: 'UserCore',
    system: 'Boolean',
    systemNoteIconName: 'String',
    systemNoteMetadata: 'SystemNoteMetadata',
    updatedAt: 'Time',
    url: 'String',
    userPermissions: 'NotePermissions',
  },
  NoteConnection: {
    edges: 'NoteEdge',
    nodes: 'Note',
    pageInfo: 'PageInfo',
  },
  NoteEdge: {
    cursor: 'String',
    node: 'Note',
  },
  NotePermissions: {
    adminNote: 'Boolean',
    awardEmoji: 'Boolean',
    createNote: 'Boolean',
    readNote: 'Boolean',
    repositionNote: 'Boolean',
    resolveNote: 'Boolean',
  },
  NoteableInterface: {
    '...on AlertManagementAlert': 'AlertManagementAlert',
    '...on BoardEpic': 'BoardEpic',
    '...on Design': 'Design',
    '...on Epic': 'Epic',
    '...on EpicIssue': 'EpicIssue',
    '...on Issue': 'Issue',
    '...on MergeRequest': 'MergeRequest',
    '...on Snippet': 'Snippet',
    '...on Vulnerability': 'Vulnerability',
    commenters: 'UserCoreConnection',
    discussions: 'DiscussionConnection',
    notes: 'NoteConnection',
  },
  NoteableType: {
    '...on Design': 'Design',
    '...on Issue': 'Issue',
    '...on MergeRequest': 'MergeRequest',
  },
  NugetDependencyLinkMetadata: {
    id: 'PackagesNugetDependencyLinkMetadatumID',
    targetFramework: 'String',
  },
  NugetMetadata: {
    iconUrl: 'String',
    id: 'PackagesNugetMetadatumID',
    licenseUrl: 'String',
    projectUrl: 'String',
  },
  OncallParticipantType: {
    colorPalette: 'String',
    colorWeight: 'String',
    id: 'IncidentManagementOncallParticipantID',
    user: 'UserCore',
  },
  OncallParticipantTypeConnection: {
    edges: 'OncallParticipantTypeEdge',
    nodes: 'OncallParticipantType',
    pageInfo: 'PageInfo',
  },
  OncallParticipantTypeEdge: {
    cursor: 'String',
    node: 'OncallParticipantType',
  },
  OncallRotationActivePeriodType: {
    endTime: 'String',
    startTime: 'String',
  },
  OncallRotationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    oncallRotation: 'IncidentManagementOncallRotation',
  },
  OncallRotationDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    oncallRotation: 'IncidentManagementOncallRotation',
  },
  OncallRotationUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    oncallRotation: 'IncidentManagementOncallRotation',
  },
  OncallScheduleCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    oncallSchedule: 'IncidentManagementOncallSchedule',
  },
  OncallScheduleDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    oncallSchedule: 'IncidentManagementOncallSchedule',
  },
  OncallScheduleUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    oncallSchedule: 'IncidentManagementOncallSchedule',
  },
  OrchestrationPolicy: {
    '...on ScanExecutionPolicy': 'ScanExecutionPolicy',
    '...on ScanResultPolicy': 'ScanResultPolicy',
    description: 'String',
    enabled: 'Boolean',
    name: 'String',
    updatedAt: 'Time',
    yaml: 'String',
  },
  OrganizationStateCounts: {
    active: 'Int',
    all: 'Int',
    inactive: 'Int',
  },
  Package: {
    _links: 'PackageLinks',
    canDestroy: 'Boolean',
    createdAt: 'Time',
    id: 'PackagesPackageID',
    metadata: 'PackageMetadata',
    name: 'String',
    packageType: 'PackageTypeEnum',
    pipelines: 'PipelineConnection',
    project: 'Project',
    status: 'PackageStatus',
    tags: 'PackageTagConnection',
    updatedAt: 'Time',
    version: 'String',
  },
  PackageBase: {
    _links: 'PackageLinks',
    canDestroy: 'Boolean',
    createdAt: 'Time',
    id: 'PackagesPackageID',
    metadata: 'PackageMetadata',
    name: 'String',
    packageType: 'PackageTypeEnum',
    project: 'Project',
    status: 'PackageStatus',
    tags: 'PackageTagConnection',
    updatedAt: 'Time',
    version: 'String',
  },
  PackageBaseConnection: {
    count: 'Int',
    edges: 'PackageBaseEdge',
    nodes: 'PackageBase',
    pageInfo: 'PageInfo',
  },
  PackageBaseEdge: {
    cursor: 'String',
    node: 'PackageBase',
  },
  PackageComposerJsonType: {
    license: 'String',
    name: 'String',
    type: 'String',
    version: 'String',
  },
  PackageConnection: {
    count: 'Int',
    edges: 'PackageEdge',
    nodes: 'Package',
    pageInfo: 'PageInfo',
  },
  PackageDependency: {
    id: 'PackagesDependencyID',
    name: 'String',
    versionPattern: 'String',
  },
  PackageDependencyLink: {
    dependency: 'PackageDependency',
    dependencyType: 'PackageDependencyType',
    id: 'PackagesDependencyLinkID',
    metadata: 'DependencyLinkMetadata',
  },
  PackageDependencyLinkConnection: {
    edges: 'PackageDependencyLinkEdge',
    nodes: 'PackageDependencyLink',
    pageInfo: 'PageInfo',
  },
  PackageDependencyLinkEdge: {
    cursor: 'String',
    node: 'PackageDependencyLink',
  },
  PackageDetailsType: {
    _links: 'PackageLinks',
    canDestroy: 'Boolean',
    composerConfigRepositoryUrl: 'String',
    composerUrl: 'String',
    conanUrl: 'String',
    createdAt: 'Time',
    dependencyLinks: 'PackageDependencyLinkConnection',
    id: 'PackagesPackageID',
    lastDownloadedAt: 'Time',
    mavenUrl: 'String',
    metadata: 'PackageMetadata',
    name: 'String',
    npmUrl: 'String',
    nugetUrl: 'String',
    packageFiles: 'PackageFileConnection',
    packageType: 'PackageTypeEnum',
    pipelines: 'PipelineConnection',
    project: 'Project',
    publicPackage: 'Boolean',
    pypiSetupUrl: 'String',
    pypiUrl: 'String',
    status: 'PackageStatus',
    tags: 'PackageTagConnection',
    updatedAt: 'Time',
    version: 'String',
    versions: 'PackageBaseConnection',
  },
  PackageEdge: {
    cursor: 'String',
    node: 'Package',
  },
  PackageFile: {
    createdAt: 'Time',
    downloadPath: 'String',
    fileMd5: 'String',
    fileMetadata: 'PackageFileMetadata',
    fileName: 'String',
    fileSha1: 'String',
    fileSha256: 'String',
    id: 'PackagesPackageFileID',
    size: 'String',
    updatedAt: 'Time',
  },
  PackageFileConnection: {
    edges: 'PackageFileEdge',
    nodes: 'PackageFile',
    pageInfo: 'PageInfo',
  },
  PackageFileEdge: {
    cursor: 'String',
    node: 'PackageFile',
  },
  PackageFileMetadata: {
    '...on ConanFileMetadata': 'ConanFileMetadata',
    '...on HelmFileMetadata': 'HelmFileMetadata',
    createdAt: 'Time',
    updatedAt: 'Time',
  },
  PackageFileRegistry: {
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    packageFileId: 'ID',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  PackageFileRegistryConnection: {
    edges: 'PackageFileRegistryEdge',
    nodes: 'PackageFileRegistry',
    pageInfo: 'PageInfo',
  },
  PackageFileRegistryEdge: {
    cursor: 'String',
    node: 'PackageFileRegistry',
  },
  PackageHelmDependencyType: {
    alias: 'String',
    condition: 'String',
    enabled: 'Boolean',
    importValues: 'JSON',
    name: 'String',
    repository: 'String',
    tags: 'String',
    version: 'String',
  },
  PackageHelmMaintainerType: {
    email: 'String',
    name: 'String',
    url: 'String',
  },
  PackageHelmMetadataType: {
    annotations: 'JSON',
    apiVersion: 'String',
    appVersion: 'String',
    condition: 'String',
    dependencies: 'PackageHelmDependencyType',
    deprecated: 'Boolean',
    description: 'String',
    home: 'String',
    icon: 'String',
    keywords: 'String',
    kubeVersion: 'String',
    maintainers: 'PackageHelmMaintainerType',
    name: 'String',
    sources: 'String',
    tags: 'String',
    type: 'String',
    version: 'String',
  },
  PackageLinks: {
    webPath: 'String',
  },
  PackageMetadata: {
    '...on ComposerMetadata': 'ComposerMetadata',
    '...on ConanMetadata': 'ConanMetadata',
    '...on MavenMetadata': 'MavenMetadata',
    '...on NugetMetadata': 'NugetMetadata',
    '...on PypiMetadata': 'PypiMetadata',
  },
  PackageSettings: {
    genericDuplicateExceptionRegex: 'UntrustedRegexp',
    genericDuplicatesAllowed: 'Boolean',
    lockMavenPackageRequestsForwarding: 'Boolean',
    lockNpmPackageRequestsForwarding: 'Boolean',
    lockPypiPackageRequestsForwarding: 'Boolean',
    mavenDuplicateExceptionRegex: 'UntrustedRegexp',
    mavenDuplicatesAllowed: 'Boolean',
    mavenPackageRequestsForwarding: 'Boolean',
    mavenPackageRequestsForwardingLocked: 'Boolean',
    npmPackageRequestsForwarding: 'Boolean',
    npmPackageRequestsForwardingLocked: 'Boolean',
    pypiPackageRequestsForwarding: 'Boolean',
    pypiPackageRequestsForwardingLocked: 'Boolean',
  },
  PackageTag: {
    createdAt: 'Time',
    id: 'ID',
    name: 'String',
    updatedAt: 'Time',
  },
  PackageTagConnection: {
    edges: 'PackageTagEdge',
    nodes: 'PackageTag',
    pageInfo: 'PageInfo',
  },
  PackageTagEdge: {
    cursor: 'String',
    node: 'PackageTag',
  },
  PackagesCleanupPolicy: {
    keepNDuplicatedPackageFiles: 'PackagesCleanupKeepDuplicatedPackageFilesEnum',
    nextRunAt: 'Time',
  },
  PageInfo: {
    endCursor: 'String',
    hasNextPage: 'Boolean',
    hasPreviousPage: 'Boolean',
    startCursor: 'String',
  },
  PagesDeploymentRegistry: {
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    pagesDeploymentId: 'ID',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  PagesDeploymentRegistryConnection: {
    edges: 'PagesDeploymentRegistryEdge',
    nodes: 'PagesDeploymentRegistry',
    pageInfo: 'PageInfo',
  },
  PagesDeploymentRegistryEdge: {
    cursor: 'String',
    node: 'PagesDeploymentRegistry',
  },
  PagesMarkOnboardingCompletePayload: {
    clientMutationId: 'String',
    errors: 'String',
    onboardingComplete: 'Boolean',
  },
  PathLock: {
    id: 'PathLockID',
    path: 'String',
    user: 'UserCore',
  },
  PathLockConnection: {
    edges: 'PathLockEdge',
    nodes: 'PathLock',
    pageInfo: 'PageInfo',
  },
  PathLockEdge: {
    cursor: 'String',
    node: 'PathLock',
  },
  Pipeline: {
    active: 'Boolean',
    beforeSha: 'String',
    cancelable: 'Boolean',
    codeQualityReportSummary: 'CodeQualityReportSummary',
    codeQualityReports: 'CodeQualityDegradationConnection',
    commit: 'Commit',
    commitPath: 'String',
    committedAt: 'Time',
    complete: 'Boolean',
    configSource: 'PipelineConfigSourceEnum',
    coverage: 'Float',
    createdAt: 'Time',
    dastProfile: 'DastProfile',
    detailedStatus: 'DetailedStatus',
    downstream: 'PipelineConnection',
    duration: 'Int',
    finishedAt: 'Time',
    id: 'ID',
    iid: 'String',
    job: 'CiJob',
    jobArtifacts: 'CiJobArtifact',
    jobs: 'CiJobConnection',
    mergeRequestEventType: 'PipelineMergeRequestEventType',
    path: 'String',
    project: 'Project',
    queuedDuration: 'Duration',
    ref: 'String',
    refPath: 'String',
    retryable: 'Boolean',
    securityReportFinding: 'PipelineSecurityReportFinding',
    securityReportFindings: 'PipelineSecurityReportFindingConnection',
    securityReportSummary: 'SecurityReportSummary',
    sha: 'String',
    sourceJob: 'CiJob',
    stages: 'CiStageConnection',
    startedAt: 'Time',
    status: 'PipelineStatusEnum',
    testReportSummary: 'TestReportSummary',
    testSuite: 'TestSuite',
    updatedAt: 'Time',
    upstream: 'Pipeline',
    user: 'UserCore',
    userPermissions: 'PipelinePermissions',
    usesNeeds: 'Boolean',
    warningMessages: 'PipelineMessage',
    warnings: 'Boolean',
  },
  PipelineAnalytics: {
    monthPipelinesLabels: 'String',
    monthPipelinesSuccessful: 'Int',
    monthPipelinesTotals: 'Int',
    pipelineTimesLabels: 'String',
    pipelineTimesValues: 'Int',
    weekPipelinesLabels: 'String',
    weekPipelinesSuccessful: 'Int',
    weekPipelinesTotals: 'Int',
    yearPipelinesLabels: 'String',
    yearPipelinesSuccessful: 'Int',
    yearPipelinesTotals: 'Int',
  },
  PipelineArtifactRegistry: {
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    pipelineArtifactId: 'ID',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  PipelineArtifactRegistryConnection: {
    edges: 'PipelineArtifactRegistryEdge',
    nodes: 'PipelineArtifactRegistry',
    pageInfo: 'PageInfo',
  },
  PipelineArtifactRegistryEdge: {
    cursor: 'String',
    node: 'PipelineArtifactRegistry',
  },
  PipelineCancelPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  PipelineConnection: {
    count: 'Int',
    edges: 'PipelineEdge',
    nodes: 'Pipeline',
    pageInfo: 'PageInfo',
  },
  PipelineCounts: {
    all: 'Int',
    finished: 'Int',
    pending: 'Int',
    running: 'Int',
  },
  PipelineDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  PipelineEdge: {
    cursor: 'String',
    node: 'Pipeline',
  },
  PipelineMessage: {
    content: 'String',
    id: 'ID',
  },
  PipelinePermissions: {
    adminPipeline: 'Boolean',
    destroyPipeline: 'Boolean',
    updatePipeline: 'Boolean',
  },
  PipelineRetryPayload: {
    clientMutationId: 'String',
    errors: 'String',
    pipeline: 'Pipeline',
  },
  PipelineSchedule: {
    active: 'Boolean',
    createdAt: 'Time',
    cron: 'String',
    cronTimezone: 'String',
    description: 'String',
    editPath: 'String',
    forTag: 'Boolean',
    id: 'ID',
    lastPipeline: 'Pipeline',
    nextRunAt: 'Time',
    owner: 'UserCore',
    project: 'Project',
    realNextRun: 'Time',
    ref: 'String',
    refForDisplay: 'String',
    refPath: 'String',
    updatedAt: 'Time',
    userPermissions: 'PipelineSchedulePermissions',
    variables: 'PipelineScheduleVariableConnection',
  },
  PipelineScheduleConnection: {
    count: 'Int',
    edges: 'PipelineScheduleEdge',
    nodes: 'PipelineSchedule',
    pageInfo: 'PageInfo',
  },
  PipelineScheduleCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    pipelineSchedule: 'PipelineSchedule',
  },
  PipelineScheduleDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  PipelineScheduleEdge: {
    cursor: 'String',
    node: 'PipelineSchedule',
  },
  PipelineSchedulePermissions: {
    adminPipelineSchedule: 'Boolean',
    playPipelineSchedule: 'Boolean',
    takeOwnershipPipelineSchedule: 'Boolean',
    updatePipelineSchedule: 'Boolean',
  },
  PipelineSchedulePlayPayload: {
    clientMutationId: 'String',
    errors: 'String',
    pipelineSchedule: 'PipelineSchedule',
  },
  PipelineScheduleTakeOwnershipPayload: {
    clientMutationId: 'String',
    errors: 'String',
    pipelineSchedule: 'PipelineSchedule',
  },
  PipelineScheduleUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    pipelineSchedule: 'PipelineSchedule',
  },
  PipelineScheduleVariable: {
    id: 'ID',
    key: 'String',
    raw: 'Boolean',
    value: 'String',
    variableType: 'CiVariableType',
  },
  PipelineScheduleVariableConnection: {
    edges: 'PipelineScheduleVariableEdge',
    nodes: 'PipelineScheduleVariable',
    pageInfo: 'PageInfo',
  },
  PipelineScheduleVariableEdge: {
    cursor: 'String',
    node: 'PipelineScheduleVariable',
  },
  PipelineSecurityReportFinding: {
    assets: 'AssetType',
    description: 'String',
    descriptionHtml: 'String',
    details: 'VulnerabilityDetail',
    dismissalReason: 'VulnerabilityDismissalReason',
    dismissedAt: 'Time',
    dismissedBy: 'UserCore',
    evidence: 'VulnerabilityEvidence',
    falsePositive: 'Boolean',
    identifiers: 'VulnerabilityIdentifier',
    issueLinks: 'VulnerabilityIssueLinkConnection',
    links: 'VulnerabilityLink',
    location: 'VulnerabilityLocation',
    mergeRequest: 'MergeRequest',
    project: 'Project',
    projectFingerprint: 'String',
    remediations: 'VulnerabilityRemediationType',
    reportType: 'VulnerabilityReportType',
    scanner: 'VulnerabilityScanner',
    severity: 'VulnerabilitySeverity',
    solution: 'String',
    state: 'VulnerabilityState',
    stateComment: 'String',
    title: 'String',
    uuid: 'String',
    vulnerability: 'Vulnerability',
  },
  PipelineSecurityReportFindingConnection: {
    edges: 'PipelineSecurityReportFindingEdge',
    nodes: 'PipelineSecurityReportFinding',
    pageInfo: 'PageInfo',
  },
  PipelineSecurityReportFindingEdge: {
    cursor: 'String',
    node: 'PipelineSecurityReportFinding',
  },
  PreviewBillableUserChange: {
    newBillableUserCount: 'Int',
    seatsInSubscription: 'Int',
    willIncreaseOverage: 'Boolean',
  },
  ProductAnalyticsDashboard: {
    description: 'String',
    panels: 'ProductAnalyticsDashboardPanelConnection',
    slug: 'String',
    title: 'String',
    userDefined: 'Boolean',
  },
  ProductAnalyticsDashboardConnection: {
    edges: 'ProductAnalyticsDashboardEdge',
    nodes: 'ProductAnalyticsDashboard',
    pageInfo: 'PageInfo',
  },
  ProductAnalyticsDashboardEdge: {
    cursor: 'String',
    node: 'ProductAnalyticsDashboard',
  },
  ProductAnalyticsDashboardPanel: {
    gridAttributes: 'JSON',
    title: 'String',
    visualization: 'ProductAnalyticsDashboardVisualization',
  },
  ProductAnalyticsDashboardPanelConnection: {
    edges: 'ProductAnalyticsDashboardPanelEdge',
    nodes: 'ProductAnalyticsDashboardPanel',
    pageInfo: 'PageInfo',
  },
  ProductAnalyticsDashboardPanelEdge: {
    cursor: 'String',
    node: 'ProductAnalyticsDashboardPanel',
  },
  ProductAnalyticsDashboardVisualization: {
    data: 'JSON',
    options: 'JSON',
    slug: 'String',
    type: 'String',
  },
  ProductAnalyticsDashboardVisualizationConnection: {
    edges: 'ProductAnalyticsDashboardVisualizationEdge',
    nodes: 'ProductAnalyticsDashboardVisualization',
    pageInfo: 'PageInfo',
  },
  ProductAnalyticsDashboardVisualizationEdge: {
    cursor: 'String',
    node: 'ProductAnalyticsDashboardVisualization',
  },
  Project: {
    actualRepositorySizeLimit: 'Float',
    agentConfigurations: 'AgentConfigurationConnection',
    aiConversations: 'ProjectConversations',
    alertManagementAlert: 'AlertManagementAlert',
    alertManagementAlertStatusCounts: 'AlertManagementAlertStatusCountsType',
    alertManagementAlerts: 'AlertManagementAlertConnection',
    alertManagementHttpIntegrations: 'AlertManagementHttpIntegrationConnection',
    alertManagementIntegrations: 'AlertManagementIntegrationConnection',
    alertManagementPayloadFields: 'AlertManagementPayloadAlertField',
    allowMergeOnSkippedPipeline: 'Boolean',
    apiFuzzingCiConfiguration: 'ApiFuzzingCiConfiguration',
    archived: 'Boolean',
    autocloseReferencedIssues: 'Boolean',
    avatarUrl: 'String',
    board: 'Board',
    boards: 'BoardConnection',
    branchRules: 'BranchRuleConnection',
    ciAccessAuthorizedAgents: 'ClusterAgentAuthorizationCiAccessConnection',
    ciCdSettings: 'ProjectCiCdSetting',
    ciConfigPathOrDefault: 'String',
    ciConfigVariables: 'CiConfigVariable',
    ciJobTokenScope: 'CiJobTokenScopeType',
    ciTemplate: 'CiTemplate',
    ciVariables: 'CiProjectVariableConnection',
    clusterAgent: 'ClusterAgent',
    clusterAgents: 'ClusterAgentConnection',
    codeCoverageSummary: 'CodeCoverageSummary',
    commitReferences: 'CommitReferences',
    complianceFrameworks: 'ComplianceFrameworkConnection',
    containerExpirationPolicy: 'ContainerExpirationPolicy',
    containerRegistryEnabled: 'Boolean',
    containerRepositories: 'ContainerRepositoryConnection',
    containerRepositoriesCount: 'Int',
    corpuses: 'CoverageFuzzingCorpusConnection',
    createdAt: 'Time',
    dastProfile: 'DastProfile',
    dastProfiles: 'DastProfileConnection',
    dastScannerProfiles: 'DastScannerProfileConnection',
    dastSiteProfile: 'DastSiteProfile',
    dastSiteProfiles: 'DastSiteProfileConnection',
    dastSiteValidations: 'DastSiteValidationConnection',
    dataTransfer: 'ProjectDataTransfer',
    dependencies: 'DependencyConnection',
    deployment: 'Deployment',
    description: 'String',
    descriptionHtml: 'String',
    dora: 'Dora',
    environment: 'Environment',
    environments: 'EnvironmentConnection',
    flowMetrics: 'ProjectValueStreamAnalyticsFlowMetrics',
    forkDetails: 'ForkDetails',
    forkTargets: 'NamespaceConnection',
    forksCount: 'Int',
    fullPath: 'ID',
    gitlabSubscriptionsPreviewBillableUserChange: 'PreviewBillableUserChange',
    grafanaIntegration: 'GrafanaIntegration',
    group: 'Group',
    hasJiraVulnerabilityIssueCreationEnabled: 'Boolean',
    httpUrlToRepo: 'String',
    id: 'ID',
    importStatus: 'String',
    incidentManagementEscalationPolicies: 'EscalationPolicyTypeConnection',
    incidentManagementEscalationPolicy: 'EscalationPolicyType',
    incidentManagementOncallSchedules: 'IncidentManagementOncallScheduleConnection',
    incidentManagementTimelineEvent: 'TimelineEventType',
    incidentManagementTimelineEventTags: 'TimelineEventTagType',
    incidentManagementTimelineEvents: 'TimelineEventTypeConnection',
    inheritedCiVariables: 'InheritedCiVariableConnection',
    isCatalogResource: 'Boolean',
    issue: 'Issue',
    issueStatusCounts: 'IssueStatusCountsType',
    issues: 'IssueConnection',
    issuesEnabled: 'Boolean',
    iterationCadences: 'IterationCadenceConnection',
    iterations: 'IterationConnection',
    jiraImportStatus: 'String',
    jiraImports: 'JiraImportConnection',
    job: 'CiJob',
    jobs: 'CiJobConnection',
    jobsEnabled: 'Boolean',
    label: 'Label',
    labels: 'LabelConnection',
    languages: 'RepositoryLanguage',
    lastActivityAt: 'Time',
    lfsEnabled: 'Boolean',
    mergeCommitTemplate: 'String',
    mergeRequest: 'MergeRequest',
    mergeRequests: 'MergeRequestConnection',
    mergeRequestsDisableCommittersApproval: 'Boolean',
    mergeRequestsEnabled: 'Boolean',
    mergeRequestsFfOnlyEnabled: 'Boolean',
    milestones: 'MilestoneConnection',
    name: 'String',
    nameWithNamespace: 'String',
    namespace: 'Namespace',
    nestedEnvironments: 'NestedEnvironmentConnection',
    networkPolicies: 'NetworkPolicyConnection',
    onlyAllowMergeIfAllDiscussionsAreResolved: 'Boolean',
    onlyAllowMergeIfAllStatusChecksPassed: 'Boolean',
    onlyAllowMergeIfPipelineSucceeds: 'Boolean',
    openIssuesCount: 'Int',
    packages: 'PackageConnection',
    packagesCleanupPolicy: 'PackagesCleanupPolicy',
    path: 'String',
    pathLocks: 'PathLockConnection',
    pipeline: 'Pipeline',
    pipelineAnalytics: 'PipelineAnalytics',
    pipelineCounts: 'PipelineCounts',
    pipelineSchedules: 'PipelineScheduleConnection',
    pipelines: 'PipelineConnection',
    printingMergeRequestLinkEnabled: 'Boolean',
    productAnalyticsDashboards: 'ProductAnalyticsDashboardConnection',
    productAnalyticsInstrumentationKey: 'String',
    productAnalyticsState: 'ProductAnalyticsState',
    productAnalyticsVisualizations: 'ProductAnalyticsDashboardVisualizationConnection',
    projectMembers: 'MemberInterfaceConnection',
    publicJobs: 'Boolean',
    pushRules: 'PushRules',
    recentIssueBoards: 'BoardConnection',
    release: 'Release',
    releases: 'ReleaseConnection',
    removeSourceBranchAfterMerge: 'Boolean',
    repository: 'Repository',
    repositorySizeExcess: 'Float',
    requestAccessEnabled: 'Boolean',
    requirement: 'Requirement',
    requirementStatesCount: 'RequirementStatesCount',
    requirements: 'RequirementConnection',
    runners: 'CiRunnerConnection',
    sastCiConfiguration: 'SastCiConfiguration',
    scanExecutionPolicies: 'ScanExecutionPolicyConnection',
    scanResultPolicies: 'ScanResultPolicyConnection',
    securityDashboardPath: 'String',
    securityScanners: 'SecurityScanners',
    securityTrainingProviders: 'ProjectSecurityTraining',
    securityTrainingUrls: 'SecurityTrainingUrl',
    sentryDetailedError: 'SentryDetailedError',
    sentryErrors: 'SentryErrorCollection',
    serviceDeskAddress: 'String',
    serviceDeskEnabled: 'Boolean',
    services: 'ServiceConnection',
    sharedRunnersEnabled: 'Boolean',
    snippets: 'SnippetConnection',
    snippetsEnabled: 'Boolean',
    squashCommitTemplate: 'String',
    squashReadOnly: 'Boolean',
    sshUrlToRepo: 'String',
    starCount: 'Int',
    statistics: 'ProjectStatistics',
    statisticsDetailsPaths: 'ProjectStatisticsRedirect',
    suggestionCommitMessage: 'String',
    tagList: 'String',
    terraformState: 'TerraformState',
    terraformStates: 'TerraformStateConnection',
    timelogCategories: 'TimeTrackingTimelogCategoryConnection',
    timelogs: 'TimelogConnection',
    topics: 'String',
    trackingKey: 'String',
    userAccessAuthorizedAgents: 'ClusterAgentAuthorizationUserAccessConnection',
    userPermissions: 'ProjectPermissions',
    visibility: 'String',
    visibleForks: 'ProjectConnection',
    vulnerabilities: 'VulnerabilityConnection',
    vulnerabilitiesCountByDay: 'VulnerabilitiesCountByDayConnection',
    vulnerabilityImages: 'VulnerabilityContainerImageConnection',
    vulnerabilityScanners: 'VulnerabilityScannerConnection',
    vulnerabilitySeveritiesCount: 'VulnerabilitySeveritiesCount',
    webUrl: 'String',
    wikiEnabled: 'Boolean',
    workItemTypes: 'WorkItemTypeConnection',
    workItems: 'WorkItemConnection',
  },
  ProjectCiCdSetting: {
    inboundJobTokenScopeEnabled: 'Boolean',
    jobTokenScopeEnabled: 'Boolean',
    keepLatestArtifact: 'Boolean',
    mergePipelinesEnabled: 'Boolean',
    mergeTrainsEnabled: 'Boolean',
    project: 'Project',
  },
  ProjectCiCdSettingsUpdatePayload: {
    ciCdSettings: 'ProjectCiCdSetting',
    clientMutationId: 'String',
    errors: 'String',
  },
  ProjectConnection: {
    count: 'Int',
    edges: 'ProjectEdge',
    nodes: 'Project',
    pageInfo: 'PageInfo',
  },
  ProjectConversations: {
    ciConfigMessages: 'AiMessageTypeConnection',
  },
  ProjectDataTransfer: {
    egressNodes: 'EgressNodeConnection',
    totalEgress: 'BigInt',
  },
  ProjectEdge: {
    cursor: 'String',
    node: 'Project',
  },
  ProjectInitializeProductAnalyticsPayload: {
    clientMutationId: 'String',
    errors: 'String',
    project: 'Project',
  },
  ProjectMember: {
    accessLevel: 'AccessLevel',
    createdAt: 'Time',
    createdBy: 'UserCore',
    expiresAt: 'Time',
    id: 'ID',
    mergeRequestInteraction: 'UserMergeRequestInteraction',
    project: 'Project',
    updatedAt: 'Time',
    user: 'UserCore',
    userPermissions: 'ProjectPermissions',
  },
  ProjectMemberBulkUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    projectMembers: 'ProjectMember',
  },
  ProjectMemberConnection: {
    edges: 'ProjectMemberEdge',
    nodes: 'ProjectMember',
    pageInfo: 'PageInfo',
  },
  ProjectMemberEdge: {
    cursor: 'String',
    node: 'ProjectMember',
  },
  ProjectPermissions: {
    adminOperations: 'Boolean',
    adminPathLocks: 'Boolean',
    adminProject: 'Boolean',
    adminRemoteMirror: 'Boolean',
    adminWiki: 'Boolean',
    archiveProject: 'Boolean',
    changeNamespace: 'Boolean',
    changeVisibilityLevel: 'Boolean',
    createDeployment: 'Boolean',
    createDesign: 'Boolean',
    createIssue: 'Boolean',
    createLabel: 'Boolean',
    createMergeRequestFrom: 'Boolean',
    createMergeRequestIn: 'Boolean',
    createPages: 'Boolean',
    createPipeline: 'Boolean',
    createPipelineSchedule: 'Boolean',
    createSnippet: 'Boolean',
    createWiki: 'Boolean',
    destroyDesign: 'Boolean',
    destroyPages: 'Boolean',
    destroyWiki: 'Boolean',
    downloadCode: 'Boolean',
    downloadWikiCode: 'Boolean',
    forkProject: 'Boolean',
    pushCode: 'Boolean',
    pushToDeleteProtectedBranch: 'Boolean',
    readCommitStatus: 'Boolean',
    readCycleAnalytics: 'Boolean',
    readDesign: 'Boolean',
    readEnvironment: 'Boolean',
    readMergeRequest: 'Boolean',
    readPagesContent: 'Boolean',
    readProject: 'Boolean',
    readProjectMember: 'Boolean',
    readWiki: 'Boolean',
    removeForkProject: 'Boolean',
    removePages: 'Boolean',
    removeProject: 'Boolean',
    renameProject: 'Boolean',
    requestAccess: 'Boolean',
    updatePages: 'Boolean',
    updateWiki: 'Boolean',
    uploadFile: 'Boolean',
  },
  ProjectSecurityPolicySource: {
    project: 'Project',
  },
  ProjectSecurityTraining: {
    description: 'String',
    id: 'GlobalID',
    isEnabled: 'Boolean',
    isPrimary: 'Boolean',
    logoUrl: 'String',
    name: 'String',
    url: 'String',
  },
  ProjectSetComplianceFrameworkPayload: {
    clientMutationId: 'String',
    errors: 'String',
    project: 'Project',
  },
  ProjectSetLockedPayload: {
    clientMutationId: 'String',
    errors: 'String',
    project: 'Project',
  },
  ProjectStatistics: {
    buildArtifactsSize: 'Float',
    commitCount: 'Float',
    containerRegistrySize: 'Float',
    lfsObjectsSize: 'Float',
    packagesSize: 'Float',
    pipelineArtifactsSize: 'Float',
    repositorySize: 'Float',
    snippetsSize: 'Float',
    storageSize: 'Float',
    uploadsSize: 'Float',
    wikiSize: 'Float',
  },
  ProjectStatisticsRedirect: {
    buildArtifacts: 'String',
    containerRegistry: 'String',
    packages: 'String',
    repository: 'String',
    snippets: 'String',
    wiki: 'String',
  },
  ProjectSyncForkPayload: {
    clientMutationId: 'String',
    details: 'ForkDetails',
    errors: 'String',
  },
  ProjectValueStreamAnalyticsFlowMetrics: {
    cycleTime: 'ValueStreamAnalyticsMetric',
    deploymentCount: 'ValueStreamAnalyticsMetric',
    issueCount: 'ValueStreamAnalyticsMetric',
    issuesCompletedCount: 'ValueStreamAnalyticsMetric',
    leadTime: 'ValueStreamAnalyticsMetric',
  },
  ProjectWikiRepositoryRegistry: {
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    projectWikiRepositoryId: 'ID',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  ProjectWikiRepositoryRegistryConnection: {
    edges: 'ProjectWikiRepositoryRegistryEdge',
    nodes: 'ProjectWikiRepositoryRegistry',
    pageInfo: 'PageInfo',
  },
  ProjectWikiRepositoryRegistryEdge: {
    cursor: 'String',
    node: 'ProjectWikiRepositoryRegistry',
  },
  PrometheusAlert: {
    humanizedText: 'String',
    id: 'ID',
  },
  PrometheusIntegrationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    integration: 'AlertManagementPrometheusIntegration',
  },
  PrometheusIntegrationResetTokenPayload: {
    clientMutationId: 'String',
    errors: 'String',
    integration: 'AlertManagementPrometheusIntegration',
  },
  PrometheusIntegrationUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    integration: 'AlertManagementPrometheusIntegration',
  },
  PromoteToEpicPayload: {
    clientMutationId: 'String',
    epic: 'Epic',
    errors: 'String',
    issue: 'Issue',
  },
  ProtectedEnvironment: {
    approvalRules: 'ProtectedEnvironmentApprovalRuleConnection',
    deployAccessLevels: 'ProtectedEnvironmentDeployAccessLevelConnection',
    group: 'Group',
    name: 'String',
    project: 'Project',
    requiredApprovalCount: 'Int',
  },
  ProtectedEnvironmentApprovalRule: {
    accessLevel: 'AccessLevel',
    group: 'Group',
    requiredApprovals: 'Int',
    user: 'UserCore',
  },
  ProtectedEnvironmentApprovalRuleConnection: {
    edges: 'ProtectedEnvironmentApprovalRuleEdge',
    nodes: 'ProtectedEnvironmentApprovalRule',
    pageInfo: 'PageInfo',
  },
  ProtectedEnvironmentApprovalRuleEdge: {
    cursor: 'String',
    node: 'ProtectedEnvironmentApprovalRule',
  },
  ProtectedEnvironmentApprovalRuleForSummary: {
    accessLevel: 'AccessLevel',
    approvals: 'DeploymentApproval',
    approvedCount: 'Int',
    group: 'Group',
    pendingApprovalCount: 'Int',
    requiredApprovals: 'Int',
    status: 'DeploymentApprovalSummaryStatus',
    user: 'UserCore',
  },
  ProtectedEnvironmentConnection: {
    edges: 'ProtectedEnvironmentEdge',
    nodes: 'ProtectedEnvironment',
    pageInfo: 'PageInfo',
  },
  ProtectedEnvironmentDeployAccessLevel: {
    accessLevel: 'AccessLevel',
    group: 'Group',
    user: 'UserCore',
  },
  ProtectedEnvironmentDeployAccessLevelConnection: {
    edges: 'ProtectedEnvironmentDeployAccessLevelEdge',
    nodes: 'ProtectedEnvironmentDeployAccessLevel',
    pageInfo: 'PageInfo',
  },
  ProtectedEnvironmentDeployAccessLevelEdge: {
    cursor: 'String',
    node: 'ProtectedEnvironmentDeployAccessLevel',
  },
  ProtectedEnvironmentEdge: {
    cursor: 'String',
    node: 'ProtectedEnvironment',
  },
  PushAccessLevel: {
    accessLevel: 'Int',
    accessLevelDescription: 'String',
    group: 'AccessLevelGroup',
    user: 'AccessLevelUser',
  },
  PushAccessLevelConnection: {
    edges: 'PushAccessLevelEdge',
    nodes: 'PushAccessLevel',
    pageInfo: 'PageInfo',
  },
  PushAccessLevelEdge: {
    cursor: 'String',
    node: 'PushAccessLevel',
  },
  PushRules: {
    rejectUnsignedCommits: 'Boolean',
  },
  PypiMetadata: {
    id: 'PackagesPypiMetadatumID',
    requiredPython: 'String',
  },
  Query: {
    aiMessages: 'AiCachedMessageTypeConnection',
    auditEventDefinitions: 'AuditEventDefinitionConnection',
    boardList: 'BoardList',
    ciApplicationSettings: 'CiApplicationSettings',
    ciCatalogResource: 'CiCatalogResource',
    ciCatalogResources: 'CiCatalogResourceConnection',
    ciConfig: 'CiConfig',
    ciMinutesUsage: 'CiMinutesNamespaceMonthlyUsageConnection',
    ciPipelineStage: 'CiStage',
    ciVariables: 'CiInstanceVariableConnection',
    containerRepository: 'ContainerRepositoryDetails',
    currentLicense: 'CurrentLicense',
    currentUser: 'UserCore',
    designManagement: 'DesignManagement',
    devopsAdoptionEnabledNamespaces: 'DevopsAdoptionEnabledNamespaceConnection',
    echo: 'String',
    epicBoardList: 'EpicList',
    geoNode: 'GeoNode',
    gitpodEnabled: 'Boolean',
    group: 'Group',
    groups: 'GroupConnection',
    instanceExternalAuditEventDestinations: 'InstanceExternalAuditEventDestinationConnection',
    instanceSecurityDashboard: 'InstanceSecurityDashboard',
    issue: 'Issue',
    issues: 'IssueConnection',
    iteration: 'Iteration',
    jobs: 'CiJobConnection',
    licenseHistoryEntries: 'LicenseHistoryEntryConnection',
    mergeRequest: 'MergeRequest',
    metadata: 'Metadata',
    milestone: 'Milestone',
    namespace: 'Namespace',
    note: 'Note',
    package: 'PackageDetailsType',
    project: 'Project',
    projects: 'ProjectConnection',
    queryComplexity: 'QueryComplexity',
    runner: 'CiRunner',
    runnerPlatforms: 'RunnerPlatformConnection',
    runnerSetup: 'RunnerSetup',
    runners: 'CiRunnerConnection',
    snippets: 'SnippetConnection',
    subscriptionFutureEntries: 'SubscriptionFutureEntryConnection',
    syntheticNote: 'Note',
    timelogs: 'TimelogConnection',
    todo: 'Todo',
    topics: 'TopicConnection',
    usageTrendsMeasurements: 'UsageTrendsMeasurementConnection',
    user: 'UserCore',
    users: 'UserCoreConnection',
    vulnerabilities: 'VulnerabilityConnection',
    vulnerabilitiesCountByDay: 'VulnerabilitiesCountByDayConnection',
    vulnerability: 'Vulnerability',
    workItem: 'WorkItem',
    workspace: 'Workspace',
    workspaces: 'WorkspaceConnection',
  },
  QueryComplexity: {
    limit: 'Int',
    score: 'Int',
  },
  RecentFailures: {
    baseBranch: 'String',
    count: 'Int',
  },
  Registrable: {
    '...on CiSecureFileRegistry': 'CiSecureFileRegistry',
    '...on ContainerRepositoryRegistry': 'ContainerRepositoryRegistry',
    '...on DependencyProxyBlobRegistry': 'DependencyProxyBlobRegistry',
    '...on DependencyProxyManifestRegistry': 'DependencyProxyManifestRegistry',
    '...on DesignManagementRepositoryRegistry': 'DesignManagementRepositoryRegistry',
    '...on JobArtifactRegistry': 'JobArtifactRegistry',
    '...on LfsObjectRegistry': 'LfsObjectRegistry',
    '...on MergeRequestDiffRegistry': 'MergeRequestDiffRegistry',
    '...on PackageFileRegistry': 'PackageFileRegistry',
    '...on PagesDeploymentRegistry': 'PagesDeploymentRegistry',
    '...on PipelineArtifactRegistry': 'PipelineArtifactRegistry',
    '...on ProjectWikiRepositoryRegistry': 'ProjectWikiRepositoryRegistry',
    '...on SnippetRepositoryRegistry': 'SnippetRepositoryRegistry',
    '...on TerraformStateVersionRegistry': 'TerraformStateVersionRegistry',
    '...on UploadRegistry': 'UploadRegistry',
  },
  Release: {
    assets: 'ReleaseAssets',
    author: 'UserCore',
    commit: 'Commit',
    createdAt: 'Time',
    description: 'String',
    descriptionHtml: 'String',
    evidences: 'ReleaseEvidenceConnection',
    historicalRelease: 'Boolean',
    id: 'ReleaseID',
    links: 'ReleaseLinks',
    milestones: 'MilestoneConnection',
    name: 'String',
    releasedAt: 'Time',
    tagName: 'String',
    tagPath: 'String',
    upcomingRelease: 'Boolean',
  },
  ReleaseAssetLink: {
    directAssetPath: 'String',
    directAssetUrl: 'String',
    id: 'ID',
    linkType: 'ReleaseAssetLinkType',
    name: 'String',
    url: 'String',
  },
  ReleaseAssetLinkConnection: {
    edges: 'ReleaseAssetLinkEdge',
    nodes: 'ReleaseAssetLink',
    pageInfo: 'PageInfo',
  },
  ReleaseAssetLinkCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    link: 'ReleaseAssetLink',
  },
  ReleaseAssetLinkDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
    link: 'ReleaseAssetLink',
  },
  ReleaseAssetLinkEdge: {
    cursor: 'String',
    node: 'ReleaseAssetLink',
  },
  ReleaseAssetLinkUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    link: 'ReleaseAssetLink',
  },
  ReleaseAssets: {
    count: 'Int',
    links: 'ReleaseAssetLinkConnection',
    sources: 'ReleaseSourceConnection',
  },
  ReleaseConnection: {
    count: 'Int',
    edges: 'ReleaseEdge',
    nodes: 'Release',
    pageInfo: 'PageInfo',
  },
  ReleaseCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    release: 'Release',
  },
  ReleaseDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
    release: 'Release',
  },
  ReleaseEdge: {
    cursor: 'String',
    node: 'Release',
  },
  ReleaseEvidence: {
    collectedAt: 'Time',
    filepath: 'String',
    id: 'ID',
    sha: 'String',
  },
  ReleaseEvidenceConnection: {
    edges: 'ReleaseEvidenceEdge',
    nodes: 'ReleaseEvidence',
    pageInfo: 'PageInfo',
  },
  ReleaseEvidenceEdge: {
    cursor: 'String',
    node: 'ReleaseEvidence',
  },
  ReleaseLinks: {
    closedIssuesUrl: 'String',
    closedMergeRequestsUrl: 'String',
    editUrl: 'String',
    mergedMergeRequestsUrl: 'String',
    openedIssuesUrl: 'String',
    openedMergeRequestsUrl: 'String',
    selfUrl: 'String',
  },
  ReleaseSource: {
    format: 'String',
    url: 'String',
  },
  ReleaseSourceConnection: {
    edges: 'ReleaseSourceEdge',
    nodes: 'ReleaseSource',
    pageInfo: 'PageInfo',
  },
  ReleaseSourceEdge: {
    cursor: 'String',
    node: 'ReleaseSource',
  },
  ReleaseUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    release: 'Release',
  },
  RemoveProjectFromSecurityDashboardPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  RepositionImageDiffNotePayload: {
    clientMutationId: 'String',
    errors: 'String',
    note: 'Note',
  },
  Repository: {
    blobs: 'RepositoryBlobConnection',
    branchNames: 'String',
    codeOwnersPath: 'String',
    diskPath: 'String',
    empty: 'Boolean',
    exists: 'Boolean',
    paginatedTree: 'TreeConnection',
    rootRef: 'String',
    tree: 'Tree',
  },
  RepositoryBlob: {
    archived: 'Boolean',
    blamePath: 'String',
    canCurrentUserPushToBranch: 'Boolean',
    canModifyBlob: 'Boolean',
    codeNavigationPath: 'String',
    codeOwners: 'UserCore',
    editBlobPath: 'String',
    environmentExternalUrlForRouteMap: 'String',
    environmentFormattedExternalUrl: 'String',
    externalStorage: 'String',
    externalStorageUrl: 'String',
    fileType: 'String',
    findFilePath: 'String',
    forkAndEditPath: 'String',
    forkAndViewPath: 'String',
    gitpodBlobUrl: 'String',
    historyPath: 'String',
    id: 'ID',
    ideEditPath: 'String',
    ideForkAndEditPath: 'String',
    language: 'String',
    lfsOid: 'String',
    mode: 'String',
    name: 'String',
    oid: 'String',
    path: 'String',
    permalinkPath: 'String',
    pipelineEditorPath: 'String',
    plainData: 'String',
    projectBlobPathRoot: 'String',
    rawBlob: 'String',
    rawPath: 'String',
    rawSize: 'BigInt',
    rawTextBlob: 'String',
    replacePath: 'String',
    richViewer: 'BlobViewer',
    simpleViewer: 'BlobViewer',
    size: 'BigInt',
    storedExternally: 'Boolean',
    webPath: 'String',
  },
  RepositoryBlobConnection: {
    edges: 'RepositoryBlobEdge',
    nodes: 'RepositoryBlob',
    pageInfo: 'PageInfo',
  },
  RepositoryBlobEdge: {
    cursor: 'String',
    node: 'RepositoryBlob',
  },
  RepositoryLanguage: {
    color: 'Color',
    name: 'String',
    share: 'Float',
  },
  Requirement: {
    author: 'UserCore',
    createdAt: 'Time',
    description: 'String',
    descriptionHtml: 'String',
    id: 'ID',
    iid: 'ID',
    lastTestReportManuallyCreated: 'Boolean',
    lastTestReportState: 'TestReportState',
    project: 'Project',
    state: 'RequirementState',
    testReports: 'TestReportConnection',
    title: 'String',
    titleHtml: 'String',
    updatedAt: 'Time',
    userPermissions: 'RequirementPermissions',
    workItemIid: 'ID',
  },
  RequirementConnection: {
    edges: 'RequirementEdge',
    nodes: 'Requirement',
    pageInfo: 'PageInfo',
  },
  RequirementEdge: {
    cursor: 'String',
    node: 'Requirement',
  },
  RequirementPermissions: {
    adminRequirement: 'Boolean',
    createRequirement: 'Boolean',
    destroyRequirement: 'Boolean',
    readRequirement: 'Boolean',
    updateRequirement: 'Boolean',
  },
  RequirementStatesCount: {
    archived: 'Int',
    opened: 'Int',
  },
  ResolvableInterface: {
    '...on Discussion': 'Discussion',
    '...on Note': 'Note',
    resolvable: 'Boolean',
    resolved: 'Boolean',
    resolvedAt: 'Time',
    resolvedBy: 'UserCore',
  },
  RootStorageStatistics: {
    buildArtifactsSize: 'Float',
    containerRegistrySize: 'Float',
    dependencyProxySize: 'Float',
    lfsObjectsSize: 'Float',
    packagesSize: 'Float',
    pipelineArtifactsSize: 'Float',
    registrySizeEstimated: 'Boolean',
    repositorySize: 'Float',
    snippetsSize: 'Float',
    storageSize: 'Float',
    uploadsSize: 'Float',
    wikiSize: 'Float',
  },
  RunnerArchitecture: {
    downloadLocation: 'String',
    name: 'String',
  },
  RunnerArchitectureConnection: {
    edges: 'RunnerArchitectureEdge',
    nodes: 'RunnerArchitecture',
    pageInfo: 'PageInfo',
  },
  RunnerArchitectureEdge: {
    cursor: 'String',
    node: 'RunnerArchitecture',
  },
  RunnerCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    runner: 'CiRunner',
  },
  RunnerDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  RunnerPermissions: {
    assignRunner: 'Boolean',
    deleteRunner: 'Boolean',
    readRunner: 'Boolean',
    updateRunner: 'Boolean',
  },
  RunnerPlatform: {
    architectures: 'RunnerArchitectureConnection',
    humanReadableName: 'String',
    name: 'String',
  },
  RunnerPlatformConnection: {
    edges: 'RunnerPlatformEdge',
    nodes: 'RunnerPlatform',
    pageInfo: 'PageInfo',
  },
  RunnerPlatformEdge: {
    cursor: 'String',
    node: 'RunnerPlatform',
  },
  RunnerSetup: {
    installInstructions: 'String',
    registerInstructions: 'String',
  },
  RunnerUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    runner: 'CiRunner',
  },
  RunnersRegistrationTokenResetPayload: {
    clientMutationId: 'String',
    errors: 'String',
    token: 'String',
  },
  SastCiConfiguration: {
    analyzers: 'SastCiConfigurationAnalyzersEntityConnection',
    global: 'SastCiConfigurationEntityConnection',
    pipeline: 'SastCiConfigurationEntityConnection',
  },
  SastCiConfigurationAnalyzersEntity: {
    description: 'String',
    enabled: 'Boolean',
    label: 'String',
    name: 'String',
    variables: 'SastCiConfigurationEntityConnection',
  },
  SastCiConfigurationAnalyzersEntityConnection: {
    edges: 'SastCiConfigurationAnalyzersEntityEdge',
    nodes: 'SastCiConfigurationAnalyzersEntity',
    pageInfo: 'PageInfo',
  },
  SastCiConfigurationAnalyzersEntityEdge: {
    cursor: 'String',
    node: 'SastCiConfigurationAnalyzersEntity',
  },
  SastCiConfigurationEntity: {
    defaultValue: 'String',
    description: 'String',
    field: 'String',
    label: 'String',
    options: 'SastCiConfigurationOptionsEntityConnection',
    size: 'SastUiComponentSize',
    type: 'String',
    value: 'String',
  },
  SastCiConfigurationEntityConnection: {
    edges: 'SastCiConfigurationEntityEdge',
    nodes: 'SastCiConfigurationEntity',
    pageInfo: 'PageInfo',
  },
  SastCiConfigurationEntityEdge: {
    cursor: 'String',
    node: 'SastCiConfigurationEntity',
  },
  SastCiConfigurationOptionsEntity: {
    label: 'String',
    value: 'String',
  },
  SastCiConfigurationOptionsEntityConnection: {
    edges: 'SastCiConfigurationOptionsEntityEdge',
    nodes: 'SastCiConfigurationOptionsEntity',
    pageInfo: 'PageInfo',
  },
  SastCiConfigurationOptionsEntityEdge: {
    cursor: 'String',
    node: 'SastCiConfigurationOptionsEntity',
  },
  SavedReply: {
    content: 'String',
    id: 'UsersSavedReplyID',
    name: 'String',
  },
  SavedReplyConnection: {
    count: 'Int',
    edges: 'SavedReplyEdge',
    nodes: 'SavedReply',
    pageInfo: 'PageInfo',
  },
  SavedReplyCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    savedReply: 'SavedReply',
  },
  SavedReplyDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    savedReply: 'SavedReply',
  },
  SavedReplyEdge: {
    cursor: 'String',
    node: 'SavedReply',
  },
  SavedReplyUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    savedReply: 'SavedReply',
  },
  Scan: {
    errors: 'String',
    name: 'String',
    status: 'ScanStatus',
    warnings: 'String',
  },
  ScanConnection: {
    edges: 'ScanEdge',
    nodes: 'Scan',
    pageInfo: 'PageInfo',
  },
  ScanEdge: {
    cursor: 'String',
    node: 'Scan',
  },
  ScanExecutionPolicy: {
    description: 'String',
    enabled: 'Boolean',
    name: 'String',
    source: 'SecurityPolicySource',
    updatedAt: 'Time',
    yaml: 'String',
  },
  ScanExecutionPolicyCommitPayload: {
    branch: 'String',
    clientMutationId: 'String',
    errors: 'String',
    validationErrors: 'SecurityPolicyValidationError',
  },
  ScanExecutionPolicyConnection: {
    edges: 'ScanExecutionPolicyEdge',
    nodes: 'ScanExecutionPolicy',
    pageInfo: 'PageInfo',
  },
  ScanExecutionPolicyEdge: {
    cursor: 'String',
    node: 'ScanExecutionPolicy',
  },
  ScanResultPolicy: {
    description: 'String',
    enabled: 'Boolean',
    groupApprovers: 'Group',
    name: 'String',
    roleApprovers: 'MemberAccessLevelName',
    source: 'SecurityPolicySource',
    updatedAt: 'Time',
    userApprovers: 'UserCore',
    yaml: 'String',
  },
  ScanResultPolicyConnection: {
    edges: 'ScanResultPolicyEdge',
    nodes: 'ScanResultPolicy',
    pageInfo: 'PageInfo',
  },
  ScanResultPolicyEdge: {
    cursor: 'String',
    node: 'ScanResultPolicy',
  },
  ScannedResource: {
    requestMethod: 'String',
    url: 'String',
  },
  ScannedResourceConnection: {
    edges: 'ScannedResourceEdge',
    nodes: 'ScannedResource',
    pageInfo: 'PageInfo',
  },
  ScannedResourceEdge: {
    cursor: 'String',
    node: 'ScannedResource',
  },
  SecurityFindingCreateIssuePayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  SecurityFindingCreateMergeRequestPayload: {
    clientMutationId: 'String',
    errors: 'String',
    mergeRequest: 'MergeRequest',
  },
  SecurityFindingDismissPayload: {
    clientMutationId: 'String',
    errors: 'String',
    securityFinding: 'PipelineSecurityReportFinding',
    uuid: 'String',
  },
  SecurityFindingRevertToDetectedPayload: {
    clientMutationId: 'String',
    errors: 'String',
    securityFinding: 'PipelineSecurityReportFinding',
  },
  SecurityPolicyProjectAssignPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  SecurityPolicyProjectCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    project: 'Project',
  },
  SecurityPolicyProjectUnassignPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  SecurityPolicySource: {
    '...on GroupSecurityPolicySource': 'GroupSecurityPolicySource',
    '...on ProjectSecurityPolicySource': 'ProjectSecurityPolicySource',
  },
  SecurityPolicyValidationError: {
    field: 'String',
    level: 'String',
    message: 'String',
    title: 'String',
  },
  SecurityReportSummary: {
    apiFuzzing: 'SecurityReportSummarySection',
    clusterImageScanning: 'SecurityReportSummarySection',
    containerScanning: 'SecurityReportSummarySection',
    coverageFuzzing: 'SecurityReportSummarySection',
    dast: 'SecurityReportSummarySection',
    dependencyScanning: 'SecurityReportSummarySection',
    generic: 'SecurityReportSummarySection',
    sast: 'SecurityReportSummarySection',
    secretDetection: 'SecurityReportSummarySection',
  },
  SecurityReportSummarySection: {
    scannedResources: 'ScannedResourceConnection',
    scannedResourcesCount: 'Int',
    scannedResourcesCsvPath: 'String',
    scans: 'ScanConnection',
    vulnerabilitiesCount: 'Int',
  },
  SecurityScanners: {
    available: 'SecurityScannerType',
    enabled: 'SecurityScannerType',
    pipelineRun: 'SecurityScannerType',
  },
  SecurityTrainingUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    training: 'ProjectSecurityTraining',
  },
  SecurityTrainingUrl: {
    identifier: 'String',
    name: 'String',
    status: 'TrainingUrlRequestStatus',
    url: 'String',
  },
  SentryDetailedError: {
    count: 'Int',
    culprit: 'String',
    externalBaseUrl: 'String',
    externalUrl: 'String',
    firstReleaseLastCommit: 'String',
    firstReleaseShortVersion: 'String',
    firstReleaseVersion: 'String',
    firstSeen: 'Time',
    frequency: 'SentryErrorFrequency',
    gitlabCommit: 'String',
    gitlabCommitPath: 'String',
    gitlabIssuePath: 'String',
    id: 'ID',
    integrated: 'Boolean',
    lastReleaseLastCommit: 'String',
    lastReleaseShortVersion: 'String',
    lastReleaseVersion: 'String',
    lastSeen: 'Time',
    message: 'String',
    sentryId: 'String',
    sentryProjectId: 'ID',
    sentryProjectName: 'String',
    sentryProjectSlug: 'String',
    shortId: 'String',
    status: 'SentryErrorStatus',
    tags: 'SentryErrorTags',
    title: 'String',
    type: 'String',
    userCount: 'Int',
  },
  SentryError: {
    count: 'Int',
    culprit: 'String',
    externalUrl: 'String',
    firstSeen: 'Time',
    frequency: 'SentryErrorFrequency',
    id: 'ID',
    lastSeen: 'Time',
    message: 'String',
    sentryId: 'String',
    sentryProjectId: 'ID',
    sentryProjectName: 'String',
    sentryProjectSlug: 'String',
    shortId: 'String',
    status: 'SentryErrorStatus',
    title: 'String',
    type: 'String',
    userCount: 'Int',
  },
  SentryErrorCollection: {
    detailedError: 'SentryDetailedError',
    errorStackTrace: 'SentryErrorStackTrace',
    errors: 'SentryErrorConnection',
    externalUrl: 'String',
  },
  SentryErrorConnection: {
    edges: 'SentryErrorEdge',
    nodes: 'SentryError',
    pageInfo: 'PageInfo',
  },
  SentryErrorEdge: {
    cursor: 'String',
    node: 'SentryError',
  },
  SentryErrorFrequency: {
    count: 'Int',
    time: 'Time',
  },
  SentryErrorStackTrace: {
    dateReceived: 'String',
    issueId: 'String',
    stackTraceEntries: 'SentryErrorStackTraceEntry',
  },
  SentryErrorStackTraceContext: {
    code: 'String',
    line: 'Int',
  },
  SentryErrorStackTraceEntry: {
    col: 'String',
    fileName: 'String',
    function: 'String',
    line: 'String',
    traceContext: 'SentryErrorStackTraceContext',
  },
  SentryErrorTags: {
    level: 'String',
    logger: 'String',
  },
  Service: {
    '...on BaseService': 'BaseService',
    '...on JiraService': 'JiraService',
    active: 'Boolean',
    serviceType: 'ServiceType',
    type: 'String',
  },
  ServiceConnection: {
    edges: 'ServiceEdge',
    nodes: 'Service',
    pageInfo: 'PageInfo',
  },
  ServiceEdge: {
    cursor: 'String',
    node: 'Service',
  },
  Snippet: {
    author: 'UserCore',
    blobs: 'SnippetBlobConnection',
    commenters: 'UserCoreConnection',
    createdAt: 'Time',
    description: 'String',
    descriptionHtml: 'String',
    discussions: 'DiscussionConnection',
    fileName: 'String',
    httpUrlToRepo: 'String',
    id: 'SnippetID',
    notes: 'NoteConnection',
    project: 'Project',
    rawUrl: 'String',
    sshUrlToRepo: 'String',
    title: 'String',
    updatedAt: 'Time',
    userPermissions: 'SnippetPermissions',
    visibilityLevel: 'VisibilityLevelsEnum',
    webUrl: 'String',
  },
  SnippetBlob: {
    binary: 'Boolean',
    externalStorage: 'String',
    mode: 'String',
    name: 'String',
    path: 'String',
    plainData: 'String',
    rawPath: 'String',
    rawPlainData: 'String',
    renderedAsText: 'Boolean',
    richData: 'String',
    richViewer: 'SnippetBlobViewer',
    simpleViewer: 'SnippetBlobViewer',
    size: 'Int',
  },
  SnippetBlobConnection: {
    edges: 'SnippetBlobEdge',
    hasUnretrievableBlobs: 'Boolean',
    nodes: 'SnippetBlob',
    pageInfo: 'PageInfo',
  },
  SnippetBlobEdge: {
    cursor: 'String',
    node: 'SnippetBlob',
  },
  SnippetBlobViewer: {
    collapsed: 'Boolean',
    fileType: 'String',
    loadAsync: 'Boolean',
    loadingPartialName: 'String',
    renderError: 'String',
    tooLarge: 'Boolean',
    type: 'BlobViewersType',
  },
  SnippetConnection: {
    edges: 'SnippetEdge',
    nodes: 'Snippet',
    pageInfo: 'PageInfo',
  },
  SnippetEdge: {
    cursor: 'String',
    node: 'Snippet',
  },
  SnippetPermissions: {
    adminSnippet: 'Boolean',
    awardEmoji: 'Boolean',
    createNote: 'Boolean',
    readSnippet: 'Boolean',
    reportSnippet: 'Boolean',
    updateSnippet: 'Boolean',
  },
  SnippetRepositoryRegistry: {
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    snippetRepositoryId: 'ID',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  SnippetRepositoryRegistryConnection: {
    edges: 'SnippetRepositoryRegistryEdge',
    nodes: 'SnippetRepositoryRegistry',
    pageInfo: 'PageInfo',
  },
  SnippetRepositoryRegistryEdge: {
    cursor: 'String',
    node: 'SnippetRepositoryRegistry',
  },
  SshSignature: {
    commitSha: 'String',
    key: 'Key',
    keyFingerprintSha256: 'String',
    project: 'Project',
    user: 'UserCore',
    verificationStatus: 'VerificationStatus',
  },
  StatusAction: {
    buttonTitle: 'String',
    icon: 'String',
    id: 'String',
    method: 'String',
    path: 'String',
    title: 'String',
  },
  Submodule: {
    flatPath: 'String',
    id: 'ID',
    name: 'String',
    path: 'String',
    sha: 'String',
    treeUrl: 'String',
    type: 'EntryType',
    webUrl: 'String',
  },
  SubmoduleConnection: {
    edges: 'SubmoduleEdge',
    nodes: 'Submodule',
    pageInfo: 'PageInfo',
  },
  SubmoduleEdge: {
    cursor: 'String',
    node: 'Submodule',
  },
  Subscription: {
    aiCompletionResponse: 'AiResponse',
    issuableAssigneesUpdated: 'Issuable',
    issuableDatesUpdated: 'Issuable',
    issuableDescriptionUpdated: 'Issuable',
    issuableEpicUpdated: 'Issuable',
    issuableHealthStatusUpdated: 'Issuable',
    issuableIterationUpdated: 'Issuable',
    issuableLabelsUpdated: 'Issuable',
    issuableMilestoneUpdated: 'Issuable',
    issuableTitleUpdated: 'Issuable',
    issuableWeightUpdated: 'Issuable',
    issueCrmContactsUpdated: 'Issuable',
    mergeRequestApprovalStateUpdated: 'Issuable',
    mergeRequestMergeStatusUpdated: 'Issuable',
    mergeRequestReviewersUpdated: 'Issuable',
    workItemNoteCreated: 'Note',
    workItemNoteDeleted: 'DeletedNote',
    workItemNoteUpdated: 'Note',
    workItemUpdated: 'WorkItem',
  },
  SubscriptionFutureEntry: {
    company: 'String',
    email: 'String',
    expiresAt: 'Date',
    name: 'String',
    plan: 'String',
    startsAt: 'Date',
    type: 'String',
    usersInLicenseCount: 'Int',
  },
  SubscriptionFutureEntryConnection: {
    edges: 'SubscriptionFutureEntryEdge',
    nodes: 'SubscriptionFutureEntry',
    pageInfo: 'PageInfo',
  },
  SubscriptionFutureEntryEdge: {
    cursor: 'String',
    node: 'SubscriptionFutureEntry',
  },
  SuggestedReviewersType: {
    accepted: 'String',
    createdAt: 'Time',
    suggested: 'String',
    updatedAt: 'Time',
  },
  SystemNoteMetadata: {
    action: 'String',
    descriptionVersion: 'DescriptionVersion',
    id: 'SystemNoteMetadataID',
  },
  TaskCompletionStatus: {
    completedCount: 'Int',
    count: 'Int',
  },
  TerraformState: {
    createdAt: 'Time',
    deletedAt: 'Time',
    id: 'ID',
    latestVersion: 'TerraformStateVersion',
    lockedAt: 'Time',
    lockedByUser: 'UserCore',
    name: 'String',
    updatedAt: 'Time',
  },
  TerraformStateConnection: {
    count: 'Int',
    edges: 'TerraformStateEdge',
    nodes: 'TerraformState',
    pageInfo: 'PageInfo',
  },
  TerraformStateDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  TerraformStateEdge: {
    cursor: 'String',
    node: 'TerraformState',
  },
  TerraformStateLockPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  TerraformStateUnlockPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  TerraformStateVersion: {
    createdAt: 'Time',
    createdByUser: 'UserCore',
    downloadPath: 'String',
    id: 'ID',
    job: 'CiJob',
    serial: 'Int',
    updatedAt: 'Time',
  },
  TerraformStateVersionRegistry: {
    createdAt: 'Time',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    terraformStateVersionId: 'ID',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  TerraformStateVersionRegistryConnection: {
    edges: 'TerraformStateVersionRegistryEdge',
    nodes: 'TerraformStateVersionRegistry',
    pageInfo: 'PageInfo',
  },
  TerraformStateVersionRegistryEdge: {
    cursor: 'String',
    node: 'TerraformStateVersionRegistry',
  },
  TestCase: {
    attachmentUrl: 'String',
    classname: 'String',
    executionTime: 'Float',
    file: 'String',
    name: 'String',
    recentFailures: 'RecentFailures',
    stackTrace: 'String',
    status: 'TestCaseStatus',
    systemOutput: 'String',
  },
  TestCaseConnection: {
    count: 'Int',
    edges: 'TestCaseEdge',
    nodes: 'TestCase',
    pageInfo: 'PageInfo',
  },
  TestCaseEdge: {
    cursor: 'String',
    node: 'TestCase',
  },
  TestReport: {
    author: 'UserCore',
    createdAt: 'Time',
    id: 'ID',
    state: 'TestReportState',
    usesLegacyIid: 'Boolean',
  },
  TestReportConnection: {
    edges: 'TestReportEdge',
    nodes: 'TestReport',
    pageInfo: 'PageInfo',
  },
  TestReportEdge: {
    cursor: 'String',
    node: 'TestReport',
  },
  TestReportSummary: {
    testSuites: 'TestSuiteSummaryConnection',
    total: 'TestReportTotal',
  },
  TestReportTotal: {
    count: 'Int',
    error: 'Int',
    failed: 'Int',
    skipped: 'Int',
    success: 'Int',
    suiteError: 'String',
    time: 'Float',
  },
  TestSuite: {
    errorCount: 'Int',
    failedCount: 'Int',
    name: 'String',
    skippedCount: 'Int',
    successCount: 'Int',
    suiteError: 'String',
    testCases: 'TestCaseConnection',
    totalCount: 'Int',
    totalTime: 'Float',
  },
  TestSuiteSummary: {
    buildIds: 'ID',
    errorCount: 'Int',
    failedCount: 'Int',
    name: 'String',
    skippedCount: 'Int',
    successCount: 'Int',
    suiteError: 'String',
    totalCount: 'Int',
    totalTime: 'Float',
  },
  TestSuiteSummaryConnection: {
    count: 'Int',
    edges: 'TestSuiteSummaryEdge',
    nodes: 'TestSuiteSummary',
    pageInfo: 'PageInfo',
  },
  TestSuiteSummaryEdge: {
    cursor: 'String',
    node: 'TestSuiteSummary',
  },
  TimeReportStats: {
    complete: 'TimeboxMetrics',
    incomplete: 'TimeboxMetrics',
    total: 'TimeboxMetrics',
  },
  TimeTrackingTimelogCategory: {
    billable: 'Boolean',
    billingRate: 'Float',
    color: 'Color',
    createdAt: 'Time',
    description: 'String',
    id: 'ID',
    name: 'String',
    updatedAt: 'Time',
  },
  TimeTrackingTimelogCategoryConnection: {
    edges: 'TimeTrackingTimelogCategoryEdge',
    nodes: 'TimeTrackingTimelogCategory',
    pageInfo: 'PageInfo',
  },
  TimeTrackingTimelogCategoryEdge: {
    cursor: 'String',
    node: 'TimeTrackingTimelogCategory',
  },
  TimeboxMetrics: {
    count: 'Int',
    weight: 'Int',
  },
  TimeboxReport: {
    burnupTimeSeries: 'BurnupChartDailyTotals',
    error: 'TimeboxReportError',
    stats: 'TimeReportStats',
  },
  TimeboxReportError: {
    code: 'TimeboxReportErrorReason',
    message: 'String',
  },
  TimeboxReportInterface: {
    '...on Iteration': 'Iteration',
    '...on Milestone': 'Milestone',
    report: 'TimeboxReport',
  },
  TimelineEventCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    timelineEvent: 'TimelineEventType',
  },
  TimelineEventDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    timelineEvent: 'TimelineEventType',
  },
  TimelineEventPromoteFromNotePayload: {
    clientMutationId: 'String',
    errors: 'String',
    timelineEvent: 'TimelineEventType',
  },
  TimelineEventTagCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    timelineEventTag: 'TimelineEventTagType',
  },
  TimelineEventTagType: {
    id: 'IncidentManagementTimelineEventTagID',
    name: 'String',
  },
  TimelineEventTagTypeConnection: {
    edges: 'TimelineEventTagTypeEdge',
    nodes: 'TimelineEventTagType',
    pageInfo: 'PageInfo',
  },
  TimelineEventTagTypeEdge: {
    cursor: 'String',
    node: 'TimelineEventTagType',
  },
  TimelineEventType: {
    action: 'String',
    author: 'UserCore',
    createdAt: 'Time',
    editable: 'Boolean',
    id: 'IncidentManagementTimelineEventID',
    incident: 'Issue',
    note: 'String',
    noteHtml: 'String',
    occurredAt: 'Time',
    promotedFromNote: 'Note',
    timelineEventTags: 'TimelineEventTagTypeConnection',
    updatedAt: 'Time',
    updatedByUser: 'UserCore',
  },
  TimelineEventTypeConnection: {
    edges: 'TimelineEventTypeEdge',
    nodes: 'TimelineEventType',
    pageInfo: 'PageInfo',
  },
  TimelineEventTypeEdge: {
    cursor: 'String',
    node: 'TimelineEventType',
  },
  TimelineEventUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    timelineEvent: 'TimelineEventType',
  },
  Timelog: {
    id: 'ID',
    issue: 'Issue',
    mergeRequest: 'MergeRequest',
    note: 'Note',
    project: 'Project',
    spentAt: 'Time',
    summary: 'String',
    timeSpent: 'Int',
    user: 'UserCore',
    userPermissions: 'TimelogPermissions',
  },
  TimelogConnection: {
    count: 'Int',
    edges: 'TimelogEdge',
    nodes: 'Timelog',
    pageInfo: 'PageInfo',
    totalSpentTime: 'BigInt',
  },
  TimelogCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    timelog: 'Timelog',
  },
  TimelogDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
    timelog: 'Timelog',
  },
  TimelogEdge: {
    cursor: 'String',
    node: 'Timelog',
  },
  TimelogPermissions: {
    adminTimelog: 'Boolean',
  },
  Todo: {
    action: 'TodoActionEnum',
    author: 'UserCore',
    body: 'String',
    createdAt: 'Time',
    group: 'Group',
    id: 'ID',
    note: 'Note',
    project: 'Project',
    state: 'TodoStateEnum',
    target: 'Todoable',
    targetType: 'TodoTargetEnum',
  },
  TodoConnection: {
    edges: 'TodoEdge',
    nodes: 'Todo',
    pageInfo: 'PageInfo',
  },
  TodoCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    todo: 'Todo',
  },
  TodoEdge: {
    cursor: 'String',
    node: 'Todo',
  },
  TodoMarkDonePayload: {
    clientMutationId: 'String',
    errors: 'String',
    todo: 'Todo',
  },
  TodoRestoreManyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    todos: 'Todo',
  },
  TodoRestorePayload: {
    clientMutationId: 'String',
    errors: 'String',
    todo: 'Todo',
  },
  Todoable: {
    '...on AlertManagementAlert': 'AlertManagementAlert',
    '...on BoardEpic': 'BoardEpic',
    '...on Commit': 'Commit',
    '...on Design': 'Design',
    '...on Epic': 'Epic',
    '...on EpicIssue': 'EpicIssue',
    '...on Issue': 'Issue',
    '...on MergeRequest': 'MergeRequest',
    '...on WorkItem': 'WorkItem',
    webUrl: 'String',
  },
  TodosMarkAllDonePayload: {
    clientMutationId: 'String',
    errors: 'String',
    todos: 'Todo',
  },
  Topic: {
    avatarUrl: 'String',
    description: 'String',
    descriptionHtml: 'String',
    id: 'ID',
    name: 'String',
    title: 'String',
  },
  TopicConnection: {
    edges: 'TopicEdge',
    nodes: 'Topic',
    pageInfo: 'PageInfo',
  },
  TopicEdge: {
    cursor: 'String',
    node: 'Topic',
  },
  Tree: {
    blobs: 'BlobConnection',
    lastCommit: 'Commit',
    submodules: 'SubmoduleConnection',
    trees: 'TreeEntryConnection',
  },
  TreeConnection: {
    edges: 'TreeEdge',
    nodes: 'Tree',
    pageInfo: 'PageInfo',
  },
  TreeEdge: {
    cursor: 'String',
    node: 'Tree',
  },
  TreeEntry: {
    flatPath: 'String',
    id: 'ID',
    name: 'String',
    path: 'String',
    sha: 'String',
    type: 'EntryType',
    webPath: 'String',
    webUrl: 'String',
  },
  TreeEntryConnection: {
    edges: 'TreeEntryEdge',
    nodes: 'TreeEntry',
    pageInfo: 'PageInfo',
  },
  TreeEntryEdge: {
    cursor: 'String',
    node: 'TreeEntry',
  },
  UnprotectAccessLevel: {
    accessLevel: 'Int',
    accessLevelDescription: 'String',
    group: 'AccessLevelGroup',
    user: 'AccessLevelUser',
  },
  UnprotectAccessLevelConnection: {
    edges: 'UnprotectAccessLevelEdge',
    nodes: 'UnprotectAccessLevel',
    pageInfo: 'PageInfo',
  },
  UnprotectAccessLevelEdge: {
    cursor: 'String',
    node: 'UnprotectAccessLevel',
  },
  UpdateAlertStatusPayload: {
    alert: 'AlertManagementAlert',
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
    todo: 'Todo',
  },
  UpdateBoardEpicUserPreferencesPayload: {
    clientMutationId: 'String',
    epicUserPreferences: 'BoardEpicUserPreferences',
    errors: 'String',
  },
  UpdateBoardListPayload: {
    clientMutationId: 'String',
    errors: 'String',
    list: 'BoardList',
  },
  UpdateBoardPayload: {
    board: 'Board',
    clientMutationId: 'String',
    errors: 'String',
  },
  UpdateComplianceFrameworkPayload: {
    clientMutationId: 'String',
    complianceFramework: 'ComplianceFramework',
    errors: 'String',
  },
  UpdateContainerExpirationPolicyPayload: {
    clientMutationId: 'String',
    containerExpirationPolicy: 'ContainerExpirationPolicy',
    errors: 'String',
  },
  UpdateDependencyProxyImageTtlGroupPolicyPayload: {
    clientMutationId: 'String',
    dependencyProxyImageTtlPolicy: 'DependencyProxyImageTtlGroupPolicy',
    errors: 'String',
  },
  UpdateDependencyProxySettingsPayload: {
    clientMutationId: 'String',
    dependencyProxySetting: 'DependencyProxySetting',
    errors: 'String',
  },
  UpdateEpicBoardListPayload: {
    clientMutationId: 'String',
    errors: 'String',
    list: 'EpicList',
  },
  UpdateEpicPayload: {
    clientMutationId: 'String',
    epic: 'Epic',
    errors: 'String',
  },
  UpdateImageDiffNotePayload: {
    clientMutationId: 'String',
    errors: 'String',
    note: 'Note',
  },
  UpdateIssuePayload: {
    clientMutationId: 'String',
    errors: 'String',
    issue: 'Issue',
  },
  UpdateIterationPayload: {
    clientMutationId: 'String',
    errors: 'String',
    iteration: 'Iteration',
  },
  UpdateNamespacePackageSettingsPayload: {
    clientMutationId: 'String',
    errors: 'String',
    packageSettings: 'PackageSettings',
  },
  UpdateNotePayload: {
    clientMutationId: 'String',
    errors: 'String',
    note: 'Note',
  },
  UpdatePackagesCleanupPolicyPayload: {
    clientMutationId: 'String',
    errors: 'String',
    packagesCleanupPolicy: 'PackagesCleanupPolicy',
  },
  UpdateRequirementPayload: {
    clientMutationId: 'String',
    errors: 'String',
    requirement: 'Requirement',
  },
  UpdateSnippetPayload: {
    clientMutationId: 'String',
    errors: 'String',
    snippet: 'Snippet',
  },
  UploadDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
    upload: 'FileUpload',
  },
  UploadRegistry: {
    createdAt: 'Time',
    fileId: 'ID',
    id: 'ID',
    lastSyncFailure: 'String',
    lastSyncedAt: 'Time',
    retryAt: 'Time',
    retryCount: 'Int',
    state: 'RegistryState',
    verificationRetryAt: 'Time',
    verifiedAt: 'Time',
  },
  UploadRegistryConnection: {
    edges: 'UploadRegistryEdge',
    nodes: 'UploadRegistry',
    pageInfo: 'PageInfo',
  },
  UploadRegistryEdge: {
    cursor: 'String',
    node: 'UploadRegistry',
  },
  UsageTrendsMeasurement: {
    count: 'Int',
    identifier: 'MeasurementIdentifier',
    recordedAt: 'Time',
  },
  UsageTrendsMeasurementConnection: {
    edges: 'UsageTrendsMeasurementEdge',
    nodes: 'UsageTrendsMeasurement',
    pageInfo: 'PageInfo',
  },
  UsageTrendsMeasurementEdge: {
    cursor: 'String',
    node: 'UsageTrendsMeasurement',
  },
  User: {
    '...on MergeRequestAssignee': 'MergeRequestAssignee',
    '...on MergeRequestAuthor': 'MergeRequestAuthor',
    '...on MergeRequestParticipant': 'MergeRequestParticipant',
    '...on MergeRequestReviewer': 'MergeRequestReviewer',
    '...on UserCore': 'UserCore',
    assignedMergeRequests: 'MergeRequestConnection',
    authoredMergeRequests: 'MergeRequestConnection',
    avatarUrl: 'String',
    bot: 'Boolean',
    callouts: 'UserCalloutConnection',
    commitEmail: 'String',
    email: 'String',
    emails: 'EmailConnection',
    gitpodEnabled: 'Boolean',
    groupCount: 'Int',
    groupMemberships: 'GroupMemberConnection',
    groups: 'GroupConnection',
    id: 'ID',
    location: 'String',
    name: 'String',
    namespace: 'Namespace',
    namespaceCommitEmails: 'NamespaceCommitEmailConnection',
    preferencesGitpodPath: 'String',
    profileEnableGitpodPath: 'String',
    projectMemberships: 'ProjectMemberConnection',
    publicEmail: 'String',
    reviewRequestedMergeRequests: 'MergeRequestConnection',
    savedReplies: 'SavedReplyConnection',
    savedReply: 'SavedReply',
    snippets: 'SnippetConnection',
    starredProjects: 'ProjectConnection',
    state: 'UserState',
    status: 'UserStatus',
    timelogs: 'TimelogConnection',
    todos: 'TodoConnection',
    userAchievements: 'UserAchievementConnection',
    userPermissions: 'UserPermissions',
    username: 'String',
    webPath: 'String',
    webUrl: 'String',
    workspaces: 'WorkspaceConnection',
  },
  UserAchievement: {
    achievement: 'Achievement',
    awardedByUser: 'UserCore',
    createdAt: 'Time',
    id: 'AchievementsUserAchievementID',
    revokedAt: 'Time',
    revokedByUser: 'UserCore',
    updatedAt: 'Time',
    user: 'UserCore',
  },
  UserAchievementConnection: {
    edges: 'UserAchievementEdge',
    nodes: 'UserAchievement',
    pageInfo: 'PageInfo',
  },
  UserAchievementEdge: {
    cursor: 'String',
    node: 'UserAchievement',
  },
  UserCallout: {
    dismissedAt: 'Time',
    featureName: 'UserCalloutFeatureNameEnum',
  },
  UserCalloutConnection: {
    edges: 'UserCalloutEdge',
    nodes: 'UserCallout',
    pageInfo: 'PageInfo',
  },
  UserCalloutCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    userCallout: 'UserCallout',
  },
  UserCalloutEdge: {
    cursor: 'String',
    node: 'UserCallout',
  },
  UserCore: {
    assignedMergeRequests: 'MergeRequestConnection',
    authoredMergeRequests: 'MergeRequestConnection',
    avatarUrl: 'String',
    bot: 'Boolean',
    callouts: 'UserCalloutConnection',
    commitEmail: 'String',
    email: 'String',
    emails: 'EmailConnection',
    gitpodEnabled: 'Boolean',
    groupCount: 'Int',
    groupMemberships: 'GroupMemberConnection',
    groups: 'GroupConnection',
    id: 'ID',
    location: 'String',
    name: 'String',
    namespace: 'Namespace',
    namespaceCommitEmails: 'NamespaceCommitEmailConnection',
    preferencesGitpodPath: 'String',
    profileEnableGitpodPath: 'String',
    projectMemberships: 'ProjectMemberConnection',
    publicEmail: 'String',
    reviewRequestedMergeRequests: 'MergeRequestConnection',
    savedReplies: 'SavedReplyConnection',
    savedReply: 'SavedReply',
    snippets: 'SnippetConnection',
    starredProjects: 'ProjectConnection',
    state: 'UserState',
    status: 'UserStatus',
    timelogs: 'TimelogConnection',
    todos: 'TodoConnection',
    userAchievements: 'UserAchievementConnection',
    userPermissions: 'UserPermissions',
    username: 'String',
    webPath: 'String',
    webUrl: 'String',
    workspaces: 'WorkspaceConnection',
  },
  UserCoreConnection: {
    edges: 'UserCoreEdge',
    nodes: 'UserCore',
    pageInfo: 'PageInfo',
  },
  UserCoreEdge: {
    cursor: 'String',
    node: 'UserCore',
  },
  UserMergeRequestInteraction: {
    applicableApprovalRules: 'ApprovalRule',
    approved: 'Boolean',
    canMerge: 'Boolean',
    canUpdate: 'Boolean',
    reviewState: 'MergeRequestReviewState',
    reviewed: 'Boolean',
  },
  UserPermissions: {
    createSnippet: 'Boolean',
  },
  UserPreferences: {
    issuesSort: 'IssueSort',
    visibilityPipelineIdType: 'VisibilityPipelineIdType',
  },
  UserPreferencesUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    userPreferences: 'UserPreferences',
  },
  UserStatus: {
    availability: 'AvailabilityEnum',
    emoji: 'String',
    message: 'String',
    messageHtml: 'String',
  },
  ValueStreamAnalyticsMetric: {
    identifier: 'String',
    links: 'ValueStreamMetricLinkType',
    title: 'String',
    unit: 'String',
    value: 'Float',
  },
  ValueStreamMetricLinkType: {
    docsLink: 'Boolean',
    label: 'String',
    name: 'String',
    url: 'String',
  },
  VulnerabilitiesCountByDay: {
    critical: 'Int',
    date: 'ISO8601Date',
    high: 'Int',
    info: 'Int',
    low: 'Int',
    medium: 'Int',
    total: 'Int',
    unknown: 'Int',
  },
  VulnerabilitiesCountByDayConnection: {
    edges: 'VulnerabilitiesCountByDayEdge',
    nodes: 'VulnerabilitiesCountByDay',
    pageInfo: 'PageInfo',
  },
  VulnerabilitiesCountByDayEdge: {
    cursor: 'String',
    node: 'VulnerabilitiesCountByDay',
  },
  Vulnerability: {
    commenters: 'UserCoreConnection',
    confirmedAt: 'Time',
    confirmedBy: 'UserCore',
    description: 'String',
    descriptionHtml: 'String',
    details: 'VulnerabilityDetail',
    detectedAt: 'Time',
    discussions: 'DiscussionConnection',
    dismissedAt: 'Time',
    dismissedBy: 'UserCore',
    externalIssueLinks: 'VulnerabilityExternalIssueLinkConnection',
    falsePositive: 'Boolean',
    hasSolutions: 'Boolean',
    id: 'ID',
    identifiers: 'VulnerabilityIdentifier',
    issueLinks: 'VulnerabilityIssueLinkConnection',
    links: 'VulnerabilityLink',
    location: 'VulnerabilityLocation',
    mergeRequest: 'MergeRequest',
    message: 'String',
    notes: 'NoteConnection',
    primaryIdentifier: 'VulnerabilityIdentifier',
    project: 'Project',
    reportType: 'VulnerabilityReportType',
    resolvedAt: 'Time',
    resolvedBy: 'UserCore',
    resolvedOnDefaultBranch: 'Boolean',
    scanner: 'VulnerabilityScanner',
    severity: 'VulnerabilitySeverity',
    state: 'VulnerabilityState',
    stateComment: 'String',
    stateTransitions: 'VulnerabilityStateTransitionTypeConnection',
    title: 'String',
    updatedAt: 'Time',
    userNotesCount: 'Int',
    userPermissions: 'VulnerabilityPermissions',
    vulnerabilityPath: 'String',
    webUrl: 'String',
  },
  VulnerabilityConfirmPayload: {
    clientMutationId: 'String',
    errors: 'String',
    vulnerability: 'Vulnerability',
  },
  VulnerabilityConnection: {
    edges: 'VulnerabilityEdge',
    nodes: 'Vulnerability',
    pageInfo: 'PageInfo',
  },
  VulnerabilityContainerImage: {
    name: 'String',
  },
  VulnerabilityContainerImageConnection: {
    edges: 'VulnerabilityContainerImageEdge',
    nodes: 'VulnerabilityContainerImage',
    pageInfo: 'PageInfo',
  },
  VulnerabilityContainerImageEdge: {
    cursor: 'String',
    node: 'VulnerabilityContainerImage',
  },
  VulnerabilityCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    vulnerability: 'Vulnerability',
  },
  VulnerabilityDetail: {
    '...on VulnerabilityDetailBase': 'VulnerabilityDetailBase',
    '...on VulnerabilityDetailBoolean': 'VulnerabilityDetailBoolean',
    '...on VulnerabilityDetailCode': 'VulnerabilityDetailCode',
    '...on VulnerabilityDetailCommit': 'VulnerabilityDetailCommit',
    '...on VulnerabilityDetailDiff': 'VulnerabilityDetailDiff',
    '...on VulnerabilityDetailFileLocation': 'VulnerabilityDetailFileLocation',
    '...on VulnerabilityDetailInt': 'VulnerabilityDetailInt',
    '...on VulnerabilityDetailList': 'VulnerabilityDetailList',
    '...on VulnerabilityDetailMarkdown': 'VulnerabilityDetailMarkdown',
    '...on VulnerabilityDetailModuleLocation': 'VulnerabilityDetailModuleLocation',
    '...on VulnerabilityDetailNamedList': 'VulnerabilityDetailNamedList',
    '...on VulnerabilityDetailTable': 'VulnerabilityDetailTable',
    '...on VulnerabilityDetailText': 'VulnerabilityDetailText',
    '...on VulnerabilityDetailUrl': 'VulnerabilityDetailUrl',
  },
  VulnerabilityDetailBase: {
    description: 'String',
    fieldName: 'String',
    name: 'String',
  },
  VulnerabilityDetailBoolean: {
    description: 'String',
    fieldName: 'String',
    name: 'String',
    value: 'Boolean',
  },
  VulnerabilityDetailCode: {
    description: 'String',
    fieldName: 'String',
    lang: 'String',
    name: 'String',
    value: 'String',
  },
  VulnerabilityDetailCommit: {
    description: 'String',
    fieldName: 'String',
    name: 'String',
    value: 'String',
  },
  VulnerabilityDetailDiff: {
    after: 'String',
    before: 'String',
    description: 'String',
    fieldName: 'String',
    name: 'String',
  },
  VulnerabilityDetailFileLocation: {
    description: 'String',
    fieldName: 'String',
    fileName: 'String',
    lineEnd: 'Int',
    lineStart: 'Int',
    name: 'String',
  },
  VulnerabilityDetailInt: {
    description: 'String',
    fieldName: 'String',
    name: 'String',
    value: 'Int',
  },
  VulnerabilityDetailList: {
    description: 'String',
    fieldName: 'String',
    items: 'VulnerabilityDetail',
    name: 'String',
  },
  VulnerabilityDetailMarkdown: {
    description: 'String',
    fieldName: 'String',
    name: 'String',
    value: 'String',
  },
  VulnerabilityDetailModuleLocation: {
    description: 'String',
    fieldName: 'String',
    moduleName: 'String',
    name: 'String',
    offset: 'Int',
  },
  VulnerabilityDetailNamedList: {
    description: 'String',
    fieldName: 'String',
    items: 'VulnerabilityDetailNamedListItem',
    name: 'String',
  },
  VulnerabilityDetailNamedListItem: {
    description: 'String',
    fieldName: 'String',
    name: 'String',
    value: 'VulnerabilityDetail',
  },
  VulnerabilityDetailRow: {
    description: 'String',
    fieldName: 'String',
    name: 'String',
    row: 'VulnerabilityDetail',
  },
  VulnerabilityDetailTable: {
    description: 'String',
    fieldName: 'String',
    headers: 'VulnerabilityDetail',
    name: 'String',
    rows: 'VulnerabilityDetailRow',
  },
  VulnerabilityDetailText: {
    description: 'String',
    fieldName: 'String',
    name: 'String',
    value: 'String',
  },
  VulnerabilityDetailUrl: {
    description: 'String',
    fieldName: 'String',
    href: 'String',
    name: 'String',
    text: 'String',
  },
  VulnerabilityDismissPayload: {
    clientMutationId: 'String',
    errors: 'String',
    vulnerability: 'Vulnerability',
  },
  VulnerabilityEdge: {
    cursor: 'String',
    node: 'Vulnerability',
  },
  VulnerabilityEvidence: {
    request: 'VulnerabilityRequest',
    response: 'VulnerabilityResponse',
    source: 'VulnerabilityEvidenceSource',
    summary: 'String',
    supportingMessages: 'VulnerabilityEvidenceSupportingMessage',
  },
  VulnerabilityEvidenceSource: {
    identifier: 'String',
    name: 'String',
    url: 'String',
  },
  VulnerabilityEvidenceSupportingMessage: {
    name: 'String',
    request: 'VulnerabilityRequest',
    response: 'VulnerabilityResponse',
  },
  VulnerabilityExternalIssueLink: {
    externalIssue: 'ExternalIssue',
    id: 'VulnerabilitiesExternalIssueLinkID',
    linkType: 'VulnerabilityExternalIssueLinkType',
  },
  VulnerabilityExternalIssueLinkConnection: {
    edges: 'VulnerabilityExternalIssueLinkEdge',
    nodes: 'VulnerabilityExternalIssueLink',
    pageInfo: 'PageInfo',
  },
  VulnerabilityExternalIssueLinkCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    externalIssueLink: 'VulnerabilityExternalIssueLink',
  },
  VulnerabilityExternalIssueLinkDestroyPayload: {
    clientMutationId: 'String',
    errors: 'String',
  },
  VulnerabilityExternalIssueLinkEdge: {
    cursor: 'String',
    node: 'VulnerabilityExternalIssueLink',
  },
  VulnerabilityIdentifier: {
    externalId: 'String',
    externalType: 'String',
    name: 'String',
    url: 'String',
  },
  VulnerabilityIssueLink: {
    id: 'ID',
    issue: 'Issue',
    linkType: 'VulnerabilityIssueLinkType',
  },
  VulnerabilityIssueLinkConnection: {
    edges: 'VulnerabilityIssueLinkEdge',
    nodes: 'VulnerabilityIssueLink',
    pageInfo: 'PageInfo',
  },
  VulnerabilityIssueLinkCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    issueLinks: 'VulnerabilityIssueLink',
  },
  VulnerabilityIssueLinkEdge: {
    cursor: 'String',
    node: 'VulnerabilityIssueLink',
  },
  VulnerabilityLink: {
    name: 'String',
    url: 'String',
  },
  VulnerabilityLocation: {
    '...on VulnerabilityLocationClusterImageScanning': 'VulnerabilityLocationClusterImageScanning',
    '...on VulnerabilityLocationContainerScanning': 'VulnerabilityLocationContainerScanning',
    '...on VulnerabilityLocationCoverageFuzzing': 'VulnerabilityLocationCoverageFuzzing',
    '...on VulnerabilityLocationDast': 'VulnerabilityLocationDast',
    '...on VulnerabilityLocationDependencyScanning': 'VulnerabilityLocationDependencyScanning',
    '...on VulnerabilityLocationGeneric': 'VulnerabilityLocationGeneric',
    '...on VulnerabilityLocationSast': 'VulnerabilityLocationSast',
    '...on VulnerabilityLocationSecretDetection': 'VulnerabilityLocationSecretDetection',
  },
  VulnerabilityLocationClusterImageScanning: {
    dependency: 'VulnerableDependency',
    image: 'String',
    kubernetesResource: 'VulnerableKubernetesResource',
    operatingSystem: 'String',
  },
  VulnerabilityLocationContainerScanning: {
    dependency: 'VulnerableDependency',
    image: 'String',
    operatingSystem: 'String',
  },
  VulnerabilityLocationCoverageFuzzing: {
    blobPath: 'String',
    crashAddress: 'String',
    crashType: 'String',
    endLine: 'String',
    file: 'String',
    stacktraceSnippet: 'String',
    startLine: 'String',
    vulnerableClass: 'String',
    vulnerableMethod: 'String',
  },
  VulnerabilityLocationDast: {
    hostname: 'String',
    param: 'String',
    path: 'String',
    requestMethod: 'String',
  },
  VulnerabilityLocationDependencyScanning: {
    blobPath: 'String',
    dependency: 'VulnerableDependency',
    file: 'String',
  },
  VulnerabilityLocationGeneric: {
    description: 'String',
  },
  VulnerabilityLocationSast: {
    blobPath: 'String',
    endLine: 'String',
    file: 'String',
    startLine: 'String',
    vulnerableClass: 'String',
    vulnerableMethod: 'String',
  },
  VulnerabilityLocationSecretDetection: {
    blobPath: 'String',
    endLine: 'String',
    file: 'String',
    startLine: 'String',
    vulnerableClass: 'String',
    vulnerableMethod: 'String',
  },
  VulnerabilityPermissions: {
    adminVulnerability: 'Boolean',
    adminVulnerabilityExternalIssueLink: 'Boolean',
    adminVulnerabilityIssueLink: 'Boolean',
    createVulnerabilityExport: 'Boolean',
    createVulnerabilityFeedback: 'Boolean',
    destroyVulnerabilityFeedback: 'Boolean',
    readVulnerability: 'Boolean',
    readVulnerabilityFeedback: 'Boolean',
    updateVulnerabilityFeedback: 'Boolean',
  },
  VulnerabilityRemediationType: {
    diff: 'String',
    summary: 'String',
  },
  VulnerabilityRequest: {
    body: 'String',
    headers: 'VulnerabilityRequestResponseHeader',
    method: 'String',
    url: 'String',
  },
  VulnerabilityRequestResponseHeader: {
    name: 'String',
    value: 'String',
  },
  VulnerabilityResolvePayload: {
    clientMutationId: 'String',
    errors: 'String',
    vulnerability: 'Vulnerability',
  },
  VulnerabilityResponse: {
    body: 'String',
    headers: 'VulnerabilityRequestResponseHeader',
    reasonPhrase: 'String',
    statusCode: 'Int',
  },
  VulnerabilityRevertToDetectedPayload: {
    clientMutationId: 'String',
    errors: 'String',
    vulnerability: 'Vulnerability',
  },
  VulnerabilityScanner: {
    externalId: 'String',
    id: 'ID',
    name: 'String',
    reportType: 'VulnerabilityReportType',
    reportTypeHumanized: 'String',
    vendor: 'String',
  },
  VulnerabilityScannerConnection: {
    edges: 'VulnerabilityScannerEdge',
    nodes: 'VulnerabilityScanner',
    pageInfo: 'PageInfo',
  },
  VulnerabilityScannerEdge: {
    cursor: 'String',
    node: 'VulnerabilityScanner',
  },
  VulnerabilitySeveritiesCount: {
    critical: 'Int',
    high: 'Int',
    info: 'Int',
    low: 'Int',
    medium: 'Int',
    unknown: 'Int',
  },
  VulnerabilityStateTransitionType: {
    author: 'UserCore',
    comment: 'String',
    createdAt: 'Time',
    dismissalReason: 'VulnerabilityDismissalReason',
    fromState: 'VulnerabilityState',
    toState: 'VulnerabilityState',
  },
  VulnerabilityStateTransitionTypeConnection: {
    edges: 'VulnerabilityStateTransitionTypeEdge',
    nodes: 'VulnerabilityStateTransitionType',
    pageInfo: 'PageInfo',
  },
  VulnerabilityStateTransitionTypeEdge: {
    cursor: 'String',
    node: 'VulnerabilityStateTransitionType',
  },
  VulnerableDependency: {
    package: 'VulnerablePackage',
    version: 'String',
  },
  VulnerableKubernetesResource: {
    agent: 'ClusterAgent',
    clusterId: 'ClustersClusterID',
    containerName: 'String',
    kind: 'String',
    name: 'String',
    namespace: 'String',
  },
  VulnerablePackage: {
    name: 'String',
  },
  VulnerableProjectsByGrade: {
    count: 'Int',
    grade: 'VulnerabilityGrade',
    projects: 'ProjectConnection',
  },
  WorkItem: {
    author: 'UserCore',
    closedAt: 'Time',
    confidential: 'Boolean',
    createNoteEmail: 'String',
    createdAt: 'Time',
    description: 'String',
    descriptionHtml: 'String',
    id: 'WorkItemID',
    iid: 'ID',
    lockVersion: 'Int',
    namespace: 'Namespace',
    project: 'Project',
    reference: 'String',
    state: 'WorkItemState',
    title: 'String',
    titleHtml: 'String',
    updatedAt: 'Time',
    userPermissions: 'WorkItemPermissions',
    webUrl: 'String',
    widgets: 'WorkItemWidget',
    workItemType: 'WorkItemType',
  },
  WorkItemConnection: {
    edges: 'WorkItemEdge',
    nodes: 'WorkItem',
    pageInfo: 'PageInfo',
  },
  WorkItemConvertPayload: {
    clientMutationId: 'String',
    errors: 'String',
    workItem: 'WorkItem',
  },
  WorkItemCreateFromTaskPayload: {
    clientMutationId: 'String',
    errors: 'String',
    newWorkItem: 'WorkItem',
    workItem: 'WorkItem',
  },
  WorkItemCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    workItem: 'WorkItem',
  },
  WorkItemDeletePayload: {
    clientMutationId: 'String',
    errors: 'String',
    project: 'Project',
  },
  WorkItemDeleteTaskPayload: {
    clientMutationId: 'String',
    errors: 'String',
    workItem: 'WorkItem',
  },
  WorkItemEdge: {
    cursor: 'String',
    node: 'WorkItem',
  },
  WorkItemExportPayload: {
    clientMutationId: 'String',
    errors: 'String',
    message: 'String',
  },
  WorkItemPermissions: {
    adminParentLink: 'Boolean',
    adminWorkItem: 'Boolean',
    createNote: 'Boolean',
    deleteWorkItem: 'Boolean',
    readWorkItem: 'Boolean',
    setWorkItemMetadata: 'Boolean',
    updateWorkItem: 'Boolean',
  },
  WorkItemType: {
    iconName: 'String',
    id: 'WorkItemsTypeID',
    name: 'String',
  },
  WorkItemTypeConnection: {
    edges: 'WorkItemTypeEdge',
    nodes: 'WorkItemType',
    pageInfo: 'PageInfo',
  },
  WorkItemTypeEdge: {
    cursor: 'String',
    node: 'WorkItemType',
  },
  WorkItemUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    workItem: 'WorkItem',
  },
  WorkItemUpdateTaskPayload: {
    clientMutationId: 'String',
    errors: 'String',
    task: 'WorkItem',
    workItem: 'WorkItem',
  },
  WorkItemWidget: {
    '...on WorkItemWidgetAssignees': 'WorkItemWidgetAssignees',
    '...on WorkItemWidgetAwardEmoji': 'WorkItemWidgetAwardEmoji',
    '...on WorkItemWidgetCurrentUserTodos': 'WorkItemWidgetCurrentUserTodos',
    '...on WorkItemWidgetDescription': 'WorkItemWidgetDescription',
    '...on WorkItemWidgetHealthStatus': 'WorkItemWidgetHealthStatus',
    '...on WorkItemWidgetHierarchy': 'WorkItemWidgetHierarchy',
    '...on WorkItemWidgetIteration': 'WorkItemWidgetIteration',
    '...on WorkItemWidgetLabels': 'WorkItemWidgetLabels',
    '...on WorkItemWidgetMilestone': 'WorkItemWidgetMilestone',
    '...on WorkItemWidgetNotes': 'WorkItemWidgetNotes',
    '...on WorkItemWidgetNotifications': 'WorkItemWidgetNotifications',
    '...on WorkItemWidgetProgress': 'WorkItemWidgetProgress',
    '...on WorkItemWidgetRequirementLegacy': 'WorkItemWidgetRequirementLegacy',
    '...on WorkItemWidgetStartAndDueDate': 'WorkItemWidgetStartAndDueDate',
    '...on WorkItemWidgetStatus': 'WorkItemWidgetStatus',
    '...on WorkItemWidgetTestReports': 'WorkItemWidgetTestReports',
    '...on WorkItemWidgetWeight': 'WorkItemWidgetWeight',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetAssignees: {
    allowsMultipleAssignees: 'Boolean',
    assignees: 'UserCoreConnection',
    canInviteMembers: 'Boolean',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetAwardEmoji: {
    awardEmoji: 'AwardEmojiConnection',
    downvotes: 'Int',
    type: 'WorkItemWidgetType',
    upvotes: 'Int',
  },
  WorkItemWidgetCurrentUserTodos: {
    currentUserTodos: 'TodoConnection',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetDescription: {
    description: 'String',
    descriptionHtml: 'String',
    edited: 'Boolean',
    lastEditedAt: 'Time',
    lastEditedBy: 'UserCore',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetHealthStatus: {
    healthStatus: 'HealthStatus',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetHierarchy: {
    children: 'WorkItemConnection',
    hasChildren: 'Boolean',
    parent: 'WorkItem',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetIteration: {
    iteration: 'Iteration',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetLabels: {
    allowsScopedLabels: 'Boolean',
    labels: 'LabelConnection',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetMilestone: {
    milestone: 'Milestone',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetNotes: {
    discussions: 'DiscussionConnection',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetNotifications: {
    subscribed: 'Boolean',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetProgress: {
    progress: 'Int',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetRequirementLegacy: {
    legacyIid: 'Int',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetStartAndDueDate: {
    dueDate: 'Date',
    startDate: 'Date',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetStatus: {
    status: 'String',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetTestReports: {
    testReports: 'TestReportConnection',
    type: 'WorkItemWidgetType',
  },
  WorkItemWidgetWeight: {
    type: 'WorkItemWidgetType',
    weight: 'Int',
  },
  Workspace: {
    actualState: 'String',
    clusterAgent: 'ClusterAgent',
    createdAt: 'Time',
    deploymentResourceVersion: 'Int',
    desiredState: 'String',
    desiredStateUpdatedAt: 'Time',
    devfile: 'String',
    devfilePath: 'String',
    devfileRef: 'String',
    editor: 'String',
    id: 'RemoteDevelopmentWorkspaceID',
    maxHoursBeforeTermination: 'Int',
    name: 'String',
    namespace: 'String',
    processedDevfile: 'String',
    projectId: 'ID',
    respondedToAgentAt: 'Time',
    updatedAt: 'Time',
    url: 'String',
    user: 'UserCore',
  },
  WorkspaceConnection: {
    edges: 'WorkspaceEdge',
    nodes: 'Workspace',
    pageInfo: 'PageInfo',
  },
  WorkspaceCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    workspace: 'Workspace',
  },
  WorkspaceEdge: {
    cursor: 'String',
    node: 'Workspace',
  },
  WorkspaceUpdatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    workspace: 'Workspace',
  },
  X509Certificate: {
    certificateStatus: 'String',
    createdAt: 'Time',
    email: 'String',
    id: 'ID',
    serialNumber: 'String',
    subject: 'String',
    subjectKeyIdentifier: 'String',
    updatedAt: 'Time',
    x509Issuer: 'X509Issuer',
  },
  X509Issuer: {
    createdAt: 'Time',
    crlUrl: 'String',
    id: 'ID',
    subject: 'String',
    subjectKeyIdentifier: 'String',
    updatedAt: 'Time',
  },
  X509Signature: {
    commitSha: 'String',
    project: 'Project',
    user: 'UserCore',
    verificationStatus: 'VerificationStatus',
    x509Certificate: 'X509Certificate',
  },
  iterationCreatePayload: {
    clientMutationId: 'String',
    errors: 'String',
    iteration: 'Iteration',
  },
};
